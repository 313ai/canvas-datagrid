{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 51007155cfe805a856eb","webpack:///./lib/main.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/defaults.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","grid","args","self","createGrid","orders","rows","columns","hasFocus","activeCell","columnIndex","rowIndex","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","uniqueId","orderBy","orderDirection","columnFilters","filters","ellipsisCache","scrollBox","visibleRows","sizes","trees","currentFilter","selections","hovers","attributes","style","intf","formatters","sorters","schemaHashes","events","uId","changes","scrollIndexTop","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","childGrids","openChildren","scrollModes","mouse","x","y","getSelectedData","expandToRow","getSchema","data","length","forEach","row","index","column","col","scrollOffset","e","parentNode","nodeType","scrollLeft","scrollTop","left","top","position","ignoreScrollOffset","h","w","offsetParent","offsetLeft","offsetTop","offsetHeight","offsetWidth","height","width","getLayerPos","rect","canvas","getBoundingClientRect","pos","clientX","clientY","isChildGrid","canvasOffsetLeft","canvasOffsetTop","fillArray","low","high","step","getRowHeaderCellHeight","showColumnHeaders","columnHeaderCellHeight","getColumnHeaderCellWidth","showRowHeaders","cornerCell","rowHeaderCellWidth","setStorageData","saveAppearance","localStorage","setItem","JSON","stringify","schema","tempSchema","createColumnOrders","createRowOrders","getVisibleSchema","filter","hidden","createNewRowData","newRow","header","defaultValue","apply","getSchemaNameHash","key","type","f","console","warn","string","getBestGuessDataType","columnName","t","indexOf","drawChildGrids","keys","gridKey","draw","resizeChildGrids","resize","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","rowHeaderCellHeight","columnHeaderCellWidth","scrollBarWidth","clipElement","clip","autoScrollZone","ctrl","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","setTimeout","mousemove","scrollRepeatRate","refreshFromOrigialData","originalData","validateColumn","Error","setDefaults","obj1","obj2","def","setAttributes","defaults","setStyle","styles","autosize","colName","fitColumnToValues","dispose","removeChild","eventParent","removeEventListener","mouseup","mousedown","dblclick","click","scrollWheel","contextmenu","copy","controlInput","keypress","keyup","keydown","window","observer","disconnect","tryLoadStoredOrders","storedSettings","push","getHeaderByName","order","getFontHeight","fontStyle","parseFloat","getFontHeightLong","pixels","start","end","document","createElement","ctx","getContext","save","fillRect","textBaseline","fillStyle","font","fillText","getImageData","restore","log","parseFont","test","init","publicStyleKeyIntf","initScrollBox","setDom","addEventListener","dispatchEvent","appendTo","beginEditAt","endEdit","setActiveCell","scrollIntoView","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","getCellAt","isCellVisible","selectArea","getSchemaFromData","setFilter","selectRow","parentGrid","toggleTree","expandTree","collapseTree","context","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","set","value","filterFor","filterRegExp","invalidFilterRegEx","RegExp","number","getItem","parse","Array","slice","arguments","canvasDatagrid","require","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","radius","r","b","quadraticCurveTo","strokeRect","text","addBorderLine","addEllipsis","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowOrderIndex","headerIndex","columnOrderIndex","childGridAttributes","val","cellStyle","isHeader","isCorner","isRowHeader","selected","hovered","active","isGrid","isArray","activeHeader","orderByArrowSize","treeArrowSize","cellWidth","ev","columnWidth","borderWidth","cx","cy","cellHeight","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","title","userHeight","rowHeight","userWidth","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","tree","showRowNumbers","visible","toString","filterTextPrefix","aCell","selectionBorders","drawRowHeader","rowData","a","rowHeaderCell","drawRow","treeHeight","rowSansTreeHeight","g","treeGrid","rowHeaders","u","performance","now","cellBorderWidth","scale","devicePixelRatio","backgroundColor","showNewRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","rowSelectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","mousex","mousey","touchx","touchStart","touchy","entities","dragContext","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","touches","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","body","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","requestAnimationFrame","touchReleaseAnimationDurationMs","dz","touchReleaseAcceleration","fn","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentDOMNode","parentIsCanvas","accumulator","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","input","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","scroll","overridePos","contextMenu","dragBounds","sBounds","delta","controlKey","metaKey","persistantSelectionMode","previousCell","isInGrid","cellBoundaryCrossed","draggingItem","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","dragAddToSelection","selectionBounds","abort","abortEdit","newValue","oldValue","aborted","focus","postDraw","option","valueInEnum","enum","enumItems","appendChild","multiLine","createInlineStyle","zIndex","nx","ny","keyCode","editable","checkSelectionChange","selectionChanged","selectedData","treeArrowClickRadius","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","globalRowResize","stopDragResize","scrollGrid","scrollMode","scrollStartMode","scrollStart","stopScrollGrid","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","last","cols","selectionFollowsActiveCell","deltaY","deltaX","clipboardData","sData","setData","blur","normalizeDataset","integerToAlpha","toUpperCase","autoResizeColumns","createContextMenu","items","parentContextMenu","createItems","item","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isNaN","isFinite","createFilterContextMenuItems","fillAutoComplete","autoCompleteItems","filterInput","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","contextMenuMarginLeft","contextMenuMarginTop","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","contextFilterInputColor","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","onblur","tagName","MutationObserver","mutations","mutation","observe","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","coulumn","supressEvent","rowId","childGrid","treeGridHeight","direction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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CA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,+BACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,0BAICnD,MAAAnJ,EAAA+B,MAAA9B,EAAAD,QAAAgC,IP03GK,SAAU/B,EAAQD,EAASM,GQ7lHjC,GAAAyB,GAAAC,CAEAD,UAiVCE,MAjVDD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAAsiB,kBAAA,SAAAqF,EAAA+C,GACA,GAAAC,IACAC,6CACArmB,OAAA,OACAsmB,cAAA,SACAC,WAAA,MACAC,QAAA,IACAC,WAAAhrB,EAAA0B,MAAAupB,6BACAxD,MAAAznB,EAAA0B,MAAAwpB,wBACAC,OAAAnrB,EAAA0B,MAAA0pB,yBACAC,aAAArrB,EAAA0B,MAAA4pB,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAAzrB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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                //cell.grid.resize(true);\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                var mEv, option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    self.input = document.createElement('select');\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                } else {\n                    self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            var i, d, max;\n            if (data === null || data === '' || data === undefined) {\n                return [];\n            }\n            if ((typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (typeof data === 'number'\n                    || typeof data === 'boolean'\n                    || data !== null) {\n                data = [{a: data}];\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    self.normalizeDataset(d);\n                }]);\n                if (i) {\n                    self.normalizeDataset(i);\n                }\n            }\n            if (typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][self.integerToAlpha(x).toUpperCase()] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort']\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.127],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 51007155cfe805a856eb","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './defaults',\n    './dom',\n    './publicMethods'\n], function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                //cell.grid.resize(true);\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                var mEv, option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    self.input = document.createElement('select');\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                } else {\n                    self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            var i, d, max;\n            if (data === null || data === '' || data === undefined) {\n                return [];\n            }\n            if ((typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (typeof data === 'number'\n                    || typeof data === 'boolean'\n                    || data !== null) {\n                data = [{a: data}];\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    self.normalizeDataset(d);\n                }]);\n                if (i) {\n                    self.normalizeDataset(i);\n                }\n            }\n            if (typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][self.integerToAlpha(x).toUpperCase()] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort']\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.127],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}