{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 1877dedda46081fa0e4a","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","requestAnimationFrame","resize","dispatchEvent","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","rowIndex","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","rawValue","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","debug","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","onlyResizeX","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","hidden","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addCellValue","trRow","textRow","ht","headers","sData","copyHeadersOnSelectAll","tableRows","textRows","join","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","pkDefined","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","filters","currentFilter","sorters","parsers","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","callback","etl","autoGenerateSchema","autoResizeColumns","disableRowOrdering","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UA2RCE,MA3RDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IFqFK,SAAUhC,OAAQD,QAASO,qBGlXjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,QAuGC2B,MAtGDD,8BAAA,QAAAM,SAAAC,WACA,YAGA,SAAAC,MAAAC,MACAA,aACA,IAAAtC,QA+BA,OA9BAA,MAAAuC,gBAAAT,KAAAQ,KAAAF,UACApC,KAAAwC,YAAAF,KAAAG,YAAA,8BAAAC,KAAAJ,KAAAG,WAAAE,UACA3C,KAAAwC,YACAxC,KAAA4C,QAEA5C,KAAA4C,KAAA5C,KAAAuC,YAAAM,KAAA,kDACAC,SAAAC,cAAA,UAEA/C,KAAAsC,UACAtC,KAAA4C,KAAAN,UACAtC,KAAAgD,oBAAAZ,UAAAY,oBACAhD,KAAAiD,kBAAAb,UAAAa,kBACAjD,KAAAkD,oBAAAd,UAAAc,oBACAlD,KAAAmD,WAAA,SAAAb,GAEA,MADAA,GAAAF,WAAA,EACA,GAAAC,MAAAC,IAEApC,QAAAkD,QAAA,SAAAvD,GACAA,EAAAG,QAEAA,KAAAwC,aACAxC,KAAAqD,WAAAf,KAAAG,WAAAY,WACArD,KAAAyC,WAAAH,KAAAG,YACSzC,KAAA4C,KAAAU,kBACTtD,KAAAqD,WAAArD,KAAA4C,KAAAW,cAAsDC,KAAA,SACtDxD,KAAAyC,WAAAzC,KAAAqD,YAEArD,KAAAyC,WAAAzC,KAAA4C,KAEA5C,KAAAyD,OACAzD,KAAA4C,KAnCAR,qBACA,IAAAlC,SAAAwD,MAAAlC,UAAAmC,MAAAnD,KAAAoD,UAkGA,OA9DAC,QAAAC,cACAzB,KAAAb,UAAAT,OAAAgD,OAAAF,OAAAC,YAAAtC,YAGAqC,OAAAG,iBACA3B,KAAA4B,mBAAA7B,UAAA8B,0BACA7B,KAAAb,UAAA2C,qBAAA/B,UAAA+B,qBACA9B,KAAAb,UAAA4C,yBAAAhC,UAAAgC,yBACA/B,KAAAb,UAAA6C,kBAAAjC,UAAAiC,kBACAhC,KAAAb,UAAA8C,gBAAAlC,UAAAkC,gBACAT,OAAAG,eAAAlE,OAAA,kBAAAuC,QAGAwB,eAAAU,gBAAAV,OAAAW,UACAX,OAAAU,eAAA,SAAAjC,GAAiD,UAAAD,MAAAC,KAGjDzC,OAAAD,QAAA,SAAA0C,GACAA,OACA,IAAAhC,GAAAmE,GAAA,yCACA,0DACA,OAAAZ,QAAAG,gBAAAlB,SAAA4B,KAAApB,kBACAhD,EAAAwC,SAAAC,cAAA,mBACAhC,OAAA4D,KAAArC,GAAAc,QAAA,SAAAwB,GAEA,YAAAA,GACA,eAAAA,EAEA,WAAAH,EAAAI,QAAAD,OACAH,GAAArB,QAAA,SAAA0B,OACAhD,KAAAQ,EAAAwC,QAAAF,KACA,uCAAAC,QAAAD,GACA,gBAAAtC,GAAAwC,IAAA,OAAAxC,EAAAwC,IACA/D,OAAA4D,KAAArC,EAAAwC,IAAA1B,QAAA,SAAA2B,GACAzE,EAAAwE,GAAAC,GAAAzC,EAAAwC,GAAAC,KAIAzE,EAAAwE,GAAAxC,EAAAwC,WAMAxE,EAAA0B,WAAA4C,GAAAtC,EAAAsC,MAEAtC,EAAA0C,OACA1E,EAAA0E,KAAA1C,EAAA0C,MAGA1C,EAAAG,YACAH,EAAAG,WAAAwC,YAAA3E,GAEAA,IAEAgC,EAAAF,WAAA,EACA9B,EAAA,GAAA+B,MAAAC,GACAA,EAAAG,YAAAH,EAAAG,WAAAwC,aACA3C,EAAAG,WAAAwC,YAAA3E,GAEAA,IAEAT,OAAAD,SACCsC,MAAAtC,QAAAgC,iCAAA/B,OAAAD,QAAAiC,gCH0XK,SAAUhC,OAAQD,QAASO,qBI5ejC,GAAAyB,8BAAAC,6BAEAD,+BAAAzB,oBAAA,QA2LC2B,MA3LDD,8BAAA,SAAAE,UACA,YACA,mBA8BA,QAAAmD,gBAAAC,EAAAC,GACA,GAAA9E,KAQA,OANAyB,UAAAzB,GACAA,EAAAyB,SAAAoD,GAAAE,OAAA,SAAA/E,GACA,MAAAA,GAAA,GAAAgF,gBAAAF,EAAAE,eACAlD,UAAAa,kBAAA3C,EAAA,MAAA8E,EAAAE,eACAlD,UAAAa,kBAAA3C,EAAA,SAAA8E,EAAAE,gBACa,GArCb,GAAAC,SAAAnD,YAsLA,OArLAA,WAAAc,oBAAA,SAAAsC,GACAA,IAAAC,QAAA,YACA,IAAAC,GAAAhE,EAAA,EAaA,OAZAgC,OAAAlC,UAAA4B,QAAA5C,KAAAgF,EAAA,SAAAG,GACA,MAAAD,IACAA,GAAA,OACAhE,GAAAiE,EAAAC,gBAGA,MAAAD,OACAD,GAAA,QAGAhE,GAAAiE,KAEAjE,GAEAU,UAAAa,kBAAA,SAAAuC,EAAAK,GACA,GAAAnE,GAAA,EAQA,OAPAgC,OAAAlC,UAAA4B,QAAA5C,KAAAgF,EAAA,SAAAG,GACA,GAAAA,MAAAC,cAEA,YADAlE,GAAA,IAAAiE,EAAAL,cAGA5D,IAAAiE,KAEAE,EAAA,aAAAnE,GAaAU,UAAAY,oBAAA,SAAA8C,EAAAlD,GACA,GAAAmD,GAAAlC,OAAAmC,iBAAA,oBAAApD,EAAAqD,QAAArD,IAAAsD,OAAA,MACAC,IACAvD,GAAAwD,cAAAL,EACAhE,SAAAoE,GACAA,IAAApE,SAAAE,OACAkE,EAAA/C,QAAA,SAAAiD,GACA,GAAAC,EACAA,GAAAP,EAAAQ,iBAAAnE,UAAAa,kBAAAoD,EAAA,QACA,KAAAC,IACAA,EAAAP,EAAAQ,iBAAAnE,UAAAa,kBAAAoD,EAAA,SAEA,KAAAC,GAAA,gBAAAA,IACA1D,EAAA4D,iBAAAH,EAAA,GAAAd,cAAAc,GAAA,IAAAC,EACAb,QAAA,WAAAA,QAAA,WAAAY,EAAA,OAGAI,sBAAA,WAA+C7D,EAAA8D,QAAA,MAC/CZ,GAAAlD,EAAA+D,eACA/D,EAAA+D,cAAA,eAAA/D,EAAAgE,QAGArB,SACAP,KAAA,SAAA6B,GACA,IACA,MAAAC,MAAAC,MAAAF,GACiB,MAAAG,GACjB,SAAAC,OAAA,oDAGAC,OAAA,SAAAC,GACA,IACA,MAAAL,MAAAC,MAAAI,GACiB,MAAAH,GACjB,SAAAC,OAAA,gEAGAG,OAAA,SAAAC,EAAAhB,GACA,GAAAjF,GAAAkG,SAAAD,EAAA,GACA,OAAAE,OAAAnG,GAAAiF,EAAAjF,GAEAoG,QAAA,SAAAC,GACA,cAAA/E,KAAA+E,IAEAC,OAAA,SAAAC,GACA,MAAAA,KAGAvF,UAAA8B,wBAAA,WACA,GAAA5D,MAAsBsH,GAAA,2CAKtB,OAJA7F,UAAAzB,GACAA,EAAAyB,SAAAC,WAAAoB,QAAA,SAAAyE,GACAD,EAAAE,KAAAD,EAAA,GAAAvC,iBAEAsC,GAEAxF,UAAA+B,qBAAA,WACAlE,KAAA8H,WAAA,GAEA3F,UAAAiC,kBAAA,WACA,GAAAzB,GAAA3C,IACA2C,GAAAmF,WAAA,EACA3F,UAAA4F,QAAApF,GACAR,UAAAY,qBAAA,EAAAJ,GACAA,EAAA8D,QAAA,IAEAtE,UAAAkC,gBAAA,WACArE,KAAAyG,UAEAtE,UAAAgC,yBAAA,SAAA6D,SAAAC,OAAAC,QACA,GAAAC,KAAAxF,KAAA3C,KAAAoG,GACA,cAAA4B,SAEA,WADA7F,WAAAY,qBAAA,EAAAJ,KAGA,aAAAqF,SAEA,YADArF,KAAAN,KAAA0C,KAAAO,QAAAP,KAAAmD,QAGA,eAAAF,SAEA,YADArF,KAAAN,KAAA4E,OAAA3B,QAAA2B,OAAAiB,QAGA,aAAAF,SAEA,YADArF,KAAAhC,KAAAuH,OAGA,cAAAF,UAAA,cAAAA,SAAA,CAIA,GADA5B,IAAAnB,eAAA,aAAA+C,UAIA,MAFAG,KAAA7C,cAAAc,KAAA,SACAzD,KAAAZ,WAAAqE,IAAA,IAAA+B,IAAAD,QAGA,OAAAzF,KAAAuF,WACArF,KAAAyF,iBAAA,KAAAJ,SAAA,SAAAjB,GACAnE,KAAAsF,YAKA/F,UAAA4F,QAAA,SAAApF,GACA,GAAA0F,EACAzE,QAAA0E,mBACA3F,EAAAI,oBAAA,WAAoDZ,UAAAY,qBAAA,EAAAJ,GAA4CA,EAAA8D,UAOhG4B,EAAA,GAAAzE,QAAA0E,iBAAA,SAAAC,GACA,GAAAC,GAAAC,CACAhF,OAAAlC,UAAA4B,QAAA5C,KAAAgI,EAAA,SAAAG,GACA,gBAAAA,EAAAC,eACA,UAAAD,EAAAC,mBACAF,GAAA,GAGAC,EAAAE,OAAApG,YACA,UAAAkG,EAAAE,OAAApG,WAAAqG,cACAJ,GAAA,SAGAC,EAAAI,WAAAC,OAAA,qBAAAL,EAAAM,QACAR,GAAA,MAGAC,GACA9F,EAAAI,qBAAA,EAAAJ,GAEA6F,IACA7F,EAAAoC,KAAAO,QAAAP,KAAApC,EAAAsG,cAGAZ,EAAAN,QAAApF,GAAoCuG,eAAA,EAAAC,WAAA,EAAApH,YAAA,EAAAqH,SAAA,IACpC3F,MAAAlC,UAAA4B,QAAA5C,KAAAsC,SAAAwG,iBAAA,kBAAAC,GACAjB,EAAAN,QAAAuB,GAAsCJ,eAAA,EAAAC,WAAA,EAAApH,YAAA,EAAAqH,SAAA,QAGtCjH,YAECF,MAAAtC,QAAAgC,iCAAA/B,OAAAD,QAAAiC,gCJmfK,SAAUhC,EAAQD,EAASO,GKhrBjC,GAAAyB,GAAAC,CAEAD,UAqvCCE,MArvCDD,EAAA,WACA,YACA,iBAAA7B,GASA,QAAAwJ,GAAAC,EAAAC,EAAAC,EAAAtD,GACAsD,KAAA,CACA,IAAAC,GAAAtJ,IACA,KAAAsJ,EAAAH,EAAyBG,GAAAF,EAAWE,GAAAD,EACpCrJ,EAAAsJ,OAAA9H,KAAAuE,EAAAuD,EAAA,kBAAAvD,KAAAuD,GAAAvD,CAEA,OAAA/F,GAEA,QAAAuJ,GAAAC,EAAAC,EAAAH,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA/J,GAAAwJ,EAAAG,EAAAjB,OACAsB,EAAAP,EAAAI,CACAP,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAE,OAAAf,EAAAI,EAAAD,GACAE,EAAA7G,QAAA,SAAAhC,GACA,GACAwJ,GACAC,EAFAvE,MAAAxE,KAAAoI,EAAA9I,IAAA8I,EAGAG,KACA/D,EAAAwE,KAAAC,IAAAzE,IAEAsE,EAAAhB,EAAAtJ,EACAuK,EAAAb,EAAAD,EAAAzD,EAAAgE,EACAtK,EAAAyK,IAAAO,OAAAJ,EAAAC,GACAjB,GAAAtJ,IAEAN,EAAAyK,IAAAE,OAAAf,EAAAE,EAAAE,EAAAD,GACA/J,EAAAyK,IAAAQ,YAAAb,EACApK,EAAAyK,IAAAS,SAEA,QAAAC,KACA,GAAAC,IAAA,CACArK,QAAA4D,KAAA3E,EAAAqL,gBAAAjI,QAAA,SAAAkI,GACAtL,EAAAqL,eAAAC,GAAAC,WACAH,GAAA,KAGAA,GACApL,EAAAwL,OAGA,QAAAC,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAxC,WAAAwC,EAAAG,eACAjC,EAAA8B,EAAA9B,EAAA5J,EAAAuK,iBACAP,EAAA0B,EAAA1B,EAAAhK,EAAAwK,eACA,IAAAxK,EAAAqL,eAAAO,GAAA,CAEA,GADAD,EAAA3L,EAAAqL,eAAAO,GACAD,EAAAG,SAAAJ,EAAAI,QAAAH,EAAAI,QAAAL,EAAAK,MAGiB,CACjB,IAAAJ,EAAAJ,SACA,MAEA,OAAAvL,GAAAyK,IAAAuB,UAAAL,EAAA/B,EAAAI,GALAhK,EAAAqL,eAAAO,OAAA9J,GAQA6J,EAAA,GAAAM,OAAAP,EAAAK,MAAAL,EAAAI,QACA9L,EAAAqL,eAAAO,GAAAD,EACAA,EAAAO,OAAA,WACAlM,EAAAyK,IAAAuB,UAAAL,EAAA/B,EAAAI,GACAmB,KAEAQ,EAAAQ,IAAA,6BAA0CC,KAC1C,kDAAAV,EAAAK,MAAA,aAAAL,EAAAI,OAAA,qJAGAF,EAAA,uCAMA,QAAAS,GAAAzC,EAAAI,GACA,GAAAsC,GAAAtM,EAAA4G,MAAA2F,kCAAAvM,EAAAwM,MACAC,EAAAzM,EAAA4G,MAAA8F,mCAAA1M,EAAAwM,MACAG,EAAA3M,EAAA4G,MAAAgG,oCAAA5M,EAAAwM,MACAK,EAAA7M,EAAA4G,MAAAkG,8BAAA9M,EAAAwM,MACAO,EAAA/M,EAAA4G,MAAAoG,+BAAAhN,EAAAwM,KAqBA,OApBA5C,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAsG,8BACAlN,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAuG,oCACAnN,EAAAyK,IAAAC,YACAd,GAAA6C,EACAzC,GAAAsC,EACA,QAAAtM,EAAAoN,gBACApN,EAAAyK,IAAAE,OAAAf,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAE,OAAAf,EAAAI,KAEAhK,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA+C,GACA/M,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA+C,IAEA/M,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAZ,EAAAI,EAAAF,EAEA,QAAAW,GAAA5B,EAAA9B,EAAAI,GACA,GAAAsC,GAAAtM,EAAA4G,MAAA2G,mBAAAvN,EAAAwM,MACAG,EAAA3M,EAAA4G,MAAA4G,qBAAAxN,EAAAwM,MACAC,EAAAzM,EAAA4G,MAAA6G,oBAAAzN,EAAAwM,MACAK,EAAA7M,EAAA4G,MAAA8G,eAAA1N,EAAAwM,MACAO,EAAA/M,EAAA4G,MAAA+G,gBAAA3N,EAAAwM,KAqBA,OApBA5C,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgH,eACA5N,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAiH,qBACA7N,EAAAyK,IAAAC,YACAd,GAAA6C,EACAzC,GAAAsC,EACAtM,EAAA8N,aAAApC,EAAAqC,WACA/N,EAAAyK,IAAAE,OAAAf,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAE,OAAAf,EAAAI,KAEAhK,EAAAyK,IAAAO,OAAApB,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAmD,EAAA/C,EAAA,GAAA6C,GACA7M,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA6C,GACA7M,EAAAyK,IAAAO,OAAApB,EAAAI,IAEAhK,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAZ,EAAAI,EAAAF,EAEA,QAAAqB,GAAApE,EAAAI,EAAAF,EAAAC,EAAAkE,GACArE,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,eACA,IAAAF,GAAAV,EAAAE,EAAAoE,EAAAlE,EAAAD,CACA/J,GAAAyK,IAAAC,YACA1K,EAAAyK,IAAAE,OAAAf,EAAAqE,EAAAjE,GACAhK,EAAAyK,IAAAO,OAAAV,EAAA2D,EAAAjE,GACAhK,EAAAyK,IAAA0D,iBAAA7D,EAAAN,EAAAM,EAAAN,EAAAiE,GACAjO,EAAAyK,IAAAO,OAAAV,EAAAN,EAAAD,EAAAkE,GACAjO,EAAAyK,IAAA0D,iBAAA7D,EAAA4D,EAAA5D,EAAA2D,EAAAC,GACAlO,EAAAyK,IAAAO,OAAApB,EAAAqE,EAAAC,GACAlO,EAAAyK,IAAA0D,iBAAAvE,EAAAsE,EAAAtE,EAAAsE,EAAAD,GACAjO,EAAAyK,IAAAO,OAAApB,EAAAI,EAAAiE,GACAjO,EAAAyK,IAAA0D,iBAAAvE,EAAAI,EAAAJ,EAAAqE,EAAAjE,GAEA,QAAAoE,GAAAxE,EAAAI,EAAAF,EAAAC,GACAH,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA2D,SAAAxE,EAAAI,EAAAF,EAAAC,GAEA,QAAAsE,GAAAzE,EAAAI,EAAAF,EAAAC,GACAH,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA4D,WAAAzE,EAAAI,EAAAF,EAAAC,GAEA,QAAAuE,GAAAC,EAAA3E,EAAAI,GACAJ,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA6D,SAAAC,EAAA3E,EAAAI,GAEA,QAAAwE,GAAA5E,EAAAI,EAAAM,GACAV,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAgE,IAAA7E,EAAAI,EAAAM,EAAA,IAAAQ,KAAA4D,IACA1O,EAAAyK,IAAA4C,OAEA,QAAAsB,GAAA/E,EAAAI,EAAAM,GACAV,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAgE,IAAA7E,EAAAI,EAAAM,EAAA,IAAAQ,KAAA4D,IACA1O,EAAAyK,IAAAS,SAEA,QAAA0D,GAAApL,GAIAxD,EAAAyK,IAAAC,YACA,IAAAlH,IACAxD,EAAAyK,IAAAE,OAAA3K,EAAA6O,sBAAA7O,EAAA8O,oBACA9O,EAAAyK,IAAAO,OAAAhL,EAAA6O,sBAAA7O,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8O,qBAEA,IAAAtL,IACAxD,EAAAyK,IAAAE,OAAA,EAAA3K,EAAA8O,oBACA9O,EAAAyK,IAAAO,OAAA,EAAAhL,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8O,qBAEA,IAAAtL,IACAxD,EAAAyK,IAAAE,OAAA3K,EAAA6O,sBAAA,GACA7O,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA,GACA/L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA6O,sBAAA7O,EAAA8L,SAEA9L,EAAAyK,IAAAsE,OAEA,QAAAC,GAAApF,EAAAI,EAAAM,GACA,cAAAtK,EAAA4G,MAAAqI,oBACA,MAAAT,GAAA5E,EAAAI,EAAA,GAAAM,EAEA8D,GAAAxE,EAAA,GAAAU,EAAAN,EAAA,GAAAM,OAEA,QAAA4E,GAAAtF,EAAAI,EAAAM,GACA,cAAAtK,EAAA4G,MAAAqI,oBACA,MAAAN,GAAA/E,EAAAI,EAAA,GAAAM,EAEA+D,GAAAzE,EAAA,GAAAU,EAAAN,EAAA,GAAAM,OAEA,QAAA6E,GAAAzO,EAAA0O,GACA,GAAAC,GAAArP,EAAA4G,MAAA0I,sBAEAC,GAAA,WACAP,EAAAtO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAqF,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAqF,IAEAG,GAAA,WACAR,EAAAtO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,IAEAI,GAAA,WACAT,EAAAtO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAqF,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAqF,IAEAK,GAAA,WACAV,EAAAtO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,MAGAD,KAEA,QAAAO,GAAAjP,EAAA0O,GACApP,EAAAyK,IAAAC,aAEAkF,EAAA,WACA5P,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,kBAEAF,EAAA,WACAtK,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,SAEAoC,EAAA,WACAlO,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,QACA9L,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,SAEAvL,EAAA,WACAP,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,UAGAsD,KACApP,EAAAyK,IAAAS,SAEA,QAAA2E,GAAAtB,EAAAxC,GACA,GAAArL,GAAAoJ,EAAA,CACA,OAAA9J,GAAA8P,cAAAvB,IAAAvO,EAAA8P,cAAAvB,GAAAxC,GACA/L,EAAA8P,cAAAvB,GAAAxC,IAGAjC,EAAA9J,EAAAyK,IAAAsF,YAAAxB,GAAAxC,MACA/L,EAAA8P,cAAAvB,GAAAvO,EAAA8P,cAAAvB,OACA7N,GAAiBsP,MAAAzB,EAAAxC,MAAAjC,GACjB9J,EAAA8P,cAAAvB,GAAAxC,GAAArL,EACAA,GAEA,QAAAuP,GAAAvE,GACA,GAAAwE,GAAAlQ,EAAA4G,MAAA8E,EAAA9E,MAAA,eAAA5G,EAAAwM,MACA2D,EAAAnQ,EAAA4G,MAAA8E,EAAA9E,MAAA,cAAA5G,EAAAwM,MACA4D,EAAApQ,EAAA4G,MAAA8E,EAAA9E,MAAA,gBAAA5G,EAAAwM,MACA6D,EAAArQ,EAAA4G,MAAA8E,EAAA9E,MAAA,iBAAA5G,EAAAwM,MACA8D,EAAAH,EAAAzE,EAAAI,OAAA,GAAAJ,EAAAI,OACAyE,EAAAL,EAAAxE,EAAAgC,eAAAhC,EAAA8E,iBACA9E,GAAA6C,KAAAsB,EAAAnE,EAAAG,eAAAH,EAAAK,MAAAqE,EAAAF,GACAxE,EAAA6C,KAAAzC,OAAAJ,EAAA+E,WACA,UAAA/E,EAAAgF,oBACAH,EAAA7E,EAAAK,MAAAL,EAAA6C,KAAAxC,MAAAqE,EACa,WAAA1E,EAAAgF,sBACbH,EAAA7E,EAAAK,MAAA,EAAAL,EAAA6C,KAAAxC,MAAA,GAEA,QAAAL,EAAAiF,kBACAL,EAAAH,EAAAzE,EAAA6C,KAAAzC,OACa,WAAAJ,EAAAiF,oBACbL,EAAA5E,EAAAI,OAAAuE,EAAA3E,EAAA6C,KAAAzC,QAEAJ,EAAA6C,KAAA3E,EAAA8B,EAAA9B,EAAA2G,EACA7E,EAAA6C,KAAAvE,EAAA0B,EAAA1B,EAAAsG,EACAhC,EAAA5C,EAAA6C,KAAAyB,MAAAtE,EAAA6C,KAAA3E,EAAA8B,EAAA6C,KAAAvE,GAEA,QAAA4G,KAMA,IALA,GAIAC,GAJA/G,EAAA,EACAnI,EAAA3B,EAAA8Q,mBACAlH,EAAA,EACAxI,EAAA0J,KAAAiG,IAAA/Q,EAAAgR,aAAArP,EAAAqH,QAEAY,EAAAxI,GACAyP,EAAAlP,EAAA3B,EAAAiR,OAAAC,QAAAtH,IACAE,IAAA9J,EAAAmR,MAAAD,QAAAtH,IAAAiH,EAAA9E,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,MACA5C,GAAA,CAEA,OAAAE,GAvTA,GAAAuH,MACAC,EAAA,EACAC,EAAA,IACAC,KACAC,KACAC,IACA1R,GAAAqL,kBAwUArL,EAAAwL,KAAA,SAAAmG,GAwFA,QAAAC,GAAAlG,IACA1L,EAAAgC,WAAA6P,sBAAA7R,EAAA8R,UACApG,EAAAqG,oBAAArG,EAAAsG,sBAAAhS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAAqG,oBAAArG,EAAAyG,qBAAAnS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAA0G,uBAAA1G,EAAAyG,qBAAAnS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAA0G,uBAAA1G,EAAAsG,uBACA,SAAAhS,EAAAgC,WAAAqQ,yBAAArS,EAAA8R,UACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,OAIA,QAAAI,GAAA5G,EAAA6G,EAAAC,EAAAC,GACAA,MAA8C7I,EAAA,EAAAI,EAAA,GAC9C0B,EAAAgH,gBAAA,IACAhH,EAAAiH,aACA3S,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,KACA5J,EAAA4S,WAAAlH,EAAAqC,SAAA,EAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,SAAA,EAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,IACA,IAAA8B,EAAAqC,UACArC,EAAAoH,WACAP,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,gBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,SAAA,GAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,SAAA,GAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,mBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,IAAA,IAAA0B,EAAAmH,cACA,IAAA7S,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,YAAA,EAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,iBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,IAAA0B,EAAAmH,cAAAlR,EAAAqH,SACA,IAAAhJ,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,YAAA,GAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,kBACA9G,EAAA8G,EAAA,iBAIA,QAAAO,GAAApS,EAAAqS,EAAAjF,GACA,gBAAAkF,EAAAC,EAAAC,GACA,GACAC,GACA1H,EAcApF,EAhBA+M,EAAAJ,EAAArM,OAAA,OAGAkM,EAAA,aAAApQ,KAAA2Q,GACAC,EAAA,aAAA5Q,KAAA2Q,GACAV,EAAA,kBAAAU,EACAE,EAAA,qBAAAF,EACAG,EAAAxT,EAAA4S,WAAAI,KAAA,IAAAhT,EAAA4S,WAAAI,GAAAnO,QAAAsO,GACAM,EAAAzT,EAAA0T,OAAA3F,WAAAiF,GAAAhT,EAAA0T,OAAAb,cAAAM,EACAQ,EAAA3T,EAAA4T,WAAA7F,WAAAiF,GAAAhT,EAAA4T,WAAAf,cAAAK,EACAW,EAAAlT,IAAAsS,EAAArS,UAAAkB,GACAgS,EAAA,gBAAAD,IAAA,OAAAA,OAAA/R,KAAA+R,EACAE,IAAA/T,EAAAiR,OAAA+C,KAAAhU,EAAA4T,WAAA7F,YAAAiF,GACAhT,EAAAiR,OAAAC,QAAAlR,EAAA4T,WAAAf,eAAAK,IACA,IAAAC,IAAA,IAAAH,KACAL,EAAA,gDAEAsB,EAAAjU,EAAAkU,WAAAjB,EAAAhK,MAAA,UACAkL,EAAA,EACAC,EAAA,EACAhD,EAAApR,EAAAmR,MAAAD,QAAAgC,IAAAD,EAAAlH,MACAsI,GACArE,MAAA6D,EACAS,IAAA3T,EACAsS,SA2EA,IAzEA,kBAAAI,IACAjC,EAAAtH,EAAAF,OAGA9H,KAAAsP,IACAA,EAAApR,EAAA4G,MAAAwK,WAEAA,GAAApR,EAAAwM,MACA5C,EAAAwH,EAAApR,EAAA4G,MAAA2N,gBAAA,IACA3K,GAAAwH,EAAApR,EAAA4G,MAAA2N,iBAEAZ,GAAA,eAAAN,IACAA,EAAA,eAEA,IAAArT,EAAAwU,YAAA3P,QAAAkJ,IAAA+E,GACA9S,EAAAwU,YAAA1M,KAAAiG,GAEAzH,EAAAtG,EAAA2G,cAAA,kBAAA0N,GACAzJ,EAAAhB,EACAiB,EAAAb,EACA,eAAAqJ,GACAzI,EAAA,EACAC,EAAA,GACqB8H,EACrB/H,EAAA,EACqBkI,IACrBjI,EAAA,GAEAa,GACAzC,KAAA6K,EAAA,uBAAAb,EAAAhK,KACArC,MAAAyM,EACA1Q,SAAA,uBACAiH,EAAAgB,EACAZ,EAAAa,EACA6F,oBAAA1Q,EAAA4G,MAAAyM,EAAA,uBACA1C,kBAAA3Q,EAAA4G,MAAAyM,EAAA,qBACAoB,UAAAzU,EAAAwK,gBAAAK,EACA6J,WAAA1U,EAAAuK,iBAAAK,EACA+J,UAAA3U,EAAA4U,UAAAD,UACAE,WAAA7U,EAAA4U,UAAAC,WACAlB,UAAAI,EACAN,UACAD,WACAzH,MAAAqF,EACAtF,OAAAgJ,GACAC,YAAA3D,EACA4D,aAAAF,GACArS,WAAAzC,EAAA4C,KAAAH,WACAwS,aAAAjV,EAAA4C,KAAAH,WACAuC,KAAArE,EACA2S,WACAR,WACAS,iBACA2B,kBAAAjC,EAAAiC,gBACAvC,cACAwC,UACAlC,SACAJ,YAAAM,EACApF,SAAAiF,EACAoC,gBAAAlC,EACAmC,aAAAtH,EACA+F,SACAwB,UAAAxB,IAAAR,IAAAR,EACAyC,QAAAvV,EAAAgC,WAAApB,MAAA,IAAAmN,EAAA,IAAAmF,EACAsC,WAAAxV,EAAA4C,KACAsG,UAAA,GACA6K,eACA/D,MAAA8C,IAAAH,EAAAM,EAAAwC,OAAAxC,EAAArS,KAAAiT,GAEAQ,EAAA3I,OACAA,EAAAgK,WAAAhK,EAAAoH,SAAA9S,EAAAmR,MAAA6C,MAAA,GAAA2B,EACAjK,EAAAkK,UAAAlK,EAAAoH,SAAA9S,EAAAmR,MAAAD,QAAA2E,WAAA7V,EAAAmR,MAAAD,QAAAgC,GACAlT,EAAA8V,aAAAC,QAAArK,IACA1L,EAAA2G,cAAA,mBAAA0N,GAAA,CA+CA,GA9CArU,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,mBACArT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyM,EAAA,eACArT,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAyM,EAAA,eACAI,IACAzT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,wBACArT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyM,EAAA,qBAEAG,IACAxT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,2BACArT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyM,EAAA,wBAEAU,IACA/T,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAmN,EAAA,oBAEA/T,EAAA2G,cAAA,aAAA0N,GACA3I,EAAAoI,SACApI,EAAAI,SAAA6J,IACAjK,EAAAI,OAAA6J,GAAA3V,EAAA4G,MAAAqP,wBACAC,GAAA,GAEAxK,EAAAK,MAAA/L,EAAAmR,MAAAD,QAAAgC,IAAAlT,EAAA4G,MAAAuP,wBAEAhB,IAAAzJ,EAAAiH,cACAjH,EAAAI,OAAA9L,EAAAmR,MAAA6C,KAAAjG,IAAA/N,EAAA4G,MAAAkO,YAEApJ,EAAAoI,SACA1F,EAAAxD,EAAAC,EAAAa,EAAAK,MAAAL,EAAAI,QACAuC,EAAAzD,EAAAC,EAAAa,EAAAK,MAAAL,EAAAI,SAEA9L,EAAAyK,IAAA2L,OACApI,EAAAtC,EAAA9B,EAAA8B,EAAA1B,EAAA0B,EAAAK,MAAAL,EAAAI,OAAA,GACA9L,EAAAyK,IAAAsE,OACA/O,EAAA2G,cAAA,kBAAA0N,GACA3I,EAAAI,SAAAgJ,IAAAK,IAAAzJ,EAAAiH,cACA3S,EAAAmR,MAAA6C,KAAAlB,GAAA,EAAA/E,GAAArC,EAAAI,OACAoK,GAAA,GAEAxK,EAAAK,QAAAqF,IACApR,EAAAmR,MAAAD,QAAAgC,GAAAxH,EAAAK,MACAmK,GAAA,GAEAvD,GAAA3S,EAAAgC,WAAAqU,OACArW,EAAA2G,cAAA,kBAAA0N,KACAD,EAAA9G,EAAA5B,EAAA1L,EAAA4G,MAAAyM,EAAA,eAAAxI,EAAA,KAGA7K,EAAAgC,WAAAsU,gBAAA3D,IACAA,EACA,GAAAjH,EAAAoI,SAAA9T,EAAA2G,cAAA,uBAAA0N,GAAA,CACA,IAAArU,EAAAuW,WAAA7K,EAAA6J,QAAA,CAUA,GANAnC,EAAApT,EAAAoT,mBACAA,EAAAxS,KAAAZ,EAAAgC,WAAAwU,eAAA9K,EAAA6J,WAAAzT,GACAsR,EAAAhR,WAAA,EACAgR,EAAA3Q,WAAAiJ,EACA0H,EAAApO,KAAA6O,EACAQ,EAAAjB,qBACApT,EAAA2G,cAAA,uBAAA0N,GAAqF,MACrFrU,GAAAuW,WAAA7K,EAAA6J,QAAAvV,EAAAmD,WAAAiQ,GACApT,EAAAmR,MAAA6C,KAAAjG,GACA/N,EAAAmR,MAAA6C,KAAAjG,IAAA/N,EAAA4G,MAAA6P,eACAP,GAAA,EAEAxK,EAAAgL,KAAA1W,EAAAuW,WAAA7K,EAAA6J,QACA7J,EAAAgL,KAAAjU,WAAAiJ,EACAA,EAAAgL,KAAAC,SAAA,EACAjL,EAAAgL,KAAAlL,OACAxL,EAAA2G,cAAA,iBAAA0N,OACyB3I,GAAAoI,SACzB9T,EAAAuW,WAAA7K,EAAA6J,UACAvV,EAAAuW,WAAA7K,EAAA6J,QAAA9S,WAAAuS,aAAA,GAEAlC,GAAA9S,EAAA4W,UAAA3D,EAAArS,OACAZ,EAAA2G,cAAA,qBAAA0N,KACAF,EAAA9H,EAAAzB,EAAA5K,EAAA4G,MAAAyM,EAAA,oBAGArT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,SACAI,IACAzT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,eAEAG,IACAxT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAyM,EAAA,kBAEAU,IACA/T,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAmN,EAAA,UAEA/T,EAAAyK,IAAAoM,KAAA7W,EAAA4G,MAAAyM,EAAA,cAAArT,EAAAwM,MAAA,MAAAxM,EAAA4G,MAAAyM,EAAA,YACA3H,EAAA+E,WAAAzQ,EAAA4G,MAAAyM,EAAA,cAAArT,EAAAwM,MACAd,EAAAgC,eAAA0G,EACA1I,EAAA8E,kBAAA2D,EACA7N,MAAAxE,KAAAwE,IAAA2N,EACAA,EAAAI,GAAA,OACAvS,KAAAwE,GAAA2N,IACA3N,EAAA,GACAwQ,QAAAC,KAAA,mCACA9D,EAAAhK,KAAA,wBAEAyC,EAAAG,oBAAA/J,KAAAwE,GAAA,OAAAA,IAAA,IAAA0Q,WACAhX,EAAAiX,mBAAAnV,KAAA9B,EAAAiX,cAAA3Q,IAAAwM,IACApH,EAAAG,eAAA7L,EAAAgC,WAAAkV,iBAAA5Q,GAEAtG,EAAA2G,cAAA,aAAA0N,KACA3I,EAAAxC,WAAA,SAAA+J,EAAAhK,KACAwC,EAAAC,GAEAuE,EAAAvE,IAgBA,OAXAiI,KACAwD,EAAAzL,GAEA4G,EAAA5G,EAAA0L,EAAA,aAEAxF,EAAAlG,GACA1L,EAAAqX,iBACA/E,EAAA5G,EAAA4L,EAAA,OAAAtX,EAAAuX,YAEAvX,EAAAyK,IAAA+M,UACA5N,GAAA8B,EAAAK,OAAA0L,EAAA,EAAAzX,EAAA4G,MAAA2N,iBACA7I,EAAAK,QAGA,QAAA2L,GAAAC,EAAAC,EAAA5E,GACA,GAAA6E,GAAAvX,CACAN,GAAAgC,WAAA8V,iBACAlO,EAAA,EACAtJ,EAAAsX,EAAA,EACAG,GAAqCA,cAAAzX,GACrCuX,GACAjX,KAAA,gBACAmL,MAAA/L,EAAAmR,MAAAD,SAAA,IAAAlR,EAAA4G,MAAAoR,mBACApR,MAAA,gBACAqC,KAAA,SACAjE,KAAA1E,EACAsX,OAAA,GAEAzC,EAAAnV,EAAA8N,aAAA8J,GACA7E,EAAAgF,EAAAH,EAAA5E,GAAA6E,GAAA,OAoFA,QAAAI,GAAA3N,EAAA3J,GACA,GAAAL,GAAA4X,EAAAC,EAAArX,EAAAsX,EAAAzW,EAAAqH,MACA,IAAAgB,EAAA,EAAA8K,GAAA/K,EACA,QAOA,IALAsO,EAAArT,EAAAsF,GACA6K,EAAAnV,EAAA8N,aAAAxD,GACA6N,GAAAnY,EAAAmR,MAAA6C,KAAA1J,IAAAtK,EAAA4G,MAAAkO,YAAA9U,EAAAwM,MACA0L,GAAA/C,EAAAnV,EAAAmR,MAAAmH,MAAAhO,GAAA,GAAAtK,EAAAwM,MACAmJ,EAAAwC,EAAAD,EACAlO,GAAA2L,EACA,QAUA,KARA3V,EAAAgC,WAAA8V,iBACAlO,GAAAoO,IAEAlD,GAAAa,EACA3V,EAAAgC,WAAAuW,uBACA3O,GAAA4O,GAGA1X,EAAAd,EAAAyY,gBAAAzY,EAAAgR,aAAoElQ,EAAAsX,EAAOtX,GAAA,EAG3E,GAFAR,EAAAN,EAAAiR,OAAAC,QAAApQ,IACA8I,GAAAmJ,EAAAsF,EAAA/N,EAAA3J,GAAAgB,EAAArB,KAAAQ,IACAd,EAAA+L,MAAA,CACA/L,EAAA0Y,iBAAA5X,EACAd,EAAA2Y,iBAAA/O,CACA,OAQA,IAJAA,EAAA,EACA5J,EAAAgC,WAAA8V,iBACAlO,GAAAoO,IAEAlX,EAAA,EAA2BA,EAAAd,EAAAgR,eAC3B1Q,EAAAN,EAAAiR,OAAAC,QAAApQ,MACA8I,GAAAmJ,EAAAsF,EAAA/N,EAAA3J,GAAAgB,EAAArB,KAAAQ,IACAd,EAAA+L,QAHkDjL,GAAA,GA8ClD,MAvCAd,GAAA6O,sBAAAjF,EAEAkL,GAAAa,EACA/L,GAAA5J,EAAA4U,UAAAC,WAAA7U,EAAA4Y,gBAAA5Y,EAAA4G,MAAA2N,gBAEAsE,EAAA7Y,EAAAuW,WAAAjM,GACAA,IAAAtF,EAAAgE,QAAAmM,GACA0D,EAAAlC,SAAA,EACAkC,EAAApW,YACAgS,UAAAzK,EAAAmO,EAAAnY,EAAAwK,gBACAkK,WAAAsD,GAAA,EAAAhY,EAAAuK,iBACAyK,aAAAkD,EACAnD,YAAA/U,EAAA+L,MAAAiM,GAAAhY,EAAA4G,MAAAkS,eAAA,EACA7D,aAAAjV,EAAA4C,KAAAH,WACAA,WAAAzC,EAAA4C,KAAAH,WACAmE,MAAA5G,EAAA4G,MACAjE,SAAA,uBACAgS,UAAA3U,EAAA4U,UAAAD,UACAE,WAAA7U,EAAA4U,UAAAC,WACA9G,SAAAzD,GAEAtK,EAAA8V,aAAAC,SACAhI,SAAAzD,EACAuI,YAAA,EACA7I,EAAA6O,EAAApW,WAAAgS,UACA7K,EAAAiP,EAAApW,WAAAiS,WACA5I,OAAA+M,EAAA/M,OACAC,MAAA8M,EAAA9M,MACAnF,MAAA,YACAqC,KAAA4P,EAAApW,WAAAE,WAEAkW,EAAArN,QACiBqN,IACjBA,EAAApW,WAAAuS,aAAA,QACAhV,GAAAmR,MAAAmH,MAAAhO,IAEAyO,EAAAjR,MAAAuQ,EAAA/N,EAAA3J,EAAAqJ,EAAA2L,IACA3V,EAAAgZ,kBAAA1O,GAAAqL,EACA3L,GAAA8K,IAAA2C,EAAA,EAAAzX,EAAA4G,MAAA2N,kBACA,EAviBA,IAAAvU,EAAA2G,cAAA,mBACA3G,EAAAwC,aAAAxC,EAAA8L,QAAA9L,EAAA+L,OAAA,CAGA,GAAA/L,EAAAwC,aAAAmP,EAEA,WADAlL,uBAAAzG,EAAAwV,WAAAhK,KAGA,SAAAxL,EAAA4C,KAAA+T,QAAA,CAIA,GAAAT,GAAA6B,EAAArW,EAAAkJ,EAAAC,EAAAgO,EAAA1D,EACAQ,EAAAE,EAAA7L,EAAAJ,EAAAlJ,EAAAqJ,EAAAD,EAAAnI,EAAA2I,EAAA+N,EAAAlB,EACAnS,EAAAhF,EAAAgF,SACAyS,EAAA,aAAAzX,EAAA4G,MAAAqS,mBACA7B,KACAE,KACArF,KACA8G,KACAP,EAAA5H,IACArQ,EAAAyE,EAAAgE,OACAkQ,EAAAlZ,EAAAmZ,gBACAC,GAAApZ,EAAAqZ,4BACArB,GAAAhY,EAAAsZ,wBACAxE,GAAA9U,EAAA4G,MAAAkO,UACAxD,IAAA,EACA5P,EAAA6X,YAAAC,MACAxZ,EAAAgZ,qBAEAhU,EAAAgE,OAAAhJ,EAAAiR,OAAA+C,KAAAhL,QACAhJ,EAAAyZ,kBA62BAzZ,EAAAyK,IAAA2L,OAnWA,WACApW,EAAAwU,eACA7S,EAAA3B,EAAA8Q,mBACA9Q,EAAA8V,gBACA9V,EAAAwK,gBAAAxK,EAAAwC,YAAAxC,EAAAyC,WAAAgS,UAAA,EACAzU,EAAAuK,iBAAAvK,EAAAwC,YAAAxC,EAAAyC,WAAAiS,WAAA,EACA3K,EAAA/J,EAAA8L,OACAhC,EAAA9J,EAAA+L,SAEA,WACAiC,EAAA,IAAAlE,EAAAC,EAAA,GACA/J,EAAAyK,IAAAsE,OACA/O,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA8S,oBACAtL,EAAA,IAAAtE,EAAAC,MAEA,WACA,GAAA3I,GAAAuY,EAAA7O,KAAAiG,IAAA/L,EAAAgE,OAAAhJ,EAAA4Z,UAGA,KAFAhQ,GAAA5J,EAAA4U,UAAAC,WAAA7U,EAAA4Y,gBAAA5Y,EAAA4G,MAAA2N,gBACAvK,EAAAoP,GACA9O,EAAA,EAA2BA,EAAAqP,IAC3BvY,EAAApB,EAAAiR,OAAA+C,KAAA1J,GACA2N,EAAA7W,EAAAkJ,IAFmCA,GAAA,GAMnCtK,EAAAgC,WAAA6X,oBAGA7P,GAAAhK,EAAA4G,MAAAkT,wBAAA9Z,EAAA4G,MAAAmT,kBAAA,aAEA/Z,EAAA8O,mBAAA9E,KAEA,WACAhK,EAAAyK,IAAA2L,OACApW,EAAA4Z,UAAA,IACA5L,EAAA,EAAAhO,EAAA8O,mBAAA9O,EAAA+L,MAAA/L,EAAA8L,OAAA9L,EAAA8O,mBAAA,GACA9O,EAAAyK,IAAAsE,OAEA,IAAAjO,GAAAM,EAAAd,EAAA8X,EAAAzW,EAAAqH,MAKA,KAJAY,GAAA5J,EAAA4U,UAAAC,WAAA7U,EAAA4Y,gBAAA5Y,EAAA4G,MAAA2N,gBACAvU,EAAAgC,WAAAgY,YACAhQ,IAAAhK,EAAA4U,UAAAD,UAAA3U,EAAAia,eAAAja,EAAA4G,MAAA2N,iBAEAjK,EAAAtK,EAAA4Z,UAAA5Z,EAAAka,eAA8D5P,EAAA/J,EAAO+J,GAAA,EAErE,GADAlJ,EAAApB,EAAAiR,OAAA+C,KAAA1J,IACA2N,EAAA7W,EAAAkJ,GAAA,CACAtK,EAAAma,kBAAA7P,EACAtK,EAAAoa,kBAAApQ,CACA,OAGA,GAAAhK,EAAAgC,WAAAqY,WAAA,CAMA,IALAra,EAAAgC,WAAA8V,iBACAlO,GAAAoO,IAEArC,EAAAb,GAAA9U,EAAA4G,MAAAkO,WACAK,GAAA,EACArU,EAAAd,EAAAyY,gBAAkD3X,EAAAsX,IAClD9X,EAAAN,EAAAiR,OAAAC,QAAApQ,MACA8I,GAAAmJ,EAAA/S,EAAAsa,OAAAtV,EAAAgE,OAAAhE,EAAAgE,QAAArH,EAAArB,KAAAQ,IACAd,EAAA+L,MAAA/L,EAAA4U,UAAAC,aAHyD/T,GAAA,GAOzDiY,EAAAjR,MAAA9H,EAAAsa,OAAAtV,EAAAgE,OAAAhE,EAAAgE,OAAAgB,EAAA2L,IAEA3V,EAAAyK,IAAA+M,aAmHA,WACA,GAAAL,EAAA,CACAnX,EAAAyK,IAAA2L,MACA,IAAAmE,GAAAva,EAAA4T,WAAAf,YAAA,EAAA7S,EAAAgR,cAAAhR,EAAA4T,WAAA7F,SAAA,EAAA/N,EAAA4Z,SAKA5L,GAJAuM,EAAAva,EAAA6O,sBAAA,EACA0L,EAAAva,EAAA8O,mBAAA,EACAyL,EAAAva,EAAA+L,MAAA/L,EAAA6O,sBAAA7O,EAAA+L,MACAwO,EAAAva,EAAA8L,OAAA9L,EAAA8O,mBAAA9O,EAAA8L,OACA,GACA9L,EAAAyK,IAAAsE,OACA,QAAA/O,EAAAgC,WAAAwY,cACAxa,EAAA4T,YAAA5T,EAAA4T,WAAA7F,WAAAoJ,EAAApJ,WACA/N,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAA6T,6BACAza,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA8T,6BACArM,EAAA,EAAA8I,EAAAnN,EAAAhK,EAAA2a,iBAAA3C,GAAAhY,EAAAgZ,kBAAA7B,EAAApJ,aAGA/N,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAA6T,6BACAza,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA8T,6BACArM,EAAA8I,EAAAvN,EAAAuN,EAAAnN,EAAAmN,EAAApL,MAAAoL,EAAArL,SAEA9L,EAAAyK,IAAA+M,cA9WA,WAEA,QAAAoD,GAAAC,EAAAC,GAEA,IADAA,EAAAhQ,KAAAiG,IAAA+J,EAAA1C,GACAtX,EAAA+Z,EAAmC/Z,EAAAga,IACnCxa,EAAAN,EAAAiR,OAAAC,QAAApQ,GACAmS,EAAAtR,EAAArB,GACAK,GACA8U,MAAAxC,EAAAwC,MACA7U,KAAAqS,EAAArS,KACAmL,MAAAkH,EAAAlH,OAAA/L,EAAA4G,MAAAwK,UACAxK,MAAA,mBACAqC,KAAA,SACA2O,MAAA9W,EACAia,MAAAza,GAEA0a,GAA4CA,iBAAA/H,EAAAwC,OAAAxC,EAAArS,SAC5CgJ,GAAAmJ,EAAAiI,GAAA,MAAAra,EAAAL,EAAAQ,IACAd,EAAA+L,MAAA/L,EAAA4U,UAAAC,aAd4C/T,GAAA,IAH5C,GAAAH,GAAAL,EAAAQ,EAAAka,EAAA/H,EAAAgI,EAAA7C,EAAAzW,EAAAqH,MAsBA+P,GAAA3V,QAAA,SAAA8X,EAAAC,GACAnR,EAAAkR,EAAA,GACApG,GAAAoG,EAAA,GACAC,IAAAnb,EAAA4Z,YACA5Z,EAAAyK,IAAA2L,OACApI,EAAA,EAAAhO,EAAA8O,mBAAA9O,EAAA+L,MAAA/L,EAAA8L,OAAA9L,EAAA8O,mBAAA,GACA9O,EAAAyK,IAAAsE,QAEA2I,EAAAwD,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEAlb,EAAAyK,IAAA+M,UACAxX,EAAAgC,WAAAoZ,oBACAxR,GAAA5J,EAAA4U,UAAAC,WAAA7U,EAAA4Y,gBAAA5Y,EAAA4G,MAAAyU,4BACArb,EAAAgC,WAAA8V,iBACAlO,GAAAoO,IAEAhY,EAAAgC,WAAAuW,uBACA3O,GAAA4O,GAEAxO,EAAA,EAEA8K,GAAA9U,EAAAqZ,4BACAuB,EAAA5a,EAAAyY,gBAAAzY,EAAAgR,aAAAoH,GACA6C,EAAArR,EACAA,EAAA5J,EAAA4G,MAAAyU,4BACArb,EAAAgC,WAAA8V,iBACAlO,GAAAoO,IAEA4C,EAAA,EAAA5a,EAAAgR,cAEApH,EAAAqR,EACArR,EAAAE,IACApJ,GACAE,KAAA,GACAmL,MAAA/L,EAAA4G,MAAAkS,eACAlS,MAAA,gBACA0U,cAAA,EACApG,iBAAA,EACAjM,KAAA,SACA2O,MAAAjW,EAAAqH,QAEA+J,GAAkCwI,OAAA,KAAW,MAAA7a,GAAA,OAG7CV,EAAAgC,WAAA8V,iBACAjC,GAAsCA,WAAA,IACtCjM,EAAA,EACAlJ,GACAE,KAAA,aACAmL,MAAA/L,EAAA4G,MAAAoR,mBACApR,MAAA,aACAqC,KAAA,SACA2O,OAAA,GAEA7E,EAAA8C,GAAA,MAAAnV,GAAA,WAmSA,WACA,GAAA8a,GAAAxb,EAAA8O,mBAAA9O,EAAA4G,MAAAmT,kBACA0B,EAAAzb,EAAA6O,sBAAA7O,EAAA4G,MAAAkT,wBACA4B,EAAA1b,EAAAmZ,aAAA,sBAAAnZ,EAAAmZ,YAAAvS,MACA+U,EAAA3b,EAAAmZ,aAAA,yBAAAnZ,EAAAmZ,YAAAvS,KACA5G,GAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAkT,wBACA9Z,EAAAgC,WAAAuW,uBACAvY,EAAAyK,IAAAwC,UAAA0O,EAAA3b,EAAA4G,MAAAgV,uBAAA5b,EAAA4G,MAAAiV,kBACA7b,EAAAyK,IAAAQ,YAAA0Q,EAAA3b,EAAA4G,MAAAkV,6BAAA9b,EAAA4G,MAAAmV,wBACA3N,EAAAqN,EAAA,EAAAzb,EAAA4G,MAAAmT,kBAAA/Z,EAAA8L,QACAuC,EAAAoN,EAAA,EAAAzb,EAAA4G,MAAAmT,kBAAA/Z,EAAA8L,QACA9L,EAAA8V,aAAAC,SACAnM,EAAA6R,EACAzR,EAAA,EACA8B,OAAA9L,EAAA8L,OACAC,MAAA/L,EAAA4G,MAAAmT,kBAAA/Z,EAAA4G,MAAAkT,wBACAlT,MAAA,0BAGA5G,EAAAgC,WAAA6X,oBACA7Z,EAAAyK,IAAAwC,UAAAyO,EAAA1b,EAAA4G,MAAAgV,uBAAA5b,EAAA4G,MAAAiV,kBACA7b,EAAAyK,IAAAQ,YAAAyQ,EAAA1b,EAAA4G,MAAAkV,6BAAA9b,EAAA4G,MAAAmV,wBACA3N,EAAA,EAAAoN,EAAAxb,EAAA+L,MAAA/L,EAAA4G,MAAAmT,mBACA1L,EAAA,EAAAmN,EAAAxb,EAAA+L,MAAA/L,EAAA4G,MAAAmT,mBACA/Z,EAAA8V,aAAAC,SACAnM,EAAA,EACAI,EAAAwR,EACA1P,OAAA9L,EAAA4G,MAAAmT,kBAAA/Z,EAAA4G,MAAAkT,wBACA/N,MAAA/L,EAAA+L,MACAnF,MAAA,uBAGA5G,EAAAgc,uBACAhc,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAqV,wBACAjc,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAsV,8BACA,yBAAAlc,EAAAmc,UACA/N,EAAApO,EAAAgc,qBAAApS,EAAA,EAAA5J,EAAA4G,MAAAmT,kBAAA/Z,EAAA8L,QACAuC,EAAArO,EAAAgc,qBAAApS,EAAA,EAAA5J,EAAA4G,MAAAmT,kBAAA/Z,EAAA8L,UAEAsC,EAAA,EAAApO,EAAAgc,qBAAAhS,EAAAhK,EAAA+L,MAAA/L,EAAA4G,MAAAmT,mBACA1L,EAAA,EAAArO,EAAAgc,qBAAAhS,EAAAhK,EAAA+L,MAAA/L,EAAA4G,MAAAmT,wBA/GA,WAGA,QAAAqC,GAAA1b,GACAiP,EAAAjP,EAAA,GAAAA,EAAA,IAHAV,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAyV,4BACArc,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA0V,4BAIAlF,EAAA/R,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,SAAA/N,EAAA4Z,WAAAlZ,EAAA,GAAAmS,YAAA7S,EAAAgR,eACiB5N,QAAAgZ,GACjBpc,EAAAyK,IAAA2L,OACAxH,EAAA,GACAwI,EAAA/R,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,UAAA/N,EAAA4Z,WAAAlZ,EAAA,GAAAmS,aAAA7S,EAAAgR,eACiB5N,QAAAgZ,GACjBpc,EAAAyK,IAAA+M,UACAxX,EAAAyK,IAAA2L,OACAxH,EAAA,GACAwI,EAAA/R,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,UAAA/N,EAAA4Z,WAAAlZ,EAAA,GAAAmS,YAAA7S,EAAAgR,eACiB5N,QAAAgZ,GACjBpc,EAAAyK,IAAA+M,UACAxX,EAAAyK,IAAA2L,OACAxH,EAAA,GACAwI,EAAA/R,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,SAAA/N,EAAA4Z,WAAAlZ,EAAA,GAAAmS,aAAA7S,EAAAgR,eACiB5N,QAAAgZ,GACjBpc,EAAAyK,IAAA+M,aAEA,YACAxX,EAAA8R,QAAA9R,EAAAgC,WAAA6P,wBACA7R,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAA2V,2BACAvc,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA4V,2BACAxc,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA6V,qBACAxK,EAAA7O,QAAA,SAAA1C,GACAyO,EAAAzO,EAAA,GAAAA,EAAA,GACA,IAAAgc,GAAA1c,EAAAgC,WAAA2a,sBAAA,EACAC,EAAAlc,EAAA,GAAAkJ,GAAA,OAAAlJ,EAAA,WAAAA,EAAA,KAAAA,EAAA,GAAAqL,OAAA2Q,EACAG,EAAAnc,EAAA,GAAAsJ,GAAA,OAAAtJ,EAAA,WAAAA,EAAA,GAAAA,EAAA,GAAAoL,OAAA,GAAA4Q,CACA1c,GAAA8V,aAAAC,SACAnM,EAAAgT,EACA5S,EAAA6S,EACA/Q,OAAA9L,EAAA4G,MAAA0I,oBAAAoN,EACA3Q,MAAA/L,EAAA4G,MAAA0I,oBAAAoN,EACA9V,MAAA,oBAAAlG,EAAA,WAlGA,WACA,GAAAV,EAAA8c,cAAA,CACA,GAAA5O,IACApC,OAAA9L,EAAA8c,cAAAhR,OACAC,MAAA/L,EAAA8c,cAAA/Q,MACAnC,EAAA5J,EAAA8c,cAAAlT,EAAA5J,EAAA8c,cAAAC,WAAAnT,EACAI,EAAAhK,EAAA8c,cAAA9S,EAAAhK,EAAA8c,cAAAC,WAAA/S,GAEAvJ,GACAsL,MAAAjC,EACAgC,OAAA/B,EACAH,EAAA,EACAI,EAAA,EAEAhK,GAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAoW,6BACAhd,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAqW,yBACAjd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAsW,yBACA,gBAAAld,EAAAmc,UACAjO,EAAAnC,MAAAjC,EACAoE,EAAAtE,EAAA,EACAnJ,EAAAsL,MAAAjC,EACArJ,EAAAqL,OAAA9L,EAAAmZ,YAAArN,OACArL,EAAAuJ,EAAAhK,EAAAmZ,YAAAnP,EACAoE,EAAAF,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACAuC,EAAAH,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACA9L,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAuW,8BACAnd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAwW,8BACApd,EAAAmZ,YAAApL,WAAA/N,EAAA8c,cAAA/O,UACA/N,EAAAmZ,YAAApL,UAAA,GACA/N,EAAAmZ,YAAApL,SAAAxN,GACAoP,EAAAlP,EAAAT,EAAAqd,cAAAhI,aAAArV,EAAA8c,cAAAzH,aAAA,UAEiB,mBAAArV,EAAAmc,UAAAnc,EAAA8c,gBACjB5O,EAAApC,OAAA/B,EACAmE,EAAAlE,EAAA,EACAvJ,EAAAqL,OAAA/B,EACAtJ,EAAAsL,MAAA/L,EAAAmZ,YAAApN,MACAtL,EAAAuJ,EAAA,EACAvJ,EAAAmJ,EAAA5J,EAAAmZ,YAAAvP,EACAwE,EAAAF,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACAuC,EAAAH,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACA9L,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAuW,8BACAnd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAwW,8BACApd,EAAAmZ,YAAAtG,cAAA7S,EAAA8c,cAAAjK,aACA7S,EAAAmZ,YAAAtG,aAAA,GACA7S,EAAAmZ,YAAAtG,YAAAlR,EAAAqH,QACA2G,EAAAlP,EAAAT,EAAAqd,cAAAjI,gBAAApV,EAAA8c,cAAA1H,gBAAA,cAxDA,WACApV,EAAAqX,kBACArX,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAA0W,uBACAtd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA2W,uBACAvd,EAAAyK,IAAA+S,YAAAxd,EAAA4G,MAAA6W,2BACAnG,EAAAlU,QAAA,SAAA1C,GACAiP,EAAAjP,EAAA,GAAAA,EAAA,MAEAV,EAAAyK,IAAA+S,oBAplBA,WACA,GAAAE,GACAC,EAAA3d,EAAA4U,UAAAgJ,SACAnd,EAAA,EAAAT,EAAA4G,MAAAiX,kBACA7d,GAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAkX,qBACA9d,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAmX,qBACAJ,EAAAK,cAAApU,EAAAoO,GAAAhY,EAAA4G,MAAAiX,oBACAF,EAAAM,cAAAlS,MAAA/L,EAAA4U,UAAAsJ,iBACAle,EAAA4U,UAAAC,WAAA7U,EAAA4U,UAAAuJ,aACAR,EAAAS,YAAApU,EAAAoP,GAAApZ,EAAA4G,MAAAiX,oBACAF,EAAAU,YAAAvS,OAAA9L,EAAA4U,UAAA0J,kBACAte,EAAA4U,UAAAD,UAAA3U,EAAA4U,UAAA2J,cACAve,EAAA4U,UAAA4J,uBACAxe,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA6X,yBACArQ,EAAAuP,EAAAM,cAAArU,EAAA+T,EAAAM,cAAAjU,EAAA2T,EAAAM,cAAAlS,MAAAtL,EAAAkd,EAAAM,cAAAnS,QACAuC,EAAAsP,EAAAM,cAAArU,EAAA+T,EAAAM,cAAAjU,EAAA2T,EAAAM,cAAAlS,MAAAtL,EAAAkd,EAAAM,cAAAnS,QACA9L,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA8X,kBACA,aAAAhc,KAAAwW,EAAA/W,WACAnC,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA+X,sBAEA3Q,EAAA2P,EAAAK,cAAApU,EAAA+T,EAAAK,cAAAhU,EACA2T,EAAAK,cAAAjS,MAAA4R,EAAAK,cAAAlS,OAAA9L,EAAA4G,MAAAgY,0BACA5e,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAqQ,GAAA,EACA1d,EAAA8V,aAAAC,QAAA4H,EAAAM,eACAje,EAAA8V,aAAAC,QAAA4H,EAAAK,gBAEAhe,EAAA4U,UAAAiK,qBACA7e,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA6X,yBACArQ,EAAAuP,EAAAU,YAAAzU,EAAA+T,EAAAU,YAAArU,EAAA2T,EAAAU,YAAAtS,MAAA4R,EAAAU,YAAAvS,OAAArL,GACA4N,EAAAsP,EAAAU,YAAAzU,EAAA+T,EAAAU,YAAArU,EAAA2T,EAAAU,YAAAtS,MAAA4R,EAAAU,YAAAvS,OAAArL,GACAT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA8X,kBACA,WAAAhc,KAAAwW,EAAA/W,WACAnC,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA+X,sBAEA3Q,EAAA2P,EAAAS,YAAAxU,EAAA+T,EAAAS,YAAApU,EAAA2T,EAAAS,YAAArS,MACA4R,EAAAS,YAAAtS,OAAA9L,EAAA4G,MAAAgY,0BACA5e,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAqQ,GAAA,EACA1d,EAAA8V,aAAAC,QAAA4H,EAAAU,aACAre,EAAA8V,aAAAC,QAAA4H,EAAAS,cAEAV,IAEA1d,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAkY,2BACA9e,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAmY,+BACA/Q,EAAA2P,EAAAqB,OAAApV,EAAA+T,EAAAqB,OAAAhV,EAAA2T,EAAAqB,OAAAjT,MAAA4R,EAAAqB,OAAAlT,OAAA,GACA9L,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACArN,EAAA8V,aAAAC,QAAA4H,EAAAqB,YAq0BA9I,GACAlW,EAAA0G,QAAA,GAjPA,WACA1G,EAAAyK,IAAAuL,UAAAhW,EAAA4G,MAAAqY,gBACAjf,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAsY,gBACA7Q,EAAA,IAAArO,EAAA+L,MAAA/L,EAAA8L,WA8JA,WACA9L,EAAAyK,IAAA2L,MACA,IAAAzV,EAMA,KALAX,EAAAgC,WAAAmd,iBAAAnf,EAAAgC,WAAAod,SACA,IAAA/N,EAAArI,SAAoDqI,EAAA7H,EAAA,EAAA+H,EAAA,MACpDF,EAAAgO,MACAhO,EAAA0E,QAAAwD,YAAAC,MAAA9X,KAEA1B,EAAAgC,WAAAod,MAEA,WADApf,GAAAyK,IAAA+M,SAGAxX,GAAAyK,IAAAoM,KAAA,kBACAlW,KACAA,EAAA2e,MAAAjO,EAAAkO,OAAA,SAAA1H,EAAA3J,GACA,MAAA2J,GAAA3J,GACiB,GAAApD,KAAAiG,IAAAO,EAAAD,EAAArI,SAAAwW,QAAA,GACjB7e,EAAA8e,WAAA1e,OAAA4D,KAAA3E,EAAAqL,gBAAArC,OACArI,EAAAmc,cAAA,OAAA9c,EAAA8c,gBAAkEjK,YAAA,IAAeA,YAAA,SAAA7S,EAAA8c,gBAAkD/O,SAAA,IAAYA,SAC/IpN,EAAA0c,cAAA,OAAArd,EAAAqd,gBAAkExK,YAAA,IAAeA,YAAA,SAAA7S,EAAAqd,gBAAkDtP,SAAA,IAAYA,SAC/IpN,EAAA6L,MAAAxM,EAAAwM,MACA7L,EAAA+e,WAAA1f,EAAA0f,WACA/e,EAAAgf,WAAA3f,EAAA2f,WACAhf,EAAAif,eAAA5f,EAAA4f,eACAjf,EAAAkf,YAAA7f,EAAA6f,YACAlf,EAAAmf,QAAA,QAAA9f,EAAA+f,gBAA6D/V,EAAA,IAAKA,EAAA,SAAAhK,EAAAggB,iBAAyChW,EAAA,IAAKA,EAChHrJ,EAAAiU,UAAA5U,EAAA4U,UAAAoC,WACArW,EAAAsf,YAAA,MAAAjgB,EAAAyY,gBAAA,QAAAzY,EAAAka,eACAvZ,EAAAuf,YAAA,MAAAlgB,EAAA4Y,gBAAA,QAAA5Y,EAAAia,eACAtZ,EAAAwf,aAAA,MAAAngB,EAAAuK,iBAAA,QAAAvK,EAAAwK,gBACA7J,EAAAyf,WAAA,MAAApgB,EAAAogB,WAAAxW,EAAA,QAAA5J,EAAAogB,WAAApW,EACArJ,EAAA0f,eAAA,MAAArgB,EAAAqgB,eAAAzW,EAAA,QAAA5J,EAAAqgB,eAAArW,EACArJ,EAAA2f,gBAAA,MAAAtgB,EAAAsgB,gBAAA1W,EAAA,QAAA5J,EAAAsgB,gBAAAtW,EACArJ,EAAA4f,SAAA,MAAAvgB,EAAAwgB,KAAA,QAAAxgB,EAAAygB,KACA9f,EAAA+f,UAAA,MAAA1gB,EAAA2gB,MAAA,QAAA3gB,EAAA4gB,MACAjgB,EAAAkgB,cAAA7gB,EAAA6gB,cACAlgB,EAAAmgB,oBAAA9gB,EAAA8gB,oBACA9gB,EAAA8gB,oBAAAlX,EAAA,KAAA5J,EAAA8gB,oBAAA9W,EAAA,GACArJ,EAAAogB,KAAA,MAAA/gB,EAAA+L,MAAA,QAAA/L,EAAA8L,OACAnL,EAAAqgB,MAAA,MAAAhhB,EAAAghB,MAAApX,EAAA,QAAA5J,EAAAghB,MAAAhX,EACArJ,EAAAsgB,MAAAjhB,EAAAkhB,WACA,MAAAlhB,EAAAkhB,WAAAtX,EAAA,QAAA5J,EAAAkhB,WAAAlX,EAAA,GACArJ,EAAAid,SAAA5d,EAAA8V,aAAA9M,OACArI,EAAAwgB,SAAAnhB,EAAAmhB,SACAxgB,EAAAwb,SAAAnc,EAAAmc,SACAnc,EAAAmZ,cACAxY,EAAAkS,YAAA7S,EAAAmZ,YAAAtG,YACAlS,EAAAoN,SAAA/N,EAAAmZ,YAAApL,SACApN,EAAAyU,gBAAApV,EAAAmZ,YAAA/D,gBACAzU,EAAA0U,aAAArV,EAAAmZ,YAAA9D,aACA1U,EAAAwB,QAAAnC,EAAAmZ,YAAAhX,QACAxB,EAAAygB,YAAAphB,EAAAmZ,YAAAiI,YACAzgB,EAAAiG,MAAA5G,EAAAmZ,YAAAvS,MACAjG,EAAAsI,KAAAjJ,EAAAmZ,YAAAlQ,MAEAjJ,EAAAyK,IAAA4W,UAAA,QACArhB,EAAAyK,IAAAwC,UAAA,qBACAmB,EAAA,IAAApO,EAAA+L,MAAA/L,EAAA8L,QACA/K,OAAA4D,KAAAhE,GAAAyC,QAAA,SAAAke,EAAA1J,GACA,GAAAnX,GAAA6gB,EAAA,KAAA3gB,EAAA2gB,EAEAthB,GAAAyK,IAAAwC,UAAA,uBACAqB,EAAA7N,EAAAqJ,EAAA,IAAA9J,EAAAgC,WAAAmd,gBAAA,QAFA,GAEAvH,KAEA5X,EAAAyK,IAAA+M,aAzGA,WAUA,QAAA+J,GAAA3gB,EAAAqJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAA0D,GACA,GAAAnC,EACA/B,GAAA2X,EAAAC,EAAAC,EAAAC,EAAA1X,EAAAC,EAAAC,EAAAC,EAAAC,GACArK,EAAAyK,IAAAwC,UAAA7C,EACAgE,EAAA,EAAAsT,EAAAC,EAAA,KAAA5T,EAAA,KACA/N,EAAAyK,IAAAwC,UAAA,UACArB,MAAA9J,KAAAoI,EAAAD,EAAA,GAAAC,GAAAD,EAAA,GACAqE,EAAA1N,EAAA,KAAA2G,MAAAqE,GAAA,EAAAA,GAAA4T,QAAA,MAAAkC,EAAAC,EAAA,MAAA5T,GAhBA,GAAA/N,EAAAgC,WAAAmd,gBAAA,CACA,GAAAqC,GAAA,IACAE,EAAA1hB,EAAA+L,MAAAyV,EAAAxhB,EAAA4G,MAAAkS,eAAA,EAAA9Y,EAAA4G,MAAAmX,qBACA4D,EAAAvI,GACAqI,EAAA,GACA,KAAAhQ,EAAAzI,SAAuDyI,EAAAjI,EAAA,EAAA+H,EAAA,aAAoE,eAC3H,IAAAG,EAAA1I,SAAoD0I,EAAAlI,EAAA,EAAA+H,EAAA,aAAiE,eACrH,IAAAC,EAAAxI,SAA+CwI,EAAAhI,EAAA,EAAA+H,EAAA,MAC/CvR,EAAAyK,IAAAuL,UAAA,GAUAhW,EAAAyK,IAAA4W,UAAA,OACArhB,EAAAyK,IAAAoM,KAAA,iBACA7W,EAAAyK,IAAAwC,UAAA,yBACAmB,EAAAsT,EAAAC,EAAAH,EAAAC,KACA,gBAAAhQ,EAAA,EAAAzR,EAAA4U,UAAA2J,aAAA,gCACA,eAAA9M,EAAA,EAAAzR,EAAA4U,UAAAuJ,YAAA,+BACA,cAAA9M,MAAAvP,GAAA,oCACA,WAAA0P,MAAA1P,GAAA,qCACA,YAAA4P,EAAA,sCACA,YAAAA,EAAA,oBACAtO,QAAA,SAAA9C,EAAAsX,GACAtX,EAAAwH,KAAA8P,GACA2J,EAAArf,MAAA,KAAA5B,KAEAN,EAAAyK,IAAAwC,UAAA,2BACAuE,EAAA6N,MACA7N,EAAAuE,QAAA/V,EAAA8V,aAAA9M,QACAyI,EAAA4N,MACA5N,EAAAsE,SAAA/V,EAAA4U,UAAAD,UAAA3U,EAAA4U,UAAAC,aACAnD,EAAA2N,MACA3N,EAAAqE,SAAA/V,EAAAygB,KAAAzgB,EAAAwgB,WAuFAxgB,EAAA2G,cAAA,iBACA3G,EAAAyK,IAAA+M,eAGCtV,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,ILwrBK,SAAUhC,EAAQD,EAASO,GM/6DjC,GAAAyB,GAAAC,CAEAD,UA2rCCE,MA3rCDD,EAAA,WACA,YACA,iBAAA7B,GACA,GAAA4hB,EACA5hB,GAAA6hB,gBAAA,SAAA7a,GAA6CA,EAAA6a,mBAS7C7hB,EAAAqI,iBAAA,SAAAgM,EAAAyN,GACA9hB,EAAA+hB,OAAA1N,GAAArU,EAAA+hB,OAAA1N,OACArU,EAAA+hB,OAAA1N,GAAA0B,QAAA+L,IAUA9hB,EAAAgiB,oBAAA,SAAA3N,EAAAyN,IACA9hB,EAAA+hB,OAAA1N,QAAAjR,QAAA,SAAA6e,EAAAC,GACAJ,IAAAG,GACAjiB,EAAA+hB,OAAA1N,GAAA8N,OAAAD,EAAA,MAYAliB,EAAA2G,cAAA,SAAA0N,EAAArN,GAIA,QAAAob,KACAC,GAAA,EAJArb,EAAAqN,EAAApL,KAAAoL,EAAArN,MACAqN,IAAApL,MAAAoL,CACA,IAAAgO,EAIA,IAAAriB,EAAA+hB,OAAA1N,GAMA,MALArU,GAAA+hB,OAAA1N,GAAAjR,QAAA,SAAA0e,GACA9a,EAAAyD,IAAAzK,EAAAyK,IACAzD,EAAAob,iBACAN,EAAA5f,MAAAlC,EAAA4C,MAAAoE,MAEAqb,GAEAriB,EAAAsiB,SAAA,WACA,MAAAxX,MAAAiG,IAAA/Q,EAAAgC,WAAAugB,eAAA1e,OAAA2e,kBAAA,IACAxiB,EAAAyK,IAAAgY,8BACAziB,EAAAyK,IAAAiY,2BACA1iB,EAAAyK,IAAAkY,0BACA3iB,EAAAyK,IAAAmY,yBACA5iB,EAAAyK,IAAAoY,wBAAA,KAEA7iB,EAAA0G,OAAA,SAAAoc,EAAAC,GA+DA,QAAAC,KACAhjB,EAAAwC,cAGAygB,GAEAnX,OAAAoX,EAAAC,EAAA,EACApX,MAAAqX,EAAApL,EAAAmL,IAEA,kBAAA/f,QAAA,SAAAigB,IAEA,gBAAAvhB,IAAA+C,QAAA7E,EAAA4G,MAAAyc,IACArjB,EAAAsjB,gBAAAD,GAAAJ,EAAAI,GAAA,KAEArjB,EAAAsjB,gBAAAD,GAAArjB,EAAA4G,MAAAyc,MA5EA,GAAArjB,EAAAkG,OAAA,CACA,GAAA0D,GACArJ,EAgDA0iB,EA/CArX,GACAhC,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,uBAEAxF,GACAwI,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,yBAEA2c,GACA3Z,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,uBAEA4c,GACA5Z,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,yBAEA6c,GACA7Z,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAuH,UAAA,EACAoQ,mBAAA,EACA9c,MAAA,qBAEAnG,EAAA,EAAAT,EAAA4G,MAAAiX,mBACA3P,EAAA,EAAAlO,EAAA4G,MAAAmX,qBACApd,EAAA,GAAAX,EAAA4G,MAAAiX,mBACA8F,EAAA3jB,EAAA4G,MAAAkS,eAAA,EAAA9Y,EAAA4G,MAAAmX,qBACA6F,EAAA5jB,EAAAsiB,WACAuB,EAAA,aAAA7jB,EAAA4G,MAAAqS,mBAAA,IACAkK,EAAAnjB,EAAA4G,MAAA2N,gBAAAsP,EACAC,EAAA9jB,EAAA4G,MAAAyU,4BAAAwI,EACAX,EAAA,EACAE,EAAA,EAEAhK,EAAApZ,EAAAqZ,4BACArB,EAAAhY,EAAAsZ,wBACAyK,EAAA/jB,EAAA4G,MAAAkO,UA4BA,IADA9U,EAAAgkB,YAAApa,MACAmZ,EAGA,IAFA/iB,EAAAgkB,YAAAha,KACAzJ,GAAAP,EAAAgF,UAAAgE,OACAY,EAAA,EAA2BA,EAAArJ,EAAOqJ,GAAA,EAClC5J,EAAAgkB,YAAAha,EAAAJ,GAAAsZ,EACAA,KAAAljB,EAAAmR,MAAA6C,KAAApK,IAAAma,IAAA/jB,EAAAmR,MAAAmH,MAAA1O,IAAA,IAAA5J,EAAAwM,OAEAxM,EAAA4Z,UAAAhQ,EAAA5J,EAAAmR,MAAAmH,MAAA1O,IAAA,IA8HA,OA3HAwZ,GAAApjB,EAAA8Q,mBAAAyO,OAAA,SAAA0E,EAAApT,EAAAgC,GACA,GAAAhC,EAAAqT,OAEA,MADAlkB,GAAAgkB,YAAApa,EAAAiJ,GAAAoR,EACAA,CAEA,IAAAE,GAAAF,GAAAjkB,EAAAmR,MAAAD,QAAA2B,IAAAhC,EAAA9E,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,KAEA,OADAxM,GAAAgkB,YAAApa,EAAAiJ,GAAAsR,EACAA,GACa,MACbnkB,EAAAgC,WAAAqY,aACA6I,GAAAa,EAAAZ,GAGAD,GAAA9J,EACA4J,IACAhjB,EAAAwC,aACAxC,EAAA+L,MAAA/L,EAAAyC,WAAAsS,YACA/U,EAAA8L,OAAA9L,EAAAyC,WAAAuS,cACahV,EAAA8L,SAAA9L,EAAAkG,OAAA8O,cAAAhV,EAAA+L,QAAA/L,EAAAkG,OAAA6O,cACb/U,EAAA8L,OAAA9L,EAAAkG,OAAA8O,aACAhV,EAAA+L,MAAA/L,EAAAkG,OAAA6O,YACA/U,EAAAuK,iBAAAvK,EAAAsC,KAAAiI,kBAAA,EACAvK,EAAAwK,gBAAAxK,EAAAsC,KAAAkI,iBAAA,GAIAxK,EAAA4U,UAAAwP,IAAAhL,EAAA0K,EACA9jB,EAAA4U,UAAAyP,KAAArM,EAEAhY,EAAA4U,UAAA7I,MAAA/L,EAAA+L,MAAAiM,EAAAmL,EACAnjB,EAAA4U,UAAA9I,OAAA9L,EAAA8L,OAAAgY,EAAAX,EAEAnjB,EAAA4U,UAAA4J,qBAAA4E,EAAApjB,EAAA4U,UAAA7I,MACA/L,EAAA4U,UAAAiK,mBAAAqE,EAAAljB,EAAA4U,UAAA9I,OAGAiX,IAAA/iB,EAAA4U,UAAA4J,sBAAAxe,EAAAwC,cACA,SAAAxC,EAAA4G,MAAAkF,SACA9L,EAAA8L,QAAA6X,GAEAT,GAAAS,EACA3jB,EAAA4U,UAAA7I,MAAA/L,EAAA+L,MAAAiM,EAAAmL,EACAH,IACAhjB,EAAA4U,UAAA4J,qBAAA4E,EAAApjB,EAAA4U,UAAA7I,OAEA/L,EAAA4U,UAAAiK,qBAAA7e,EAAAwC,cACA,SAAAxC,EAAA4G,MAAAmF,QACA/L,EAAA+L,OAAA4X,GAGAP,GAAAO,EACAX,IACAhjB,EAAA4U,UAAAiK,mBAAAqE,EAAAljB,EAAA4U,UAAA9I,QAEA9L,EAAA4U,UAAAuJ,YAAAiF,EAAApjB,EAAA4U,UAAA7I,MACAgX,IACA/iB,EAAA4U,UAAA2J,aAAA2E,EAAAljB,EAAA4U,UAAA9I,QAEA9L,EAAA4U,UAAA0P,eAAAtkB,EAAA4U,UAAA7I,QAzFA,MA0FA/L,EAAA4U,UAAAuJ,aAAAne,EAAA4U,UAAA7I,QA1FA,MA2FA/L,EAAA4U,UAAAsJ,eAAAle,EAAA4U,UAAA7I,MACA/L,EAAA4U,UAAA0P,cACAtkB,EAAA4G,MAAAkS,eAAA5K,EAAAvN,EACAX,EAAA4U,UAAA2P,gBAAAvkB,EAAA4U,UAAA9I,OA/FA,KAgGA9L,EAAA4U,UAAA2J,cAAAve,EAAA4U,UAAA9I,OAhGA,KAiGA9L,EAAA4U,UAAA0J,gBAAAte,EAAA4U,UAAA9I,OACA9L,EAAA4U,UAAA2P,eACAvkB,EAAA4G,MAAAkS,eAAA5K,EAAAvN,GAAAyY,EAAA+J,GACAnjB,EAAA4U,UAAAsJ,eAAApT,KAAAX,IAAAnK,EAAA4U,UAAAsJ,eAAAle,EAAA4G,MAAA4d,qBACAxkB,EAAA4U,UAAA0J,gBAAAxT,KAAAX,IAAAnK,EAAA4U,UAAA0J,gBAAAte,EAAA4G,MAAA4d,qBAEApjB,EAAAwI,GAAAoO,EACA5W,EAAA4I,GAAAhK,EAAA8L,OAAA9L,EAAA4G,MAAAkS,eAAAnY,EACAS,EAAA2K,MAAA/L,EAAA+L,MAAA/L,EAAA4G,MAAAkS,eAAAd,EAAArX,EAAAF,EACAW,EAAA0K,OAAA9L,EAAA4G,MAAAkS,eAAA9Y,EAAA4G,MAAAmX,qBAAApd,EAEA6iB,EAAAxZ,EAAA5I,EAAA4I,EAAAhK,EAAA4G,MAAAiX,mBACA2F,EAAAzX,MAAA/L,EAAA4U,UAAAsJ,eACAsF,EAAA1X,OAAA9L,EAAA4G,MAAA6d,kBAEA7Y,EAAAhC,GAAA5J,EAAA+L,MAAA/L,EAAA4G,MAAAkS,eAAA9Y,EAAA4G,MAAAmX,qBAAApd,EACAiL,EAAA5B,GAAAoP,EACAxN,EAAAG,MAAA/L,EAAA4G,MAAAkS,eAAA9Y,EAAA4G,MAAAmX,qBAAApd,EACAiL,EAAAE,OAAA9L,EAAA8L,OAAAsN,EAAApZ,EAAA4G,MAAAkS,eAAAnY,EAAAF,EAEA8iB,EAAA3Z,EAAAgC,EAAAhC,EAAA5J,EAAA4G,MAAAiX,mBACA0F,EAAAxX,MAAA/L,EAAA4G,MAAA6d,kBACAlB,EAAAzX,OAAA9L,EAAA4U,UAAA0J,gBAEAmF,EAAA7Z,EAAAxI,EAAAwI,EAAAxI,EAAA2K,MAAAtL,EACAgjB,EAAAzZ,EAAA4B,EAAA5B,EAAA4B,EAAAE,OAAArL,EACAgjB,EAAA1X,MAAA/L,EAAA4G,MAAAkS,eAAA9Y,EAAA4G,MAAAmX,qBACA0F,EAAA3X,OAAA9L,EAAA4G,MAAAkS,eAAA9Y,EAAA4G,MAAAmX,qBACA/d,EAAA4U,UAAAgJ,UACAK,cAAA7c,EACA4c,cAAAwF,EACAnF,YAAAzS,EACAwS,YAAAmF,EACAvE,OAAAyE,GAEAzjB,EAAA4U,UAAA8P,KACA9Y,IACA7B,EAAA3I,GAEApB,EAAA4U,UAAA+P,KACA/Y,EAAA2X,EACAxZ,EAAAyZ,GAGAxjB,EAAA4kB,KAAA9Z,KAAAX,IAAA,EAAAnK,EAAAwU,YAAAxL,OAAA,EAAAhJ,EAAAgC,WAAA6iB,mBAEA7kB,EAAAwC,cACAxC,EAAAkG,OAAA6F,MAAA/L,EAAA+L,MAAA6X,EACA5jB,EAAAkG,OAAA4F,OAAA9L,EAAA8L,OAAA8X,EACA5jB,EAAAyK,IAAA+B,MAAAoX,MAGA5jB,EAAA8kB,kBACA9kB,EAAA+kB,QAAA,GACAjC,GACA9iB,EAAAwL,MAAA,GAEAxL,EAAA2G,cAAA,cACA,IAEA3G,EAAA+kB,OAAA,SAAAC,GACA,GAAArjB,GAAA3B,EAAA8Q,mBACAiT,EAAA/jB,EAAA4G,MAAAkO,UAOA,KANA9U,EAAAka,eAAApP,KAAAma,OAAAjlB,EAAAgF,UAAAgE,QAAAhJ,EAAA4U,UAAAD,UAAA3U,EAAA4U,UAAA2J,cAAA,KACAve,EAAAia,eAAA,EACAja,EAAAyY,gBAAA,EACAzY,EAAA4Y,gBAAA,EAEA5Y,EAAAka,eAAApP,KAAAX,IAAAnK,EAAAka,eAAA,GACAla,EAAAia,eAAAja,EAAA4U,UAAAD,WAAA3U,EAAAka,eAAAla,EAAAgF,KAAAgE,QACAhJ,EAAAia,eAAAja,EAAAgkB,YAAAha,EAAAhK,EAAAka,gBACAla,EAAAka,gBAAA,CAEA,MAAAla,EAAA4Y,gBAAA5Y,EAAA4U,UAAAC,YAAA7U,EAAAyY,gBAAA9W,EAAAqH,QACAhJ,EAAA4Y,gBAAA5Y,EAAAgkB,YAAApa,EAAA5J,EAAAyY,iBACAzY,EAAAyY,iBAAA,GAEAzY,EAAAgF,UAAAgE,OAAA,GAAArH,EAAAqH,OAAA,IACAhJ,EAAAyY,gBAAA3N,KAAAX,IAAAnK,EAAAyY,gBAAA,KACAzY,EAAA4Y,gBAAA9N,KAAAX,IAAAnK,EAAA4Y,iBACA5Y,EAAAmR,MAAAD,QAAAlR,EAAAyY,kBAAA9W,EAAA3B,EAAAyY,iBAAA1M,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,MAAA,GACAxM,EAAAka,eAAApP,KAAAX,IAAAnK,EAAAka,eAAA,KACAla,EAAAia,eAAAnP,KAAAX,IAAAnK,EAAAia,gBAEAja,EAAAgF,KAAAhF,EAAAka,iBAAAla,EAAAmR,MAAA6C,KAAAhU,EAAAka,iBAAA6J,IACA/jB,EAAAmR,MAAAmH,MAAAtY,EAAAka,iBAAA,GACA6J,GACA/jB,EAAAwM,MAAA,IAEAxM,EAAA8P,iBACAkV,GACAhlB,EAAAwL,MAAA,GAIA/E,sBAAAzG,EAAA8kB,iBACA9kB,EAAA2G,cAAA,UAA0Cyd,IAAApkB,EAAA4U,UAAAD,UAAA0P,KAAArkB,EAAA4U,UAAAC,cAE1C7U,EAAAklB,UAAA,SAAAle,EAAAme,GACA,IAAAnlB,EAAAolB,cAAAplB,EAAAqlB,MAAA,CAGArlB,EAAAghB,MAAAmE,GAAAnlB,EAAAslB,YAAAte,EACA,IACA1G,GAEAilB,EACAC,EAIAC,EARAC,EAAA1e,EAAA2e,SAAA3e,EAAA4e,SAAA5lB,EAAAgC,WAAA6jB,wBAEAC,EAAA9lB,EAAA8Q,mBAGAlH,EAAA5J,EAAAghB,MAAApX,EACAI,EAAAhK,EAAAghB,MAAAhX,EACAlJ,EAAAd,EAAA+lB,UAAAnc,EAAAI,GAEAqK,GAAsB2R,YAAAhf,EAAA0E,KAAA5K,EAAA8I,IAAAI,KACtBic,EAAAjmB,EAAAmZ,WAKA,IAJA+M,aAAAlmB,EAAAmmB,aACAnmB,EAAAomB,UAAgCxc,IAAAI,QAChChK,EAAAmhB,UAAA,IAEAnhB,EAAA2G,cAAA,YAAA0N,KAGAvT,GAAAd,EAAAmZ,cACAnZ,EAAAqmB,mBAAArmB,EAAAmZ,YAAApL,WAAAjN,EAAAiN,SACA/N,EAAAsmB,sBAAAtmB,EAAAmZ,YAAAtG,cAAA/R,EAAA+R,YACA7S,EAAAumB,oBAAAvmB,EAAAqmB,oBAAArmB,EAAAsmB,uBACA,uBAAAljB,QAAA,SAAAojB,GACAxmB,EAAAwmB,EAAA,qBACAnS,EAAA3I,KAAAua,EACAjmB,EAAA2G,cAAA6f,EAAA,WAAAnS,GACAA,EAAA3I,KAAA5K,EACAd,EAAA2G,cAAA6f,EAAA,YAAAnS,OAIArU,EAAAmZ,YAAArY,EACAd,EAAAmhB,UAAA,CAIA,GADAnhB,EAAA0T,WACA1T,EAAAymB,cACA3lB,IACA,IAAAd,EAAA0mB,YAAA7hB,QAAA/D,EAAAqB,WACAnC,EAAA2mB,SAAA7lB,EACAd,EAAAmc,SAAArb,EAAAsgB,YACAphB,EAAA4mB,OAAA9lB,EAAAqB,QACA,SAAArB,EAAAqB,UACAnC,EAAA4mB,OAAA,UACA5mB,EAAA0T,QAAmC3F,SAAAjN,EAAAiN,SAAA8E,YAAA/R,EAAA+R,eAEnC7S,EAAA6mB,WAAA7mB,EAAA8c,gBACA,SAAAhc,EAAAqB,SAAA,CA6CA,GA5CAsjB,GACA7b,EAAAkB,KAAAC,IAAA/K,EAAA8mB,UAAAld,KACAI,EAAAc,KAAAC,IAAA/K,EAAA8mB,UAAA9c,OAEA,IAAAhK,EAAA+mB,gBAAAlU,aAAA7L,EAAAggB,WACAhnB,EAAA+mB,iBACAhZ,SAAA/N,EAAA4T,WAAA7F,SACA8E,YAAA7S,EAAA4T,WAAAf,cAGA0S,GACAnB,IAAAtZ,KAAAiG,IAAA/Q,EAAA+mB,gBAAAhZ,SAAAjN,EAAAiN,UACAsW,KAAAvZ,KAAAiG,IAAA/Q,EAAA+mB,gBAAAlU,YAAA/R,EAAA+R,aACAoU,OAAAnc,KAAAX,IAAAnK,EAAA+mB,gBAAAhZ,SAAAjN,EAAAiN,UACAmZ,MAAApc,KAAAX,IAAAnK,EAAA+mB,gBAAAlU,YAAA/R,EAAA+R,eAEA,IAAA7S,EAAA+mB,gBAAAlU,cACA2S,EAAAxlB,EAAAmnB,qBACA5B,EAAAlB,MAAA,EACAkB,EAAA2B,MAAApB,EAAA9c,OAAA,EACAuc,EAAAnB,IAAAtZ,KAAAiG,IAAAyU,EAAApB,IAAAtjB,EAAAiN,UACAwX,EAAA0B,OAAAnc,KAAAX,IAAAqb,EAAAyB,OAAAnmB,EAAAiN,WAEA/N,EAAA+mB,gBAAAhZ,WAAAjN,EAAAiN,UACA/N,EAAA+mB,gBAAAlU,cAAA/R,EAAA+R,cACA7S,EAAAonB,iBAAA,IAEApnB,EAAAumB,qBAAA,IAAAd,EAAA7b,GAAA,IAAA6b,EAAAzb,GAAA,QAAAhK,EAAAgC,WAAAwY,iBACA,QAAAxa,EAAAgC,WAAAwY,gBAAA,IAAAxa,EAAA+mB,gBAAAlU,cACA7S,EAAAqmB,mBAEyB,QAAArmB,EAAAgC,WAAAwY,gBACzBxa,EAAAqnB,wBAAAvlB,KAAAhB,EAAAiN,UAKA/N,EAAA4S,WAAA9R,EAAAiN,UAAA/N,EAAA4S,WAAA9R,EAAAiN,eACA,IAAA/N,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,cACA7S,EAAA4S,WAAA9R,EAAAiN,UAAAjG,KAAAhH,EAAA+R,cANA7S,EAAA4S,WAAA9R,EAAAiN,YAAA,IAAA/N,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,cACA7S,EAAA4S,WAAA9R,EAAAiN,UAAAoU,OAAAniB,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,aAAA,IAJA7S,EAAAsnB,UAAAxmB,EAAAiN,SAAA2X,EAAA,YAcA1lB,EAAAunB,iBAAAhC,EAAAnB,MAAApkB,EAAAunB,gBAAAnD,KACAmB,EAAAlB,OAAArkB,EAAAunB,gBAAAlD,MACAkB,EAAA0B,SAAAjnB,EAAAunB,gBAAAN,QACA1B,EAAA2B,QAAAlnB,EAAAunB,gBAAAL,OAAAxB,GAGA,GAFA1lB,EAAA4S,cACA4S,EAAAD,EACA,QAAAvlB,EAAAgC,WAAAwY,cACA,IAAAla,EAAAklB,EAAApB,IAAiD9jB,GAAAklB,EAAAyB,OAAqB3mB,GAAA,EACtEN,EAAAsnB,UAAAhnB,GAAA,gBAEyB,IAAAilB,EAAAnB,KACzBpkB,EAAAwnB,WAAAhC,GAAA,EAGAxlB,GAAAynB,eAAAzgB,EAAA4C,EAAAI,EAAA0b,GAGA1lB,EAAAumB,qBAAA,EACAvmB,EAAAqmB,oBAAA,EACArmB,EAAAsmB,uBAAA,EACAtmB,EAAAwL,MAAA,MAEAxL,EAAA0nB,MAAA,SAAA1gB,EAAAme,GAQA,QAAAwC,KACA,GAAAtT,IACAzB,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAunB,gBAEAxmB,QAAAC,eAAAqT,EAAA,gBACAlT,IAAA,WACA,MAAAnB,GAAA4nB,qBAdA,GAAAtnB,GACAolB,EAAA1e,EAAA2e,SAAA3e,EAAA4e,SAAA5lB,EAAAgC,WAAA6jB,wBACAzW,EAAA+V,GAAAnlB,EAAAslB,YAAAte,EAEA,IADAhH,EAAAmZ,YAAAnZ,EAAA+lB,UAAA3W,EAAAxF,EAAAwF,EAAApF,OACAlI,KAAA9B,EAAAmZ,YAAAzC,KAAA,CAiBA,GAHA1W,EAAAqlB,OACArlB,EAAA6nB,UAEA7nB,EAAAonB,gBAEA,YADApnB,EAAAonB,iBAAA,EAIA,IADA9mB,EAAAN,EAAAmZ,aACAnZ,EAAA2G,cAAA,SAA6Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eAC7CnZ,EAAAmhB,SAAA,CAMA,IAHA,yCAAAtc,QAAA7E,EAAAmZ,YAAAvS,QAAA8e,GACA1lB,EAAA8nB,cAAAxnB,EAAAuS,YAAAvS,EAAAyN,UAEA,SAAA/N,EAAAmZ,YAAAhX,QAAA,CACA,kBAAAnC,EAAAmZ,YAAAvS,MAIA,MAHA5G,GAAA+nB,YACA/nB,EAAAwL,WACAmc,IAGA,yBAAA3nB,EAAAmZ,YAAAvS,MAAA,CACA,YAAA5G,EAAAgC,WAAAgmB,0BAQA,MAPAhoB,GAAA4W,UAAAtW,EAAA2S,OAAArS,KACAZ,EAAAoN,eAAA,QAAApN,EAAAoN,eAAA,aAEApN,EAAAoN,eAAA,MAEApN,EAAA+a,MAAAza,EAAA2S,OAAArS,KAAAZ,EAAAoN,oBACAua,IAGA,eAAA3nB,EAAAgC,WAAAgmB,0BAIA,MAHAhoB,GAAAioB,aAAA3nB,EAAA2S,OAAA2E,MAAA8N,EAAA1e,EAAAggB,UAAA,GACAW,QACA3nB,GAAAwL,OAKA,GADAxL,EAAA4S,WAAAtS,EAAAyN,UAAA/N,EAAA4S,WAAAtS,EAAAyN,eACA,QAAA/N,EAAAgC,WAAAwY,eAAA,kBAAAxa,EAAAmZ,YAAAvS,QACA,kBAAA5G,EAAAmZ,YAAAvS,OACA5G,EAAAgC,WAAAqU,MAAAjH,EAAAxF,EAAA,GACAwF,EAAAxF,EAAA5J,EAAAmZ,YAAAvP,EAAA5J,EAAA4G,MAAA8G,eACA1N,EAAA4G,MAAA6G,oBACAzN,EAAA4G,MAAA4G,qBAAAxN,EAAA4G,MAAAshB,sBACA9Y,EAAApF,EAAAhK,EAAAmZ,YAAAnP,EAAAhK,EAAA4G,MAAA+G,gBACA3N,EAAA4G,MAAA2G,mBAAAvN,EAAA4G,MAAAshB,sBACA9Y,EAAApF,EAAA,EAEA,WADAhK,GAAAmoB,WAAA7nB,EAAAyN,SAIA/G,GAAAggB,WAAAtB,IACA1lB,EAAAunB,gBAAAvnB,EAAAmnB,qBACAnnB,EAAAwnB,eAAA1lB,IAAA,IAGA6lB,IACA3nB,EAAAwL,MAAA,MAEAxL,EAAAooB,iBAAA,SAAAphB,GACA,GAAAoI,GAAAxF,EAAAI,CAUA,OATAoF,GAAApP,EAAAslB,YAAAte,GACA4C,EAAA5J,EAAAqoB,sBAAAjZ,EAAAxF,EAAA5J,EAAA8mB,UAAAld,EACAI,EAAAhK,EAAAsoB,uBAAAlZ,EAAApF,EAAAhK,EAAA8mB,UAAA9c,EACAJ,EAAA5J,EAAA4G,MAAA2hB,iBACA3e,EAAA5J,EAAA4G,MAAA2hB,gBAEAve,EAAAhK,EAAA4G,MAAA4hB,eACAxe,EAAAhK,EAAA4G,MAAA4hB,eAEAxoB,EAAA2G,cAAA,gBAAoDiD,IAAAI,IAAAyc,aAAAzmB,EAAAymB,iBACpDzmB,EAAA4U,UAAAC,WAAA7U,EAAA4U,UAAAuJ,YAAAne,EAAAgC,WAAAymB,kBACA,cAAAzoB,EAAAmc,WACAnc,EAAA0G,QAAA,MACA1G,EAAA4U,UAAAC,YAAAjL,GAEA,cAAA5J,EAAAmc,UACAnc,EAAAmR,MAAAD,QAAA,kBAAAlR,EAAAymB,aAAAxT,OAAArM,MACA,aAAA5G,EAAAymB,aAAArR,iBAAAxL,GACA,mCAAA/E,QAAA7E,EAAAymB,aAAAxT,OAAArM,QACA5G,EAAA0G,QAAA,UAEA1G,GAAA0oB,oBAGA,cAAA1oB,EAAAmc,UACAnc,EAAAymB,aAAAtR,QACAnV,EAAAmR,MAAAmH,MAAAtY,EAAAymB,aAAA1Y,UAAA/D,EACiBhK,EAAAgC,WAAA2mB,gBACjB3oB,EAAA4G,MAAAkO,WAAA9K,EAEAhK,EAAAmR,MAAA6C,KAAAhU,EAAAymB,aAAA1Y,UAAA/D,EAEAhK,EAAA2G,cAAA,aAAiD2N,IAAAtK,QACjDhK,GAAA0oB,yBAGA1oB,EAAA8P,oBAEA9P,EAAA4oB,eAAA,WACA5oB,EAAA0G,SACA5D,SAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAAooB,kBAAA,GACAtlB,SAAA4B,KAAAsd,oBAAA,UAAAhiB,EAAA4oB,gBAAA,GACA5oB,EAAA6oB,iBACA7oB,EAAAwL,MAAA,GACAxL,EAAAonB,iBAAA,GAEApnB,EAAA8oB,WAAA,SAAA9hB,GACA,GAAAoI,GAAApP,EAAAslB,YAAAte,EAUA,OATAhH,GAAAgC,WAAA+mB,mBAAA/oB,EAAA8gB,sBACA,oDAAAjc,QAAA7E,EAAAgpB,mBACAhpB,EAAA8gB,oBAAAlX,GAAA5C,EAAAiiB,UACAjpB,EAAA8gB,oBAAA9W,GAAAhD,EAAAkiB,UACAlpB,EAAA8gB,oBAAAlX,EAAAkB,KAAAiG,IAAA/Q,EAAA+L,MAAA/L,EAAA4G,MAAAkS,eAAAhO,KAAAX,IAAA,EAAAnK,EAAA8gB,oBAAAlX,IACA5J,EAAA8gB,oBAAA9W,EAAAc,KAAAiG,IAAA/Q,EAAA8L,OAAA9L,EAAA4G,MAAAkS,eAAAhO,KAAAX,IAAA,EAAAnK,EAAA8gB,oBAAA9W,IACAoF,EAAApP,EAAA8gB,qBAEA9gB,EAAAmpB,WAAAnpB,EAAA+lB,UAAA3W,EAAAxF,EAAAwF,EAAApF,GAAA7H,QACA,0BAAAnC,EAAAmpB,YAAA,0BAAAnpB,EAAAgpB,iBACAhpB,EAAAgpB,gBAAA,wBACAhpB,EAAA8mB,UAAA1X,EACApP,EAAAopB,YAAA/E,KAAArkB,EAAA4U,UAAAC,eACAqR,cAAAlmB,EAAAmmB,cAGA,wBAAAnmB,EAAAmpB,YAAA,wBAAAnpB,EAAAgpB,iBACAhpB,EAAAgpB,gBAAA,sBACAhpB,EAAA8mB,UAAA1X,EACApP,EAAAopB,YAAAhF,IAAApkB,EAAA4U,UAAAD,cACAuR,cAAAlmB,EAAAmmB,eAGA,wBAAAnmB,EAAAgpB,iBACA,wBAAAhpB,EAAAmpB,aACAnpB,EAAAmpB,WAAA,uBAEA,0BAAAnpB,EAAAgpB,iBACA,0BAAAhpB,EAAAmpB,aACAnpB,EAAAmpB,WAAA,yBAEAjD,aAAAlmB,EAAAmmB,mBACA,IAAAnmB,EAAA0mB,YAAA7hB,QAAA7E,EAAAmpB,cAGA,wBAAAnpB,EAAAmpB,WACAnpB,EAAA4U,UAAAD,UAAA3U,EAAAopB,YAAAhF,KAAAhV,EAAApF,EAAAhK,EAAA8mB,UAAA9c,GACAhK,EAAA4U,UAAA2P,eACa,wBAAAvkB,EAAAmpB,YACbnpB,EAAA4U,UAAAD,WAAA3U,EAAA4kB,KAAA5kB,EAAA4G,MAAAkO,WACA9U,EAAAmmB,YAAAkD,WAAArpB,EAAA8oB,WAAA9oB,EAAAgC,WAAAsnB,iBAAAtiB,IACa,2BAAAhH,EAAAmpB,aACbnpB,EAAA4U,UAAAD,WAAA3U,EAAA4kB,KAAA5kB,EAAA4G,MAAAkO,WACA9U,EAAAmmB,YAAAkD,WAAArpB,EAAA8oB,WAAA9oB,EAAAgC,WAAAsnB,iBAAAtiB,IAEA,0BAAAhH,EAAAmpB,WACAnpB,EAAA4U,UAAAC,WAAA7U,EAAAopB,YAAA/E,MAAAjV,EAAAxF,EAAA5J,EAAA8mB,UAAAld,GACA5J,EAAA4U,UAAA0P,cACa,4BAAAtkB,EAAAmpB,YACbnpB,EAAA4U,UAAAC,YAAA7U,EAAAgC,WAAAunB,yBACAvpB,EAAAmmB,YAAAkD,WAAArpB,EAAA8oB,WAAA9oB,EAAAgC,WAAAsnB,iBAAAtiB,IACa,2BAAAhH,EAAAmpB,aACbnpB,EAAA4U,UAAAC,YAAA7U,EAAAgC,WAAAunB,yBACAvpB,EAAAmmB,YAAAkD,WAAArpB,EAAA8oB,WAAA9oB,EAAAgC,WAAAsnB,iBAAAtiB,QAGAhH,EAAAwpB,eAAA,WACAtD,aAAAlmB,EAAAmmB,aACArjB,SAAA2mB,iBACA3mB,SAAA2mB,kBAEA3mB,SAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAA8oB,YAAA,IAEA9oB,EAAA0pB,YAAA,SAAA1iB,GACA,GAAAoI,GAAAxF,EAAAI,CACAoF,GAAApP,EAAAslB,YAAAte,GACA4C,EAAAwF,EAAAxF,EAAA5J,EAAA8mB,UAAAld,EACAI,EAAAoF,EAAApF,EAAAhK,EAAA8mB,UAAA9c,GACAhK,EAAAgC,WAAA2nB,uBAAA,mBAAA3pB,EAAAmc,YAGAnc,EAAAgC,WAAA4nB,oBAAA,gBAAA5pB,EAAAmc,YAGAnc,EAAA2G,cAAA,cACAqf,YAAAhf,EACA6iB,OAAA7pB,EAAA+mB,gBACAle,OAAA7I,EAAAmZ,YACAgD,SAAAnc,EAAAmc,aAIArR,KAAAC,IAAAnB,GAAA5J,EAAAgC,WAAA8nB,iBAAAhf,KAAAC,IAAAf,GAAAhK,EAAAgC,WAAA8nB,mBACA9pB,EAAA8c,cAAA9c,EAAAymB,aACAzmB,EAAAqd,cAAArd,EAAAmZ,YACAnZ,EAAA8c,cAAAC,YACAnT,IACAI,KAEAhK,EAAAynB,eAAAzgB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,MAGAhK,EAAA+pB,gBAAA,SAAA/iB,GACA,GAAAgjB,GACAC,EACAC,GACAC,cAAAnqB,EAAAiR,OAAA+C,KACAoW,iBAAApqB,EAAAiR,OAAAC,SAEA5Q,GACA6pB,cAAA,WACAC,iBAAA,eACiBpqB,EAAAmc,SACjBrZ,UAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAA0pB,aAAA,GACA5mB,SAAA4B,KAAAsd,oBAAA,UAAAhiB,EAAA+pB,iBAAA,GACA/pB,EAAA8c,eACA9c,EAAAqd,gBACA,mBAAArd,EAAAmc,UAAAnc,EAAAqd,cAAAxK,aAAA,GACA7S,EAAAqd,cAAAxK,YAAA7S,EAAA8Q,mBAAA9H,QACA,gBAAAhJ,EAAAmc,UAAAnc,EAAAqd,cAAAtP,UAAA,GACA/N,EAAAqd,cAAAtP,SAAA/N,EAAAgF,KAAAgE,SACAhJ,EAAA8c,cAAAxc,KAAAN,EAAAqd,cAAA/c,KACAN,EAAA2G,cAAA,WACAqf,YAAAhf,EACA6iB,OAAA7pB,EAAA8c,cACAjU,OAAA7I,EAAAqd,cACAlB,SAAAnc,EAAAmc,aAEAnc,EAAAonB,iBAAA,EACA4C,EAAAE,EAAAlqB,EAAAmc,UAAAtX,QAAA7E,EAAA8c,cAAAxc,IACA2pB,EAAAC,EAAAlqB,EAAAmc,UAAAtX,QAAA7E,EAAAqd,cAAA/c,IACA4pB,EAAAlqB,EAAAmc,UAAAgG,OAAA6H,EAAA,GACAE,EAAAlqB,EAAAmc,UAAAgG,OAAA8H,EAAA,EAAAjqB,EAAA8c,cAAAxc,IACAN,EAAA6oB,kBAEA7oB,EAAA8c,kBAAAhb,GACA9B,EAAAqd,kBAAAvb,GACA9B,EAAAwL,MAAA,IAEAxL,EAAAqqB,SAAA,SAAArjB,GACA,IAAAhH,EAAA2G,cAAA,UAA8Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAA9C,CACA,GAAA/J,GAAApP,EAAAslB,YAAAte,EACAhH,GAAAuX,YACA3N,EAAA5J,EAAAmZ,YAAAtG,YAAA7S,EAAA+mB,gBAAAlU,YACA7I,EAAAhK,EAAAmZ,YAAApL,SAAA/N,EAAA+mB,gBAAAhZ,WAEAjD,KAAAC,IAAAqE,EAAAxF,GAAA5J,EAAAgC,WAAA8nB,iBAAAhf,KAAAC,IAAAqE,EAAApF,GAAAhK,EAAAgC,WAAA8nB,kBACAT,WAAA,WACArpB,EAAAynB,eAAAzgB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,IACiB,KAGjBhK,EAAAsqB,aAAA,SAAAtjB,GACAlE,SAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAAqqB,UAAA,GACAvnB,SAAA4B,KAAAsd,oBAAA,UAAAhiB,EAAAsqB,cAAA,EACA,IAAApc,GAAAlO,EAAAmnB,oBACA,IAAAnnB,EAAA2G,cAAA,WAA+Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAI/C,MAHAnZ,GAAAqX,oBAAAvV,GACA9B,EAAAuX,eAAAzV,OACA9B,GAAAwL,MAAA,EAGAxL,GAAAuX,aACAvX,EAAA2K,OAAA3K,EAAAqX,gBAAAnJ,EAAAmW,KAAArkB,EAAAuX,WAAA3N,EAAAsE,EAAAkW,IAAApkB,EAAAuX,WAAAvN,GACAhK,EAAAuqB,cAAAvqB,EAAAuX,WAAA3N,EAAA5J,EAAAuX,WAAAvN,IAEAhK,EAAAqX,oBAAAvV,GACA9B,EAAAuX,eAAAzV,GACA9B,EAAAwL,MAAA,IAEAxL,EAAAwqB,WAAA,SAAAxjB,GACA,IAAAhH,EAAA2G,cAAA,gBAAoDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAApD,CACA,GAAA/J,GAAApP,EAAAslB,YAAAte,EACAhH,GAAAonB,iBAAA,EACApnB,EAAAgc,qBAAA5M,EACApP,EAAAmZ,iBAAArX,KAAA9B,EAAAmZ,YAAApL,UAAA,sBAAA/N,EAAAmc,WACAnc,EAAA4U,UAAAD,UAAA,EACA3U,EAAA4Z,UAAA5Z,EAAAmZ,YAAApL,SAAA,GAEA/N,EAAAmZ,iBAAArX,KAAA9B,EAAAmZ,YAAAtG,aAAA,yBAAA7S,EAAAmc,WACAnc,EAAA4U,UAAAC,WAAA,EACA7U,EAAAgR,aAAAhR,EAAAmZ,YAAAtG,YAAA,IAEA/H,KAAAC,IAAAqE,EAAAxF,GAAA5J,EAAAgC,WAAA8nB,iBAAAhf,KAAAC,IAAAqE,EAAApF,GAAAhK,EAAAgC,WAAA8nB,kBACAT,WAAA,WACArpB,EAAAynB,eAAAzgB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,IACiB,KAGjBhK,EAAAyqB,eAAA,SAAAzjB,GAIA,GAHAlE,SAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAAwqB,YAAA,GACA1nB,SAAA4B,KAAAsd,oBAAA,UAAAhiB,EAAAyqB,gBAAA,GACAzqB,EAAAgc,yBAAAla,GACA9B,EAAA2G,cAAA,iBAAqDqf,YAAAhf,IAIrD,MAHAhH,GAAA4Z,UAAA5Z,EAAA0qB,gBAAA9gB,EACA5J,EAAAgR,aAAAhR,EAAA0qB,gBAAA1gB,MACAhK,GAAAwL,MAAA,EAGAxL,GAAAwL,MAAA,IAEAxL,EAAA2qB,UAAA,SAAA3jB,EAAAme,GAEA,GADAnlB,EAAA4qB,oBAAA5jB,EAAA6B,QACA7I,EAAA2G,cAAA,aAAiDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eACjDnZ,EAAAmhB,UAGA,IAAAna,EAAA6jB,SAAA7qB,EAAAqlB,MAAA,CACA,GAAAK,GAAA1e,EAAA2e,SAAA3e,EAAA4e,QACAkF,EAAA,QAAApoB,KAAA1C,EAAAmc,UACA4O,EAAA,yCAAAroB,KAAA1C,EAAAmc,UACAzV,EAAA,UAAAhE,KAAA1C,EAAAmc,SAiBA,IAhBAnc,EAAA8mB,UAAA3B,GAAAnlB,EAAAslB,YAAAte,GACAhH,EAAAopB,aACA/E,KAAArkB,EAAA4U,UAAAC,WACAuP,IAAApkB,EAAA4U,UAAAD,WAEA3U,EAAA+mB,gBAAA/mB,EAAA+lB,UAAA/lB,EAAA8mB,UAAAld,EAAA5J,EAAA8mB,UAAA9c,GACAhK,EAAAqnB,oBAAArnB,EAAA+mB,gBAAAvT,SACAkS,GAAA1e,EAAAggB,UAAA,yCACAtkB,KAAA1C,EAAA+mB,gBAAA5kB,WACAnC,EAAAmZ,aACAnZ,EAAAmZ,YAAA5F,gBACAuX,GACAC,GACArkB,IACA1G,EAAA4S,gBAEA5S,EAAA+mB,gBAAAjT,OAAA,CAGA,QAAA9T,EAAA0mB,YAAA7hB,QAAA7E,EAAA+mB,gBAAA5kB,SAeA,MAdAnC,GAAAmpB,WAAAnpB,EAAA+mB,gBAAA5kB,QACAnC,EAAAgpB,gBAAAhpB,EAAA+mB,gBAAA5kB,QACAnC,EAAA8oB,WAAA9hB,GACAhH,EAAAgC,WAAA+mB,oBACA,oDAAAlkB,QAAA7E,EAAAgpB,mBACAhpB,EAAA8gB,qBACAlX,EAAA5J,EAAA8mB,UAAAld,EACAI,EAAAhK,EAAA8mB,UAAA9c,GAEAhK,EAAAkG,OAAA8kB,sBAEAloB,SAAA4B,KAAA2D,iBAAA,YAAArI,EAAA8oB,YAAA,GACAhmB,SAAA4B,KAAA2D,iBAAA,UAAArI,EAAAwpB,gBAAA,QACAxpB,EAAAonB,iBAAA,EAGA,aAAApnB,EAAAmc,SAQA,MAPAnc,GAAA6mB,WAAA,QACA,QAAA7mB,EAAAgC,WAAAwY,gBAAA,IAAAxa,EAAA+mB,gBAAAlU,cACA7S,EAAA+mB,gBAAAhZ,UAAA,EACA/N,EAAAsnB,UAAAtnB,EAAA+mB,gBAAAhZ,SAAA2X,EAAA,SACiB,QAAA1lB,EAAAgC,WAAAwY,eACjBxa,EAAAklB,UAAAle,GAIA,IAAA8jB,EAAA,CAIA,GAHA9qB,EAAAymB,aAAAzmB,EAAA2mB,SACA3mB,EAAAqX,gBAAArX,EAAA4S,WAAAqY,WACAjrB,EAAAkrB,SAAAlrB,EAAA+mB,gBACA/mB,EAAA2G,cAAA,aAAqDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAA2C,MAGhG,OAFArW,UAAA4B,KAAA2D,iBAAA,YAAArI,EAAAqqB,UAAA,GACAvnB,SAAA4B,KAAA2D,iBAAA,UAAArI,EAAAsqB,cAAA,GACAtqB,EAAAklB,UAAAle,GAEA,GAAA+jB,EAAA,CAMA,GALA/qB,EAAAymB,aAAAzmB,EAAA2mB,SACA3mB,EAAA0qB,iBACA9gB,EAAA5J,EAAA4Z,UACA5P,EAAAhK,EAAAgR,cAEAhR,EAAA2G,cAAA,mBAA2Dqf,YAAAhf,IAAmB,MAG9E,OAFAlE,UAAA4B,KAAA2D,iBAAA,YAAArI,EAAAwqB,YAAA,GACA1nB,SAAA4B,KAAA2D,iBAAA,UAAArI,EAAAyqB,gBAAA,GACAzqB,EAAAklB,UAAAle,GAEA,MAAAN,IACA1G,EAAAymB,aAAAzmB,EAAA2mB,SACA3mB,EAAAymB,aAAAtR,QACAnV,EAAAsoB,uBAAAtoB,EAAAmR,MAAAmH,MAAAtY,EAAAymB,aAAA1Y,UAEA/N,EAAAsoB,uBAAAtoB,EAAAmR,MAAA6C,KAAAhU,EAAAymB,aAAA1Y,WAAA/N,EAAA4G,MAAAkO,WAEA9U,EAAAqoB,sBAAAroB,EAAAmR,MAAAD,QAAA,kBAAAlR,EAAAymB,aAAAxT,OAAArM,MACA,aAAA5G,EAAAymB,aAAArR,kBAAApV,EAAAymB,aAAA1a,MACAjJ,SAAA4B,KAAA2D,iBAAA,YAAArI,EAAAooB,kBAAA,OACAtlB,UAAA4B,KAAA2D,iBAAA,UAAArI,EAAA4oB,gBAAA,KAGA,qCAAA/jB,QAAA7E,EAAAmc,WACAnc,EAAAymB,aAAAzmB,EAAA+mB,gBACAjkB,SAAA4B,KAAA2D,iBAAA,YAAArI,EAAA0pB,aAAA,OACA5mB,UAAA4B,KAAA2D,iBAAA,UAAArI,EAAA+pB,iBAAA,QAHA,MAOA/pB,EAAAmrB,QAAA,SAAAnkB,GACAkf,aAAAlmB,EAAAmmB,aACAnmB,EAAAumB,qBAAA,EACAvmB,EAAAqmB,oBAAA,EACArmB,EAAAsmB,uBAAA,EACAtmB,EAAA6mB,cAAA/kB,GACA9B,EAAAymB,iBAAA3kB,GACA9B,EAAA+mB,oBAAAjlB,GACA9B,EAAA2G,cAAA,WAA+Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,gBAC/CnZ,EAAAmhB,UAAAna,EAAA6B,SAAA7I,EAAAkG,UAGAlG,EAAAmZ,iBAAArX,KAAA9B,EAAAmZ,YAAAzC,MAGA1W,EAAAolB,aAAAplB,EAAAqlB,QACArlB,EAAA8mB,WAAA9mB,EAAAomB,SAAApmB,EAAA8mB,YACA9mB,EAAAorB,aAAAC,QAEArkB,EAAAob,oBAEApiB,EAAAsrB,QAAA,SAAAtkB,GACA,GAAA1G,GACA+T,EACAzK,EAAA5J,EAAA4T,WAAAf,YACA7I,EAAAhK,EAAA4T,WAAA7F,SACA2X,EAAA1e,EAAA2e,SAAA3e,EAAA4e,QACA2F,EAAAvrB,EAAAgF,KAAAgE,OAAA,EACAwiB,EAAAxrB,EAAA8Q,mBAAA9H,OAAA,CACA,KAAAhJ,EAAA2G,cAAA,WAA+Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eAC/CnZ,EAAAmhB,SAAA,CAkDA,GA/CAnhB,EAAAgC,WAAAqY,aACAkR,GAAA,GAEA,IAAAvkB,EAAAykB,SACAzkB,EAAAob,iBAGA,KAAApb,EAAAykB,SACAzrB,EAAA4S,cACA5S,EAAAwL,MAAA,IAEaka,GAAA,KAAA1e,EAAAykB,QACbzrB,EAAA+nB,YAEa,KAAA/gB,EAAAykB,QACbzhB,GAAA,EAEa,KAAAhD,EAAAykB,QACbzhB,GAAA,EAEa,KAAAhD,EAAAykB,SAAAzkB,EAAAggB,UAAA,IAAAhgB,EAAAykB,QACb7hB,GAAA,EAEa,KAAA5C,EAAAykB,UAAAzkB,EAAAggB,UAAA,IAAAhgB,EAAAykB,QACb7hB,GAAA,EAEa,KAAA5C,EAAAykB,SACbzhB,GAAAhK,EAAA4kB,KACA5d,EAAAob,kBAEa,KAAApb,EAAAykB,SACbzhB,GAAAhK,EAAA4kB,KACA5d,EAAAob,kBAEa,KAAApb,EAAAykB,SAAA/F,GAAA,KAAA1e,EAAAykB,QACbzhB,EAAA,EAEa,KAAAhD,EAAAykB,SAAA/F,GAAA,KAAA1e,EAAAykB,QACbzhB,EAAAhK,EAAAgF,KAAAgE,OAAA,EAEa0c,GAAA,KAAA1e,EAAAykB,QACb7hB,EAAA4hB,EAEa9F,GAAA,KAAA1e,EAAAykB,UACb7hB,EAAA,GAGA,KAAA5C,EAAAykB,QACA,MAAAzrB,GAAA0rB,YAAA9hB,EAAAI,EAGA,SAAAhD,EAAAykB,QAAA,CAKA,GAJAzrB,EAAA4S,cACA5S,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,OACAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAlC,KAAA8B,GACA5J,EAAAunB,gBAAAvnB,EAAAmnB,qBACA,QAAAnnB,EAAAgC,WAAAwY,cACA,IAAAla,EAAAN,EAAAunB,gBAAAnD,IAAsD9jB,GAAAN,EAAAunB,gBAAAN,OAAkC3mB,GAAA,EACxFN,EAAAsnB,UAAAhnB,EAAAolB,EAAA,aAGA1lB,GAAAwnB,eAAA1lB,GAAA4jB,EAIA,OAFA1e,GAAAob,qBACApiB,GAAAwL,MAAA,GAGA5B,EAAA,IACAA,EAAA,GAEAI,EAAAuhB,IACAvhB,EAAAuhB,GAEAvhB,EAAA,IACAA,EAAA,GAEAJ,EAAA4hB,IACA5hB,EAAA4hB,GAGAxkB,EAAAggB,WAAA,kBAAAniB,QAAAmC,EAAAykB,WACAzrB,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,QACAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAlC,KAAA8B,GACA5J,EAAAunB,gBAAAvnB,EAAAmnB,qBACAnnB,EAAAwnB,eAAA1lB,GAAA4jB,GACA1lB,EAAAwL,MAAA,IAEA5B,IAAA5J,EAAA4T,WAAAf,aAAA7I,IAAAhK,EAAA4T,WAAA7F,WACA/N,EAAA2rB,eAAA/hB,IAAA5J,EAAA4T,WAAAf,YAAAjJ,MAAA9H,GAAAkI,IAAAhK,EAAA4T,WAAA7F,SAAA/D,MAAAlI,IACA9B,EAAA8nB,cAAAle,EAAAI,IACAhD,EAAAggB,UAAAhnB,EAAAgC,WAAA4pB,6BACAlG,IACA1lB,EAAA4S,eAEA5S,EAAA4S,WAAA5I,GAAAhK,EAAA4S,WAAA5I,OACAhK,EAAA4S,WAAA5I,GAAAlC,KAAA8B,GACAyK,GACAwX,aAAA7rB,EAAA4nB,kBACAhV,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAunB,iBAEAxmB,OAAAC,eAAAqT,EAAA,gBACAlT,IAAA,WACA,MAAAnB,GAAA4nB,qBAGA5nB,EAAA2G,cAAA,mBAAA0N,IAEArU,EAAAwL,MAAA,MAGAxL,EAAA8rB,MAAA,SAAA9kB,GACAhH,EAAA2G,cAAA,SAA6Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eAC7CnZ,EAAAmhB,UAIAnhB,EAAA+rB,SAAA,SAAA/kB,GACAhH,EAAAmhB,UAGAnhB,EAAA2G,cAAA,YAAgDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eAEhDnZ,EAAAgsB,SAAA,SAAAhlB,GACAhH,EAAA2G,cAAA,YAAgDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eAChDnZ,EAAAmhB,WAGA,cAAAnhB,EAAAmZ,YAAAhX,SACA,qBAAAnC,EAAAmZ,YAAAvS,MACA5G,EAAAisB,kBAAAjsB,EAAAmZ,YAAAlG,OAAArS,MACa,cAAAZ,EAAAmZ,YAAAhX,SACb,eAAAnC,EAAAmZ,YAAAvS,MACA5G,EAAAksB,YACa,0BAAArnB,QAAA7E,EAAAmZ,YAAAvS,QACb5G,EAAA0rB,YAAA1rB,EAAAmZ,YAAAtG,YAAA7S,EAAAmZ,YAAApL,YAGA/N,EAAAmsB,YAAA,SAAAnlB,GACA,GAAAzG,GACAqP,EACAwc,MAAAtqB,KAAAkF,EAAAolB,OAAAplB,EAAAgf,YAAAoG,OAAAplB,EAAAolB,OACAC,MAAAvqB,KAAAkF,EAAAqlB,OAAArlB,EAAAgf,YAAAqG,OAAArlB,EAAAqlB,OACAC,MAAAxqB,KAAAkF,EAAAslB,UAAAtlB,EAAAgf,YAAAsG,UAAAtlB,EAAAslB,SACA1K,IAGA5hB,EAAA2G,cAAA,SAA6Cqf,YAAAhf,MAG7CA,IAAAgf,aAAAhf,EACAhH,EAAAusB,oBAAA,EACAhsB,EAAAP,EAAA4U,UAAAC,WACAjF,EAAA5P,EAAA4U,UAAAD,UACA3U,EAAAmhB,WAGA,IAAAmL,IAEAD,GAAA,KAEArsB,EAAA4U,UAAAD,UAAA3U,EAAA4U,UAAA2J,cAAA8N,EAAA,GACArsB,EAAA4U,UAAAC,WAAA7U,EAAA4U,UAAAuJ,aAAAiO,EAAA,GACApsB,EAAA4U,UAAAD,UAAA,GAAA0X,EAAA,GACArsB,EAAA4U,UAAAC,WAAA,GAAAuX,EAAA,IACAplB,EAAAob,eAAApb,GAEA4a,EAAAyH,WAAA,WACAzH,MAAA9f,GACA9B,EAAA4U,UAAA4X,SAAAJ,EAAA7rB,EAAA8rB,EAAAzc,IACiB,MAGjB5P,EAAAysB,UAAA,SAAAC,EAAA9iB,EAAAI,EAAA2iB,GAEA,QAAAC,GAAAC,EAAAC,EAAAC,EAAA7lB,EAAAylB,EAAA5e,GACA,GAAAzD,GAAAwiB,CAsBA,OArBAppB,OAAAspB,QAAAH,IAAA,OAAAA,GAAA,gBAAAA,KACAA,EAAA9rB,OAAA4D,KAAAkoB,GAAAI,IAAA,SAAAC,GACA,MAAAL,GAAAK,MAGA,cAAAxqB,KAAAiqB,KACAE,IAAAM,UAAA,EAAAN,EAAA7jB,OAAA,GAAAokB,MAAA,cAEA,gBAAAP,KACAA,OAEAQ,EAAAtf,MACA8e,EAAAzpB,QAAA,SAAAkqB,EAAAC,GACA,GAAAC,GAAAtmB,EAAAqmB,EAAAR,GAAAnsB,IACA,QAAAkB,KAAA+qB,EAAAU,IAAA,OAAAV,EAAAU,GAEA,YADAjjB,EAAAkjB,GAAAV,EAAAU,GAGAH,GAAAtf,GAAAjG,KAAAylB,EAAAR,GACAziB,EAAAkjB,GAAAX,EAAAU,KAEAjjB,EAxBA,GAAA/J,GAAAoB,EAAA3B,EAAA8Q,mBAAA2c,EAAAzjB,EAAA,EAAAqjB,IA0BA,kBAAA3qB,KAAAiqB,GAAA,CACA,6BAAAjqB,KAAAgqB,EAAAS,UAAA,OAEA,WADArW,SAAAC,KAAA,+LAIA2V,KAAAS,UAAAT,EAAA7nB,QAAA,kBAAA6nB,EAAA1jB,OAAA,IAAAokB,MAAA,iBAEAV,KAAAU,MAAA,KASA,OAPA7sB,GAAAmsB,EAAA1jB,OACA0jB,EAAAtpB,QAAA,SAAAuU,GACA8V,GAAA,CACA,IAAAntB,GAAAN,EAAAiR,OAAAC,QAAAuc,EACAztB,GAAAgF,KAAA1E,GAAAssB,EAAAjV,EAAA3X,EAAAgF,KAAA1E,GAAAsJ,EAAAjI,EAAAgrB,EAAArsB,KAEAN,EAAA4S,WAAAya,EACA9sB,GAEAP,EAAA0tB,MAAA,SAAA1mB,GACA,GAAArG,EAeA,MAPAA,EAAA+C,MAAAlC,UAAA6D,OAAA7E,KAAAwG,EAAA2mB,cAAAC,MAAA,SAAAC,GACA,oBAAAA,EAAA5kB,OACa,IAAAvF,MAAAlC,UAAA6D,OAAA,SAAAwoB,GACb,mBAAAA,EAAA5kB,OACa,IAAAvF,MAAAlC,UAAA6D,OAAA,SAAAwoB,GACb,qBAAAA,EAAA5kB,OACa,IAGb,WADA6N,SAAAC,KAAA,qGAfA,SAAA8W,GACA,GAAA5kB,GAAA4kB,EAAA5kB,IACA4kB,GAAAC,YAAA,SAAAnsB,GACA3B,EAAAysB,UAAA9qB,EAAA3B,EAAA4T,WAAAf,YAAA7S,EAAA4T,WAAA7F,SAAA9E,GACAjJ,EAAAwL,UAcA7K,IAEAX,EAAA+tB,IAAA,SAAA/mB,GACAhH,EAAAguB,KAAAhnB,GACAhH,EAAAiuB,oBAAA,SAAAjpB,EAAA4S,EAAAsW,GACAlpB,EAAA4S,GAAAsW,GAAA,MAGAluB,EAAAguB,KAAA,SAAAhnB,GAWA,QAAAmnB,GAAAviB,GACA,MAAAA,GAAAnG,QAAA,aAA4CA,QAAA,aAE5C,QAAA2oB,GAAAxiB,GAEA,MADAA,GAAA,OAAAA,OAAA9J,KAAA8J,EAAA,GAAAA,EACA,wBAAAA,GAAAuiB,EAAAviB,MAAA,QAQA,QAAAyiB,GAAA/nB,EAAAgoB,EAAAC,EAAA1d,GAEA,GAAA2d,GAAA3d,EAAA4E,OAAA5E,EAAAjQ,IACA,eAAA0F,IACA,IAAAA,OACAxE,KAAAwE,GACAA,EAAAb,UACA,IAAAgpB,EAAA5pB,QAAA2pB,IACAE,EAAA1lB,SAAAhE,EAAAgE,QACAhJ,EAAAgC,WAAA2sB,wBACAF,EAAA3mB,KAAA0mB,GAEAF,EAAAxmB,KAAAsmB,EAAA9nB,QACAioB,GAAAzmB,KAAA,IAAAxB,EAAAb,QAAA,qBAGA3D,KAAAwE,GACAioB,EAAAzmB,KAAAxB,OACAgoB,GAAAxmB,KAAAsmB,EAAA9nB,MAIAioB,EAAAzmB,KAAA,QACAwmB,GAAAxmB,KAAA,oBA9CA,IAAA9H,EAAA2G,cAAA,QAA4Cqf,YAAAhf,KAC5ChH,EAAAmhB,UAAAna,EAAA2mB,cAAA,CACA,GAAA/d,GACAjP,EACAqE,EAAAhF,EAAAgF,SACA4pB,KACAC,KACAJ,KACAC,EAAA1uB,EAAA4nB,kBACAjmB,EAAA3B,EAAA8Q,kBAuCA4d,GAAA1lB,OAAA,IACA0lB,EAAAtrB,QAAA,SAAAkR,GACA,GAAAA,EAAA,CACA,GAAAga,MACAC,IACA5sB,GAAAyB,QAAA,SAAAyN,EAAAgC,GAEAhC,EAAAlP,EAAA3B,EAAAiR,OAAAC,QAAA2B,IAEAwb,EAAA/Z,EAAAzD,EAAAjQ,MAAA0tB,EAAAC,EAAA1d,KAEA+d,EAAA9mB,KAAAwmB,EAAAQ,KAAA,KACAD,EAAA/mB,KAAAymB,EAAAO,KAAA,SAGAlf,EAAA6e,EAAAK,KAAA,MAAAL,EAAAzlB,OAAA,WAAA6lB,EAAAC,KAAA,MACAnuB,EAAA,UA/CA,WACA,MAAA8tB,GAAAzlB,OACA,OAAAylB,EAAAxB,IAAA,SAAArsB,GACA,aAAAutB,EAAAvtB,GAAA,UACiBkuB,KAAA,YAHqB,MA8CtC,OAAAF,EAAAE,KAAA,6BACA9nB,EAAA2mB,cAAAoB,QAAA,YAAApuB,GACAqG,EAAA2mB,cAAAoB,QAAA,aAAAnf,GACA5I,EAAA2mB,cAAAoB,QAAA,WAAAnf,GACA5I,EAAA2mB,cAAAoB,QAAA,mBAAAjoB,KAAAkoB,UAAAN,IACA1nB,EAAAob,sBAKClgB,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,INu7DK,SAAUhC,EAAQD,EAASO,GOpnGjC,GAAAyB,GAAAC,CAEAD,UAqXCE,MArXDD,EAAA,WACA,YACA,iBAAA7B,GACA,GACAivB,EACAjvB,GAAAsgB,mBACAtgB,EAAAogB,cACApgB,EAAAqgB,kBACArgB,EAAAkvB,gBAAA,EACAlvB,EAAAmvB,YAAA,SAAAnoB,EAAAooB,GACA,GAEAhgB,GAFAQ,EAAAwf,EAAApoB,EAAA8Y,QAAAsP,GAAApoB,EAAA8Y,QAAA,GACAuP,EAAArvB,EAAAkG,OAAAopB,uBAEA,IAAA1f,EASA,MARAR,IACAxF,EAAAgG,EAAA2f,QAAAF,EAAAhL,KACAra,EAAA4F,EAAA4f,QAAAH,EAAAjL,KAEApkB,EAAAwC,cACA4M,EAAAxF,GAAA5J,EAAAuK,iBACA6E,EAAApF,GAAAhK,EAAAwK,kBAGAZ,EAAAwF,EAAAxF,EACAI,EAAAoF,EAAApF,EACAqlB,SAIArvB,EAAAyvB,iBACAC,OAAA,SAAA9f,GAAkC,MAAAA,IAClC+f,WAAA,SAAA/f,GAAsC,MAAAA,MACtCggB,YAAA,SAAAhgB,GAAuC,MAAAA,IAAA,EAAAA,IACvCigB,cAAA,SAAAjgB,GAAyC,MAAAA,GAAA,KAAAA,KAAA,IAAAA,KAAA,GACzCkgB,YAAA,SAAAlgB,GAAuC,MAAAA,QACvCmgB,aAAA,SAAAngB,GAAwC,QAAAA,MAAA,GACxCogB,eAAA,SAAApgB,GAA0C,MAAAA,GAAA,KAAAA,SAAA,MAAAA,EAAA,MAAAA,EAAA,MAC1CqgB,YAAA,SAAArgB,GAAuC,MAAAA,UACvCsgB,aAAA,SAAAtgB,GAAwC,YAAAA,SACxCugB,eAAA,SAAAvgB,GAA0C,MAAAA,GAAA,KAAAA,QAAA,MAAAA,SAC1CwgB,YAAA,SAAAxgB,GAAuC,MAAAA,YACvCygB,aAAA,SAAAzgB,GAAwC,WAAAA,WACxC0gB,eAAA,SAAA1gB,GAA0C,MAAAA,GAAA,MAAAA,UAAA,OAAAA,YAE1C5P,EAAAuwB,OAAA,SAAA3gB,EAAA1B,EAAAxN,EAAAC,GACA,MAAAD,GAAAV,EAAAyvB,gBAAAzvB,EAAAgC,WAAAwuB,mBAAA5gB,EAAAjP,GAAAuN,GAEAlO,EAAAywB,kBAAA,WACAzwB,EAAA2gB,QAAA3gB,EAAAogB,WAAAxW,EAAA5J,EAAA0wB,gBAAA9mB,IAAA5J,EAAAogB,WAAAxQ,EAAA5P,EAAA0wB,gBAAA9gB,GACA5P,EAAA4gB,QAAA5gB,EAAAogB,WAAApW,EAAAhK,EAAA0wB,gBAAA1mB,IAAAhK,EAAAogB,WAAAxQ,EAAA5P,EAAA0wB,gBAAA9gB,GACA5P,EAAA0wB,iBACA9mB,EAAA5J,EAAAogB,WAAAxW,EACAI,EAAAhK,EAAAogB,WAAApW,EACA4F,EAAA2J,YAAAC,QAGAxZ,EAAA2wB,aAAA,WACA3wB,EAAAwgB,OAAAxgB,EAAAogB,WAAAxW,EAAA5J,EAAA4wB,WAAAhnB,IAAA5J,EAAAogB,WAAAxQ,EAAA5P,EAAA4wB,WAAAhhB,GACA5P,EAAAygB,OAAAzgB,EAAAogB,WAAApW,EAAAhK,EAAA4wB,WAAA5mB,IAAAhK,EAAAogB,WAAAxQ,EAAA5P,EAAA4wB,WAAAhhB,GACA5P,EAAA4wB,YACAhnB,EAAA5J,EAAAogB,WAAAxW,EACAI,EAAAhK,EAAAogB,WAAApW,EACA4F,EAAA2J,YAAAC,QAGAxZ,EAAA6wB,kBAAA,WACA,IAAA7wB,EAAAkG,SAAAlG,EAAA4U,UAAA4X,SAA2D,MAAA/lB,uBAAAzG,EAAA6wB,kBAC3D,IAEAjhB,GAFAxO,EAAAmY,YAAAC,MACA7Y,EAAAX,EAAAgC,WAAA8uB,+BAEAlhB,GAAAxO,EAAApB,EAAAogB,WAAAxQ,EACA5P,EAAAkvB,iBAAA,EACAlvB,EAAAsgB,gBAAA1W,EAAA5J,EAAAuwB,OAAA3gB,EAAA5P,EAAAogB,WAAAvL,WAAA7U,EAAAqgB,eAAAzW,EAAAjJ,GACAX,EAAAsgB,gBAAAtW,EAAAhK,EAAAuwB,OAAA3gB,EAAA5P,EAAAogB,WAAAzL,UAAA3U,EAAAqgB,eAAArW,EAAArJ,GACAiP,EAAAjP,GAAAX,EAAAsgB,gBAAAtW,IAAAhK,EAAA4U,UAAAD,WACA3U,EAAAsgB,gBAAA1W,IAAA5J,EAAA4U,UAAAC,YAAA7U,EAAA+wB,gBAGA/wB,EAAA4U,UAAA4X,SAAAxsB,EAAAsgB,gBAAA1W,EAAA5J,EAAAsgB,gBAAAtW,GACAvD,sBAAAzG,EAAA6wB,qBAEA7wB,EAAAgxB,cAAA,SAAAtlB,GACA1L,EAAA0rB,YAAAhgB,EAAAmH,YAAAnH,EAAAqC,WAEA/N,EAAAixB,UAAA,SAAAjqB,GACA,kBACAkqB,cAAAlxB,EAAAmxB,kBACA,IAAA7wB,GAAA8O,EAAApP,EAAAmvB,YAAAnoB,EACA,IAAA8D,KAAAC,IAAA/K,EAAAogB,WAAAxW,GAAAkB,KAAAC,IAAA/K,EAAAogB,WAAApW,GAAAhK,EAAAgC,WAAAovB,cAAA,CAEA,KADA9wB,EAAAN,EAAA+lB,UAAA3W,EAAAxF,EAAAwF,EAAApF,IAC6B,MAC7B,IAAAhK,EAAAqxB,cAAArxB,EAAAqxB,aAAAtjB,WAAAzN,EAAAyN,UACA/N,EAAAqxB,aAAAxe,cAAAvS,EAAAuS,YAEA,WADA7S,GAAAgxB,cAAA1wB,EAGAN,GAAAqlB,OAAArlB,EAAAqlB,MAAAiM,UACAtxB,EAAA6nB,UAEA7nB,EAAAqxB,aAAA/wB,EACAN,EAAAwnB,YACApD,IAAA9jB,EAAAyN,SACAkZ,OAAA3mB,EAAAyN,SACAsW,KAAA/jB,EAAAuS,YACAqU,MAAA5mB,EAAAuS,cAEA7S,EAAAwL,MAAA,MAIAxL,EAAAuxB,WAAA,SAAAvqB,GAKA,GAJAA,EAAAwqB,eAAA,KACAxxB,EAAAkhB,WAAAlhB,EAAAmvB,YAAAnoB,GACAhH,EAAAyxB,aAAAzxB,EAAA+lB,UAAA/lB,EAAAkhB,WAAAtX,EAAA5J,EAAAkhB,WAAAlX,GAAA,KAEAhK,EAAA2G,cAAA,cAAkDqf,YAAAhf,EAAA0E,KAAA1L,EAAAyxB,eAAlD,CASA,GARAzxB,EAAA0xB,qBACAR,cAAAlxB,EAAAmxB,mBACAjL,aAAAlmB,EAAA2xB,qBACA3xB,EAAA4xB,gBAAA5qB,EACAhH,EAAA+wB,eAAA,EACA/wB,EAAAkvB,gBAAA,EACAlvB,EAAA6hB,gBAAA7a,GACAA,EAAAob,iBACA,IAAApb,EAAA8Y,QAAA9W,QAAAhC,EAAAwqB,eAAA,KAAAxxB,EAAA6xB,YAAA,CA6BA,GA5BA7xB,EAAA6f,YAAA,EACA7f,EAAAkhB,WAAAlhB,EAAAkhB,YAAAlhB,EAAA8xB,YACA9xB,EAAA+xB,kBACAnoB,EAAA5J,EAAA4U,UAAAC,WACA7K,EAAAhK,EAAA4U,UAAAD,UACA/E,EAAA2J,YAAAC,OAEAxZ,EAAAogB,YACAxW,EAAA,EACAI,EAAA,EACA6K,WAAA7U,EAAA4U,UAAAC,WACAF,UAAA3U,EAAA4U,UAAAD,UACA/E,EAAA5P,EAAA+xB,iBAAAniB,GAEA5P,EAAA4wB,YACAhnB,EAAA5J,EAAAogB,WAAAxW,EACAI,EAAAhK,EAAAogB,WAAApW,EACA4F,EAAA5P,EAAAogB,WAAAxQ,GAEA5P,EAAA0wB,iBACA9mB,EAAA5J,EAAAogB,WAAAxW,EACAI,EAAAhK,EAAAogB,WAAApW,EACA4F,EAAA5P,EAAAogB,WAAAxQ,GAEA5P,EAAA2xB,oBAAAtI,WAAA,WACArpB,EAAAgyB,iBAAAhrB,EAAAhH,EAAAkhB,aACiBlhB,EAAAgC,WAAAiwB,wBACjBjyB,EAAAmxB,kBAAAe,YAAAlyB,EAAAywB,kBArJA,IAsJAzwB,EAAAyxB,eAAAzxB,EAAAyxB,aAAA3d,SAAA,uBAAAjP,QAAA7E,EAAAyxB,aAAAtvB,UAEA,YADAnC,EAAAmhB,UAAA,EAIA,IADAnhB,EAAAmhB,UAAA,EACAnhB,EAAAyxB,aAAA3e,SA6BA,MA5BA9S,GAAAyxB,aAAA9e,aACA3S,EAAAwnB,YACApD,IAAApkB,EAAAyxB,aAAA1jB,SACAkZ,OAAAjnB,EAAAyxB,aAAA1jB,SACAsW,KAAA,EACA6C,MAAAlnB,EAAA8Q,mBAAA9H,OAAA,IAEAhJ,EAAAwL,MAAA,IACqBxL,EAAAyxB,aAAAle,iBACrB,SAAAvT,EAAAgC,WAAAgmB,4BACAhoB,EAAA4W,UAAA5W,EAAAyxB,aAAAxe,OAAArS,KACAZ,EAAAoN,eAAA,QAAApN,EAAAoN,eAAA,aAEApN,EAAAoN,eAAA,MAEApN,EAAA+a,MAAA/a,EAAAyxB,aAAAxe,OAAArS,KAAAZ,EAAAoN,iBAEA,WAAApN,EAAAgC,WAAAgmB,4BACAhoB,EAAAwnB,YACApD,IAAA,EACA6C,OAAAjnB,EAAAgF,KAAAgE,OAAA,EACAqb,KAAArkB,EAAAyxB,aAAA5e,YACAqU,MAAAlnB,EAAAyxB,aAAA5e,cAEA7S,EAAAwL,MAAA,SAGAxL,GAAAmyB,eAAAnrB,GAIAhH,EAAA6xB,cACA/uB,SAAA4B,KAAA2D,iBAAA,YAAArI,EAAAoyB,WAAyEC,SAAA,IACzEvvB,SAAA4B,KAAA2D,iBAAA,WAAArI,EAAAsyB,UAAA,GACAxvB,SAAA4B,KAAA2D,iBAAA,cAAArI,EAAAuyB,aAAA,GACAvyB,EAAAwL,MAAA,MAEAxL,EAAAwyB,YAAA,SAAA9mB,EAAA+mB,GACA,OAAA3wB,KAAA4J,EAAAqC,cAAAjM,KAAA4J,EAAAmH,YAAA,CACA7S,EAAA0yB,gBAAA,CACA,IAAAC,GAAA3yB,EAAAmnB,oBACA,yBAAAsL,GACA/mB,EAAAqC,UAAA4kB,EAAAvO,KACA1Y,EAAAmH,aAAA8f,EAAAzL,OACAyL,EAAA1L,OAAAvb,EAAAqC,SACA4kB,EAAAtO,KAAA3Y,EAAAmH,aACa,wBAAA4f,GACb/mB,EAAAqC,UAAA4kB,EAAA1L,QACAvb,EAAAmH,aAAA8f,EAAAzL,OACAyL,EAAAvO,IAAA1Y,EAAAqC,SACA4kB,EAAAtO,KAAA3Y,EAAAmH,aACa,wBAAA4f,GACb/mB,EAAAqC,UAAA4kB,EAAA1L,QACAvb,EAAAmH,aAAA8f,EAAAtO,MACAsO,EAAAvO,IAAA1Y,EAAAqC,SACA4kB,EAAAzL,MAAAxb,EAAAmH,aACa,wBAAA4f,GACb/mB,EAAAqC,UAAA4kB,EAAAvO,KACA1Y,EAAAmH,aAAA8f,EAAAtO,OACAsO,EAAA1L,OAAAvb,EAAAqC,SACA4kB,EAAAzL,MAAAxb,EAAAmH,aAEA,QAAA7S,EAAAgC,WAAAwY,gBAAA,IAAA9O,EAAAqC,UACA4kB,EAAAtO,KAAA,EACAsO,EAAAzL,MAAAlnB,EAAA4yB,YAAA5pB,OAAA,GAEA2pB,EAAAtO,KAAAvZ,KAAAX,IAAA,EAAAwoB,EAAAtO,MAEArkB,EAAAwnB,WAAAmL,GACA3yB,EAAAwL,MAAA,KAEAxL,EAAAoyB,UAAA,SAAAprB,GAuCA,QAAA6rB,KACA,GAAAjpB,GAAA5J,EAAA4U,UAAAC,WACA7K,EAAAhK,EAAA4U,UAAAD,SACA/K,IAAAkpB,EAAA9yB,EAAAgC,WAAAunB,yBAAA,EACAvf,GAAA+oB,EAAA/yB,EAAAgC,WAAAunB,yBAAA,EACAvf,GAAAgpB,EAAAhzB,EAAAgC,WAAAunB,yBAAA,EACA3f,GAAAqpB,EAAAjzB,EAAAgC,WAAAunB,yBAAA,EACAvpB,EAAA4U,UAAA4X,SAAA5iB,EAAAI,GACAilB,EAAA5F,WAAAwJ,EAAA7yB,EAAAgC,WAAAsnB,kBA9CA,GAAAvF,GAAAmP,EAAAJ,EAAAG,EAAAF,EAAAC,EAAArP,EAAAwP,EAAAC,CACA,KAAApzB,EAAA2G,cAAA,mBAAuDqf,YAAAhf,IAAvD,CAWA,GAVAkf,aAAA+I,GACAjoB,EAAAwqB,eAAA,KACAxxB,EAAA+f,cAAA/f,EAAAmvB,YAAAnoB,IAEAA,EAAAwqB,eAAA,KACAxxB,EAAAggB,eAAAhgB,EAAAmvB,YAAAnoB,EAAA,IAEA8D,KAAAC,IAAA/K,EAAAogB,WAAAxW,GAAAkB,KAAAC,IAAA/K,EAAAogB,WAAApW,GAAAhK,EAAAgC,WAAAovB,eACAlL,aAAAlmB,EAAA2xB,qBAEA,IAAA3qB,EAAA8Y,QAAA9W,QAAAhJ,EAAA+f,eAAA/f,EAAAggB,eAcA,MAbAmT,GAAAnzB,EAAA+f,cAAA/V,EACAopB,EAAApzB,EAAAggB,eAAAhW,EACAhK,EAAA4f,iBACA5f,EAAA4f,eAAA9U,KAAAC,IAAAooB,EAAAC,GACApzB,EAAA0f,WAAA1f,EAAAwM,OAEAxM,EAAA6f,YAAA,EACA7f,EAAA2f,WAAA3f,EAAA4f,eAAA9U,KAAAC,IAAAooB,EAAAC,GACApzB,EAAAwM,MAAAxM,EAAA0f,WAAA1f,EAAA2f,WAAA3f,EAAAgC,WAAAqxB,qBACArzB,EAAAwM,MAAA1B,KAAAiG,IAAAjG,KAAAX,IAAAnK,EAAAwM,MAAAxM,EAAAgC,WAAAsxB,cAAAtzB,EAAAgC,WAAAuxB,cACAvzB,EAAA6xB,aAAA,EACA7xB,EAAA0G,QAAA,OACA1G,GAAA0oB,kBAGA,KAAA1oB,EAAA6xB,YAAA,CAqCA,GApCA7xB,EAAA6f,YAAA,EACA7f,EAAA+f,cAAA/f,EAAA+f,eAAA/f,EAAAggB,eACA+D,EAAA/jB,EAAAqZ,4BACA6Z,EAAAlzB,EAAAsZ,wBACAwZ,EAAA9yB,EAAA+L,MAAA/L,EAAA4G,MAAAkS,eAAA9Y,EAAA+f,cAAAnW,EAAA5J,EAAAgC,WAAAwxB,oBACAP,EAAAjzB,EAAA+f,cAAAnW,EAAAspB,EAAAlzB,EAAAgC,WAAAwxB,oBACAT,EAAA/yB,EAAA8L,OAAA9L,EAAA4G,MAAAkS,eAAA9Y,EAAA+f,cAAA/V,EAAAhK,EAAAgC,WAAAwxB,oBACAR,EAAAhzB,EAAA+f,cAAA/V,EAAA+Z,EAAA/jB,EAAAgC,WAAAwxB,oBACA7P,EAAA3jB,EAAA4G,MAAAkS,eAWA9R,EAAA6a,kBACA7hB,EAAAogB,YACAxW,EAAA5J,EAAA+f,cAAAnW,EAAA5J,EAAAkhB,WAAAtX,EACAI,EAAAhK,EAAA+f,cAAA/V,EAAAhK,EAAAkhB,WAAAlX,EACA6K,WAAA7U,EAAA4U,UAAAC,WACAF,UAAA3U,EAAA4U,UAAAD,UACA/E,EAAA2J,YAAAC,OAEAxZ,EAAAmZ,YAAAnZ,EAAA+lB,UAAA/lB,EAAA+f,cAAAnW,EAAA5J,EAAA+f,cAAA/V,GACAhK,EAAA2G,cAAA,aAA6Cqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAC7CnZ,EAAA2wB,eACA3wB,EAAA6gB,cAAAtH,YAAAC,MAAAxZ,EAAA+xB,iBAAAniB,EACA5P,EAAA+wB,eAAA,EACA/wB,EAAAkvB,gBAAA,EACAlvB,EAAA0yB,iBAAAI,GAAAG,GAAAD,GAAAD,IACAF,IAEA,mBAAAnwB,KAAA1C,EAAAyxB,aAAA7qB,OAGA,YAFA5G,EAAA4U,UAAAD,UAAA3U,EAAA4U,UAAA2J,eACAve,EAAA+f,cAAA/V,EAAA+Z,EAAAJ,IAAA3jB,EAAA4U,UAAA9I,OAAA6X,EAAAI,IAGA,yBAAArhB,KAAA1C,EAAAyxB,aAAA7qB,OAGA,YAFA5G,EAAA4U,UAAAC,WAAA7U,EAAA4U,UAAAuJ,cACAne,EAAA+f,cAAAnW,EAAAspB,EAAAvP,IAAA3jB,EAAA4U,UAAA7I,MAAA4X,EAAAuP,IAGA,wBAAAxwB,KAAA1C,EAAAyxB,aAAA7qB,OAEA,WADA5G,GAAAwyB,YAAAxyB,EAAAmZ,YAAAnZ,EAAAyxB,aAAA7qB,MAGA5G,GAAA4U,UAAA4X,SAAAxsB,EAAA+xB,iBAAAnoB,EAAA5J,EAAAogB,WAAAxW,EACA5J,EAAA+xB,iBAAA/nB,EAAAhK,EAAAogB,WAAApW,GACAhK,EAAAwL,MAAA,MAEAxL,EAAAmyB,eAAA,SAAAnrB,GACAhH,EAAA4f,mBAAA9d,GACA9B,EAAA0yB,gBAAA,EACAxB,cAAAlxB,EAAAivB,oBACAiC,cAAAlxB,EAAA2xB,qBACAT,cAAAlxB,EAAAmxB,mBACAnqB,EAAA6a,kBACA/e,SAAA4B,KAAAsd,oBAAA,YAAAhiB,EAAAoyB,WAA4EC,SAAA,IAC5EvvB,SAAA4B,KAAAsd,oBAAA,WAAAhiB,EAAAsyB,UAAA,GACAxvB,SAAA4B,KAAAsd,oBAAA,cAAAhiB,EAAAuyB,aAAA,IAEAvyB,EAAAsyB,SAAA,SAAAtrB,GACA,IAAAhH,EAAA2G,cAAA,YAAgDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,cAAhD,CAQA,GAPAnZ,EAAA4f,mBAAA9d,GACAkF,EAAAwqB,eAAA,KACAxxB,EAAA+f,kBAAAje,IAEAkF,EAAAwqB,eAAA,KACAxxB,EAAAggB,mBAAAle,IAEA9B,EAAA6xB,YAIA,YAHA,IAAA7qB,EAAA8Y,QAAA9W,SACAhJ,EAAA6xB,aAAA,GAIA,IAAA4B,GAAA3oB,KAAAC,IAAA/K,EAAAogB,WAAAxW,GAAAkB,KAAAC,IAAA/K,EAAAogB,WAAApW,GAAAhK,EAAAgC,WAAAovB,aACA7pB,OAAAvH,EAAAwgB,QACAxgB,EAAAwgB,KAAA,GAEAjZ,MAAAvH,EAAAygB,QACAzgB,EAAAygB,KAAA,GAEAlZ,MAAAvH,EAAA2gB,SACA3gB,EAAA2gB,MAAA,GAEApZ,MAAAvH,EAAA4gB,SACA5gB,EAAA4gB,MAAA,GAEA5gB,EAAAqgB,eAAAzW,EAAA5J,EAAAwgB,KAAAxgB,EAAAgC,WAAA0xB,yBACA1zB,EAAAqgB,eAAArW,EAAAhK,EAAAygB,KAAAzgB,EAAAgC,WAAA0xB,yBACA1zB,EAAAywB,oBACAgD,IAAAzzB,EAAAolB,YACAplB,EAAAixB,UAAAjxB,EAAA4xB,mBACa,IAAA5xB,EAAAkvB,mBACbpkB,KAAAC,IAAA/K,EAAA2gB,OAAA3gB,EAAAgC,WAAA2xB,6BACA7oB,KAAAC,IAAA/K,EAAA4gB,OAAA5gB,EAAAgC,WAAA2xB,8BACA,WAAAjxB,KAAA1C,EAAAyxB,aAAA7qB,QACA6sB,IACAzzB,EAAA+wB,eAAA,EACA/wB,EAAA6wB,qBAEA7wB,EAAAmyB,eAAAnrB,KAEAhH,EAAAuyB,YAAA,SAAAvrB,GACAhH,EAAA2G,cAAA,eAAmDqf,YAAAhf,EAAA0E,KAAA1L,EAAAmZ,eACnDnZ,EAAAmyB,eAAAnrB,MAGC9E,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IP4nGK,SAAUhC,EAAQD,EAASO,GQn/GjC,GAAAyB,GAAAC,CAEAD,UAqqCCE,MArqCDD,EAAA,WACA,YACA,iBAAA7B,EAAA4zB,GA8HA,QAAApqB,GAAAC,EAAAC,GACA,GAAAE,GAAAtJ,IACA,KAAAsJ,EAAAH,EAAyBG,GAAAF,EAAWE,GAAA,EACpCtJ,EAAAsJ,IAEA,OAAAtJ,GAlIAN,EAAAwM,MAAA,EACAxM,EAAAiR,QACA+C,QACA9C,YAEAlR,EAAAoT,sBACApT,EAAA6zB,sBACA7zB,EAAAgZ,qBACAhZ,EAAAmhB,UAAA,EACAnhB,EAAA8zB,WAAA,EACA9zB,EAAA4T,YACAf,YAAA,EACA9E,SAAA,GAEA/N,EAAAkJ,UAAA,GACAlJ,EAAA+zB,YAAA,iBACA/zB,EAAAg0B,sBAAA,wCACAh0B,EAAAi0B,4BAAA,qCACAj0B,EAAAk0B,SAAA,gCACAl0B,EAAA4W,QAAA,KACA5W,EAAAoN,eAAA,MACApN,EAAAiX,iBACAjX,EAAAm0B,WACAn0B,EAAA4Z,UAAA,EACA5Z,EAAAgR,aAAA,EACAhR,EAAA8P,iBACA9P,EAAAgkB,aAA4Bpa,KAAAI,MAC5BhK,EAAA4U,aACA5U,EAAAwU,eACAxU,EAAAmR,OACA6C,QACA9C,WACAoH,UAEAtY,EAAAo0B,cAAA,WACA,UAEAp0B,EAAA4S,cACA5S,EAAA0T,UACA1T,EAAAgC,cACAhC,EAAA4G,SACA5G,EAAAkU,cACAlU,EAAAq0B,WACAr0B,EAAAs0B,WACAt0B,EAAAu0B,gBACAv0B,EAAA+hB,UACA/hB,EAAAw0B,IAAA,EACAx0B,EAAAy0B,WACAz0B,EAAAka,eAAA,EACAla,EAAAia,eAAA,EACAja,EAAAyY,gBAAA,EACAzY,EAAA4Y,gBAAA,EACA5Y,EAAAuW,cACAvW,EAAA8N,gBACA9N,EAAA0mB,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEA1mB,EAAA00B,qBACA10B,EAAA20B,YAAA,mEACA,8FACA,uFACA,uFACA,+FACA,oFACA,sFACA,2DACA30B,EAAAghB,OAAsBpX,EAAA,EAAAI,EAAA,GACtBhK,EAAA4nB,gBAAA,SAAAgN,GACA,GAAAj0B,MAAAgB,EAAAizB,EAAA50B,EAAA4yB,YAAA5yB,EAAA8Q,mBAAAvQ,EAAAP,EAAAgF,KAAAgE,MACA,YAAAzI,MACAP,EAAA4S,WAAAxP,QAAA,SAAAkR,EAAAsD,GACA,GAAAtD,GACAsD,IAAArX,EAAA,CACA,OAAA+T,EAAAtL,OAEA,YADArI,EAAAiX,GAAA,KAGAjX,GAAAiX,MACAtD,EAAAlR,QAAA,SAAAyxB,GACA,GAAAC,IACA,IAAAD,GAAAlzB,EAAAkzB,KACAC,EAAA90B,EAAAiR,OAAAC,QAAA2jB,GACA70B,EAAAgF,KAAA4S,KACAjX,EAAAiX,GAAAjW,EAAAmzB,GAAAl0B,MAAAZ,EAAAgF,KAAA4S,GAAAjW,EAAAmzB,GAAAl0B,aAIAD,IAEAX,EAAAqZ,0BAAA,WACA,MAAArZ,GAAAgC,WAAAoZ,mBACApb,EAAAmR,MAAA6C,MAAA,IAAAhU,EAAA4G,MAAAwS,wBAAApZ,EAAAwM,MADqD,GAGrDxM,EAAAsZ,sBAAA,WACA,MAAAtZ,GAAAgC,WAAA8V,gBACA9X,EAAAmR,MAAAD,SAAA,IAAAlR,EAAA4G,MAAAoR,oBAAAhY,EAAAwM,MADkD,GAGlDxM,EAAA6oB,eAAA,WACA,GAAA7oB,EAAAgC,WAAAwU,gBAAAxW,EAAAgC,WAAApB,KAAA,CACA,GAAAm0B,KACA/0B,GAAA4yB,YAAAxvB,QAAA,SAAAyN,GACAkkB,EAAAlkB,EAAAjQ,OAAAiQ,EAAAqT,SAEA8Q,aAAAC,QAAAj1B,EAAA+zB,YAAA,IAAA/zB,EAAAgC,WAAApB,KAAAkG,KAAAkoB,WACA7d,OACA6C,KAAAhU,EAAAmR,MAAA6C,KACA9C,QAAAlR,EAAAmR,MAAAD,SAEAD,QACA+C,KAAAhU,EAAAiR,OAAA+C,KACA9C,QAAAlR,EAAAiR,OAAAC,SAEA0F,QAAA5W,EAAA4W,QACAxJ,eAAApN,EAAAoN,eACA2nB,kBAGA/0B,EAAA4yB,UAAA,WACA,MAAA5yB,GAAAkH,QAAAlH,EAAAk1B,gBASAl1B,EAAAm1B,mBAAA,WACA,GAAAxzB,GAAA3B,EAAA4yB,WACA5yB,GAAAiR,OAAAC,QAAA1H,EAAA,EAAA7H,EAAAqH,OAAA,IAEAhJ,EAAAyZ,gBAAA,WACAzZ,EAAAiR,OAAA+C,KAAAxK,EAAA,EAAAxJ,EAAAgF,KAAAgE,OAAA,IAEAhJ,EAAA8Q,iBAAA,WACA,MAAA9Q,GAAA4yB,YAAAvtB,OAAA,SAAAwvB,GACA,OAAAA,EAAA3Q,UAGAlkB,EAAAo1B,kBAAA,SAAA9gB,EAAArB,GACA,GAAAtS,GAAAsS,EAAAoiB,cAAA,EACA,mBAAA10B,KACAA,IAAAuB,MAAAlC,EAAA4C,MAAAqQ,KAEAqB,EAAArB,EAAArS,MAAAD,GAEAX,EAAAs1B,iBAAA,WACAt1B,EAAAsa,UACAta,EAAA4yB,YAAAxvB,QAAA,SAAA6P,GACAjT,EAAAo1B,kBAAAp1B,EAAAsa,OAAArH,MAGAjT,EAAAu1B,kBAAA,SAAAjU,GAEA,IADA,GAAAlgB,GAAA,EACApB,EAAAu0B,aAAAjT,IACAlgB,GAAA,EACAkgB,GAAAlgB,CAEA,OAAAkgB,IAEAthB,EAAAqF,OAAA,SAAA4D,GACA,GAAAgL,GAAAjU,EAAAm0B,QAAAlrB,EAKA,OAJAgL,QAAAnS,KAAAmH,IACA6N,QAAAC,KAAA,mEAAA9N,GACAgL,EAAAjU,EAAAm0B,QAAAzsB,QAEAuM,GAEAjU,EAAAw1B,qBAAA,SAAAC,EAAAzwB,GACA,GAAA4K,GAAAhG,EAAArJ,EAAAyE,EAAAgE,MACA,KAAAY,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9B,OAAA9H,KAAAkD,EAAA4E,IAAA,OAAA5E,EAAA4E,KAAA,cAAA9H,IAAA+C,QAAAG,EAAA4E,GAAA6rB,IAEA,MADA7lB,SAAA5K,GAAA4E,GACA,WAAAgG,EAAA,SAAAA,CAGA,iBAEA5P,EAAA01B,eAAA,WACA30B,OAAA4D,KAAA3E,EAAAuW,YAAAnT,QAAA,SAAAuyB,GACA31B,EAAAuW,WAAAof,GAAAnqB,UAGAxL,EAAA0oB,iBAAA,WACA3nB,OAAA4D,KAAA3E,EAAAuW,YAAAnT,QAAA,SAAAuyB,GACA31B,EAAAuW,WAAAof,GAAAjvB,YAGA1G,EAAAynB,eAAA,SAAAzgB,EAAA4C,EAAAI,EAAA0b,GACA,GAAAkQ,GACA5d,EAAAhY,EAAAsZ,wBACAF,EAAApZ,EAAAqZ,2BACAzP,GAAA5J,EAAA+L,MAAA/L,EAAAgC,WAAAwxB,qBAAA5pB,EAAA5J,EAAA+L,QACA/L,EAAA4U,UAAAC,YAAA7U,EAAAgC,WAAAunB,yBACAqM,GAAA,GAEA5rB,EAAAhK,EAAA8L,OAAA9L,EAAAgC,WAAAwxB,qBAAAxpB,EAAAhK,EAAA8L,SACA9L,EAAA4U,UAAAD,WAAA3U,EAAAgC,WAAAunB,yBACAqM,GAAA,GAEAhsB,EAAA5J,EAAAgC,WAAAwxB,oBAAAxb,EAAA,IACAhY,EAAA4U,UAAAC,YAAA7U,EAAAgC,WAAAunB,yBACAqM,GAAA,GAEA5rB,EAAAhK,EAAAgC,WAAAwxB,oBAAApa,EAAA,IACApZ,EAAA4U,UAAAD,WAAA3U,EAAAgC,WAAAunB,yBACAqM,GAAA,GAEAA,IAAAlQ,GAAA1lB,EAAAmZ,cAAA,IAAAnZ,EAAAmZ,YAAAtG,cACA7S,EAAAmmB,YAAAkD,WAAArpB,EAAAklB,UAAAllB,EAAAgC,WAAAsnB,iBAAAtiB,KAGAhH,EAAA61B,uBAAA,WACA71B,EAAAgF,KAAAhF,EAAA81B,aAAAzwB,OAAA,SAAAiP,GACA,YAGAtU,EAAA+1B,eAAA,SAAAr1B,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAAqG,OAAA,yCAEA,IAAAtF,EAAA0D,OAAA,SAAA/E,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4BoI,OAAA,EACnE,SAAA/B,OAAA,0BACAvG,EAAAE,KAAA,6CAEA,WAEAZ,EAAAg2B,YAAA,SAAAC,EAAAC,EAAA5U,EAAAjb,GACA4vB,EAAA3U,OAAAxf,KAAAo0B,EAAA5U,GAAAjb,EAAA6vB,EAAA5U,IAEAthB,EAAAm2B,cAAA,WACAn2B,EAAA+B,SAAAC,WAAAoB,QAAA,SAAA9C,GACAN,EAAAg2B,YAAAh2B,EAAAgC,WAAAhC,EAAAsC,KAAAhC,EAAA,GAAAA,EAAA,OAGAN,EAAAo2B,SAAA,WACAp2B,EAAA+B,SAAAE,OAAAmB,QAAA,SAAA9C,GACAN,EAAAg2B,YAAAh2B,EAAA4G,MAAA5G,EAAAsC,KAAAsE,UAAkEtG,EAAA,GAAAA,EAAA,OAGlEN,EAAAksB,SAAA,SAAAgC,GACAluB,EAAA8Q,mBAAA1N,QAAA,SAAAyxB,EAAAtH,GACAsH,EAAAj0B,OAAAstB,OAAApsB,KAAAosB,IACAluB,EAAAmR,MAAAD,QAAAqc,GACAziB,KAAAX,IAAAnK,EAAAq2B,wBAAAxB,EAAAj0B,MAAAZ,EAAA4G,MAAA2hB,mBAGAvoB,EAAAmR,MAAAD,SAAA,GAAAlR,EAAAq2B,wBAAA,eAEAr2B,EAAAs2B,QAAA,YACAt2B,EAAAwC,aAAAxC,EAAAkG,QAAAlG,EAAAkG,OAAAzD,YACAzC,EAAAkG,OAAAzD,WAAA8zB,YAAAv2B,EAAAkG,QAEAlG,EAAAw2B,YAAAxU,oBAAA,UAAAhiB,EAAAmrB,SAAA,GACAnrB,EAAAw2B,YAAAxU,oBAAA,YAAAhiB,EAAA2qB,WAAA,GACA3qB,EAAAw2B,YAAAxU,oBAAA,WAAAhiB,EAAAgsB,UAAA,GACAhsB,EAAAw2B,YAAAxU,oBAAA,QAAAhiB,EAAA0nB,OAAA,GACA1nB,EAAAw2B,YAAAxU,oBAAA,YAAAhiB,EAAAklB,WACAllB,EAAAw2B,YAAAxU,oBAAA,QAAAhiB,EAAAmsB,aAAA,GACAnsB,EAAAkG,OAAA8b,oBAAA,cAAAhiB,EAAAy2B,aAAA,GACAz2B,EAAAkG,OAAA8b,oBAAA,OAAAhiB,EAAAguB,MACAhuB,EAAAorB,aAAApJ,oBAAA,WAAAhiB,EAAA+rB,UAAA,GACA/rB,EAAAorB,aAAApJ,oBAAA,QAAAhiB,EAAA8rB,OAAA,GACA9rB,EAAAorB,aAAApJ,oBAAA,UAAAhiB,EAAAsrB,SAAA,GACAznB,OAAAme,oBAAA,SAAAhiB,EAAA0G,QACA1G,EAAAsI,UAAAtI,EAAAsI,SAAAouB,YACA12B,EAAAsI,SAAAouB,cAGA12B,EAAA22B,sBAAA,WACA,GAAAh1B,EACA3B,GAAA42B,qBACA52B,EAAA62B,gBACA,gBAAA72B,GAAA62B,eAAA5lB,QACA,OAAAjR,EAAA62B,eAAA5lB,SACAjR,EAAA62B,eAAA5lB,OAAA+C,KAAAhL,SAAAhJ,EAAAgF,UAAAgE,SACAhJ,EAAAiR,OAAA+C,KAAAhU,EAAA62B,eAAA5lB,OAAA+C,MAEArS,EAAA3B,EAAA4yB,YACA5yB,EAAA62B,eAAA5lB,OAAAC,QAAAlI,SAAArH,EAAAqH,SACAhJ,EAAAiR,OAAAC,QAAAlR,EAAA62B,eAAA5lB,OAAAC,SAEAlR,EAAA4W,YAAA9U,KAAA9B,EAAA62B,eAAAjgB,QACAjV,EAAA,GAAAf,KAAAZ,EAAA62B,eAAAjgB,QACA5W,EAAAoN,mBAAAtL,KAAA9B,EAAA62B,eAAAzpB,eACA,MAAApN,EAAA62B,eAAAzpB,mBACAtL,KAAA9B,EAAA62B,eAAAjgB,SAAA5W,EAAA82B,gBAAA92B,EAAA4W,UAAA5W,EAAAoN,gBACApN,EAAA+a,MAAA/a,EAAA4W,QAAA5W,EAAAoN,kBAIApN,EAAA+2B,WAAA,WACA,MAAA/2B,GAAAqD,WAAArD,EAAAqD,WAAA2zB,KAAAh3B,EAAAyC,YAEAzC,EAAAi3B,YAAA,SAAAC,GACA,MAAAA,GAAAzxB,QAAA,mBAEAzF,EAAAm3B,cAAA,SAAAD,GACA,MAAAE,YAAAF,EAAA,KAEAl3B,EAAAq3B,gBAAA,SAAA/V,GACA,UAAA5e,KAAA4e,GAGA,MAFAthB,GAAA4G,MAAA0a,EAAA,UAAAthB,EAAAm3B,cAAAn3B,EAAA4G,MAAA0a,SACAthB,EAAA4G,MAAA0a,EAAA,QAAAthB,EAAAi3B,YAAAj3B,EAAA4G,MAAA0a,IAIA,+BAAAA,GAAA,gBAAAthB,GAAA4G,MAAA0a,KACAthB,EAAA4G,MAAA0a,GAAAthB,EAAA4G,MAAA0a,GAAA8L,MAAA,KACAH,IAAA,SAAA3sB,GAAuC,MAAAgH,UAAAhH,EAAA,QAGvCN,EAAAs3B,SAAA,SAAAC,GACAv3B,EAAAsC,KAAAi1B,IACAx2B,OAAA4D,KAAA3E,EAAAsC,KAAAi1B,IAAAn0B,QAAA,SAAAke,GACAthB,EAAAu3B,GAAAjW,GAAAthB,EAAAsC,KAAAi1B,GAAAjW,MAGAthB,EAAAw3B,iBAAA,SAAAlW,GACA,WAAAthB,EAAAy3B,UAAA5yB,QAAAyc,GACAthB,EAAAsjB,gBAAAhC,GAEAthB,EAAA4G,MAAA0a,IAEAthB,EAAAwG,iBAAA,SAAA8a,EAAAtR,EAAA0nB,GACA,GAAAC,IAAA,qEAAA9yB,QAAAyc,IACA,IAAAthB,EAAAy3B,UAAA5yB,QAAAyc,GACAthB,EAAAsjB,gBAAAhC,GAAAtR,GAEA,IAAAtN,KAAA4e,KACAA,EAAAthB,EAAAkD,oBAAAoe,IAEAthB,EAAA4G,MAAA0a,GAAAtR,EACAhQ,EAAAq3B,gBAAA/V,IAEAqW,GACA33B,EAAA0G,SAEAgxB,IACA13B,EAAAwL,MAAA,GACAxL,EAAA2G,cAAA,gBAAoD/F,KAAA,QAAAoP,YAGpDhQ,EAAA42B,mBAAA,WACA,GAAA52B,EAAAgC,WAAApB,MAAAZ,EAAAgC,WAAAwU,eAAA,CAEA,GADAxW,EAAA62B,eAAA7B,aAAA4C,QAAA53B,EAAA+zB,YAAA,IAAA/zB,EAAAgC,WAAApB,MACAZ,EAAA62B,eACA,IACA72B,EAAA62B,eAAA/vB,KAAAC,MAAA/G,EAAA62B,gBACqB,MAAA7vB,GACrB8P,QAAAC,KAAA,0CAAA/P,GACAhH,EAAA62B,mBAAA/0B,GAGA9B,EAAA62B,iBACA,gBAAA72B,GAAA62B,eAAA1lB,OACA,OAAAnR,EAAA62B,eAAA1lB,QACAnR,EAAAmR,MAAA6C,KAAAhU,EAAA62B,eAAA1lB,MAAA6C,KACAhU,EAAAmR,MAAAD,QAAAlR,EAAA62B,eAAA1lB,MAAAD,SACA,0BAAA9N,QAAA,SAAA9C,GACAN,EAAAmR,MAAA7Q,KACAN,EAAAmR,MAAA7Q,UAIA,gBAAAN,GAAA62B,eAAA9B,YACA/0B,EAAA4yB,YAAAxvB,QAAA,SAAAyN,GACA7Q,EAAA62B,eAAA9B,gBAAAjzB,KAAA9B,EAAA62B,eAAA9B,WAAAlkB,EAAAjQ,QACAiQ,EAAAqT,QAAAlkB,EAAA62B,eAAA9B,WAAAlkB,EAAAjQ,YAOAZ,EAAAyD,KAAA,WACA,IAAAzD,EAAA63B,YAAA,CACA,GAAAC,KAkMA,IAjMA93B,EAAAm2B,gBACAn2B,EAAAo2B,WACAp2B,EAAA+3B,gBACA/3B,EAAAg4B,SACAh4B,EAAA2C,SAAA,kBACA3C,EAAA63B,aAAA,EACA73B,EAAAi4B,GAAA,UAAAv1B,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAAo4B,KAAA,OAAA11B,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAAq4B,OAAA,SAAA31B,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAAs4B,IAAA,QAAA51B,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAAq4B,OAAA,SAAA31B,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAA8R,OAAA,UAAApP,KAAAmB,OAAAq0B,UAAAC,WACAn4B,EAAAu4B,WAAA,OACAv4B,EAAAw4B,cAAA,WACAx4B,EAAAu4B,WAAAv4B,EAAAq4B,OAAA,eAAAr4B,EAAAu4B,WACAv4B,EAAAw4B,cAAAx4B,EAAAs4B,IAAA,mBAAAt4B,EAAAy4B,eACAz4B,EAAA8gB,qBAAwClX,EAAA,EAAAI,EAAA,GACxCjJ,OAAA4D,KAAA3E,EAAA4G,OAAAxD,QAAApD,EAAAq3B,iBACAr3B,EAAA4C,KAAA2nB,cAAAvqB,EAAAuqB,cACAvqB,EAAA4C,KAAA+H,OAAA3K,EAAA2K,OACA3K,EAAA4C,KAAAyF,iBAAArI,EAAAqI,iBACArI,EAAA4C,KAAAof,oBAAAhiB,EAAAgiB,oBACAhiB,EAAA4C,KAAA+D,cAAA3G,EAAA2G,cAOA3G,EAAA4C,KAAA0zB,QAAAt2B,EAAAs2B,QAQAt2B,EAAA4C,KAAA81B,SAAA14B,EAAA04B,SACA14B,EAAA4C,KAAAuxB,QAAAn0B,EAAAm0B,QACAn0B,EAAA4C,KAAAyxB,QAAAr0B,EAAAq0B,QACAr0B,EAAA4C,KAAAspB,SAAAlsB,EAAAksB,SACAlsB,EAAA4C,KAAA8oB,YAAA1rB,EAAA0rB,YACA1rB,EAAA4C,KAAAilB,QAAA7nB,EAAA6nB,QACA7nB,EAAA4C,KAAAklB,cAAA9nB,EAAA8nB,cACA9nB,EAAA4C,KAAAqrB,oBAAAjuB,EAAAiuB,oBACAjuB,EAAA4C,KAAA+oB,eAAA3rB,EAAA2rB,eACA3rB,EAAA4C,KAAA+1B,eAAA34B,EAAA24B,eACA34B,EAAA4C,KAAAg2B,SAAA54B,EAAA44B,SACA54B,EAAA4C,KAAAi2B,QAAA74B,EAAA64B,QACA74B,EAAA4C,KAAAk0B,gBAAA92B,EAAA82B,gBACA92B,EAAA4C,KAAAk2B,qBAAA94B,EAAA84B,qBACA94B,EAAA4C,KAAAm2B,iBAAA/4B,EAAA+4B,iBACA/4B,EAAA4C,KAAAqpB,kBAAAjsB,EAAAisB,kBACAjsB,EAAA4C,KAAAyzB,wBAAAr2B,EAAAq2B,wBACAr2B,EAAA4C,KAAA8uB,mBAAA1xB,EAAA0xB,mBACA1xB,EAAA4C,KAAAmjB,UAAA/lB,EAAA+lB,UACA/lB,EAAA4C,KAAAo2B,cAAAh5B,EAAAg5B,cACAh5B,EAAA4C,KAAAmY,MAAA/a,EAAA+a,MACA/a,EAAA4C,KAAA4I,KAAAxL,EAAAwL,KACAxL,EAAA4C,KAAA4kB,WAAAxnB,EAAAwnB,WACAxnB,EAAA4C,KAAAq2B,YAAAj5B,EAAAi5B,YACAj5B,EAAA4C,KAAAs2B,kBAAAl5B,EAAAk5B,kBACAl5B,EAAA4C,KAAAu2B,UAAAn5B,EAAAm5B,UACAn5B,EAAA4C,KAAA0kB,UAAAtnB,EAAAsnB,UACAtnB,EAAA4C,KAAA4S,WAAAxV,EAAAwV,WACAxV,EAAA4C,KAAAulB,WAAAnoB,EAAAmoB,WACAnoB,EAAA4C,KAAAw2B,WAAAp5B,EAAAo5B,WACAp5B,EAAA4C,KAAAy2B,aAAAr5B,EAAAq5B,aACAr5B,EAAA4C,KAAAsD,OAAAlG,EAAAkG,OACAlG,EAAA4C,KAAAT,QAAAnC,EAAAyK,IACAzK,EAAA4C,KAAA02B,UAAAt5B,EAAAs5B,UACAt5B,EAAA4C,KAAA22B,UAAAv5B,EAAAu5B,UACAv5B,EAAA4C,KAAA42B,OAAAx5B,EAAAw5B,OACAx5B,EAAA4C,KAAA62B,aAAAz5B,EAAAy5B,aACAz5B,EAAA4C,KAAA82B,aAAA15B,EAAA05B,aACA15B,EAAA4C,KAAA+2B,UAAA35B,EAAA25B,UACA35B,EAAA4C,KAAAg3B,gBAAA55B,EAAA45B,gBACA55B,EAAA4C,KAAAi3B,aAAA75B,EAAA65B,aACA75B,EAAA4C,KAAAk3B,eAAA95B,EAAA85B,eACA95B,EAAA4C,KAAAm3B,kBAAA/5B,EAAA+5B,kBACA/5B,EAAA4C,KAAAo3B,gBAAAh6B,EAAAg6B,gBACAh6B,EAAA4C,KAAA8D,OAAA1G,EAAA0G,OACA1G,EAAA4C,KAAAqlB,aAAAjoB,EAAAioB,aACAjoB,EAAA4C,KAAA0kB,UAAAtnB,EAAAsnB,UACAtnB,EAAA4C,KAAAmlB,UAAA/nB,EAAA+nB,UACA/nB,EAAA4C,KAAAq3B,WAAAj6B,EAAAi6B,WACAj6B,EAAA4C,KAAA8yB,eAAA11B,EAAA01B,eACA11B,EAAA4C,KAAAs3B,cAAAl6B,EAAAk6B,cACAl6B,EAAA4C,KAAAu3B,uBAAAn6B,EAAAm6B,uBACAn6B,EAAA4C,KAAAw3B,eAAAp6B,EAAAo6B,eACAp6B,EAAA4C,KAAAorB,KAAAhuB,EAAAguB,KACAhuB,EAAA4C,KAAA4D,iBAAAxG,EAAAwG,iBACAzF,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,OACAc,OAAAjC,EAAA+B,SAAAE,OAAAsd,OAAA,SAAA1H,EAAAvX,GAA6F,MAAhBuX,GAAAvX,EAAA,IAAAA,EAAA,GAAgBuX,OAC7F7V,WAAAhC,EAAA+B,SAAAC,WAAAud,OAAA,SAAA1H,EAAAvX,GAAqG,MAAhBuX,GAAAvX,EAAA,IAAAA,EAAA,GAAgBuX,WAIrG7X,EAAAy3B,UAAA12B,OAAA4D,KAAA3E,EAAA4C,KAAAb,SAAAE,QACAjC,EAAAy3B,UAAAz3B,EAAAy3B,UACAxM,OAAAjrB,EAAAy3B,UAAAxK,IAAA,SAAA3sB,GAAyD,MAAAN,GAAAiD,kBAAA3C,GAAA,MACzD2qB,OAAAjrB,EAAAy3B,UAAAxK,IAAA,SAAA3sB,GAAyD,MAAAN,GAAAiD,kBAAA3C,GAAA,MACzDN,EAAAq6B,UAAAx2B,OAAAmC,iBAAAlD,SAAA4B,KAAA,MACA1E,EAAAy3B,UAAAxM,OAAAlqB,OAAA4D,KAAA3E,EAAAq6B,YAAAj3B,QAAA,SAAAke,GAEAwW,EAAAxW,OAAAxf,GACAf,OAAAC,eAAA82B,EAAAxW,GACAngB,IAAA,WACA,MAAAnB,GAAAw3B,iBAAAlW,IAEAgZ,IAAA,SAAAtqB,GACAhQ,EAAAwG,iBAAA8a,EAAAtR,QAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAAqD,cAGAtC,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA4T,cAGA7S,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,MAAAnB,GAAAmhB,YAGApgB,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAA22B,IAEAwC,IAAA,SAAAC,GACAx5B,OAAA4D,KAAA41B,GAAAn3B,QAAA,SAAAke,GACAthB,EAAAwG,iBAAA8a,EAAAiZ,EAAAjZ,IAAA,KAEAthB,EAAAwL,MAAA,GACAxL,EAAA2G,cAAA,gBAAwD/F,KAAA,QAAAoP,MAAAuqB,OAGxDx5B,OAAAC,eAAAhB,EAAA4C,KAAA,cAA4DoN,WAC5DjP,OAAA4D,KAAA3E,EAAAgC,YAAAoB,QAAA,SAAAke,GACAvgB,OAAAC,eAAAhB,EAAA4C,KAAAZ,WAAAsf,GACAngB,IAAA,WACA,MAAAnB,GAAAgC,WAAAsf,IAEAgZ,IAAA,SAAAtqB,GACAhQ,EAAAgC,WAAAsf,GAAAtR,EACA,SAAAsR,GACAthB,EAAA22B,wBAEA32B,EAAAwL,MAAA,GACAxL,EAAA2G,cAAA,oBAAgE/F,KAAA0gB,EAAAtR,QAAAsR,UAIhEthB,EAAAm0B,QAAAzsB,OAAA,SAAAsI,EAAAwqB,GACAxqB,EAAAyqB,OAAAzqB,EACA,IAAA0qB,GACAC,EAAA,cACAC,EAAAD,EAAAE,KAAAL,GACAM,EAAAF,IAAA,GAAAzN,UAAA,MACA4N,EAAAD,EAAA9xB,MAEA,IADAhJ,EAAAg7B,uBAAAl5B,GACA,MAAA04B,EAAArN,UAAA,MAAAyN,EAAA,CACA,IACAF,EAAA,GAAAO,QAAAT,EAAArN,UAAA,EAAAqN,EAAAxxB,QAAA+xB,EAAA,IAAAD,GACqB,MAAA9zB,GAErB,YADAhH,EAAAg7B,mBAAAh0B,GAGA,MAAA0zB,GAAAh4B,KAAAsN,GAEA,QAAAA,EAAAgH,WACA,IADAhH,EAAAgH,WAAAkkB,oBACAr2B,QAAA21B,EAAAU,sBAEAl7B,EAAAm0B,QAAA/sB,OAAA,SAAA4I,EAAAwqB,GACA,OAAAA,GACAxqB,IAAAwqB,IAEA,kCAAAp3B,QAAApD,EAAAs3B,UACAt3B,EAAAgD,qBAAA,EAAAhD,EAAA4C,MACA5C,EAAA42B,qBACA52B,EAAAsC,KAAA0C,OACAhF,EAAA4C,KAAAoC,KAAAhF,EAAAsC,KAAA0C,MAKAhF,EAAA4C,KAAAu4B,WAAAn7B,EAAA4C,KAAAw4B,YACA,IACAp7B,EAAA4C,KAAAoC,KAAA8B,KAAAC,MAAA/G,EAAA4C,KAAAu4B,WAAAn7B,EAAA4C,KAAAw4B,aACiB,MAAAp0B,GACjB8P,QAAAC,KAAA,yBAAA/P,GAWA,MARAhH,GAAAsC,KAAA4E,SACAlH,EAAA4C,KAAAsE,OAAAlH,EAAAsC,KAAA4E,QAEAlH,EAAAwC,YACAiE,sBAAA,WAAmDzG,EAAA0G,QAAA,KAEnD1G,EAAA0G,QAAA,GAEA1G,IAQAA,EAAA4C,KAAAy4B,KAAA,SAAAr0B,GACAhH,EAAAmhB,UAAA,GAQAnhB,EAAA4C,KAAAyoB,MAAA,WACArrB,EAAAmhB,UAAA,EACAnhB,EAAAorB,aAAAC,UAEArrB,EAAAqD,YAAArD,EAAAwC,eACAzB,OAAAC,eAAAhB,EAAA4C,KAAA,UACAzB,IAAA,WACA,MAAAnB,GAAAqD,WACArD,EAAAqD,WAAAyI,OAEA9L,EAAAyC,WAAAqJ,QAEAwuB,IAAA,SAAAtqB,GACAhQ,EAAAqD,WACArD,EAAAqD,WAAAyI,OAAAkE,EAEAhQ,EAAAyC,WAAAqJ,OAAAkE,EAEAhQ,EAAA0G,QAAA,MAGA3F,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAqD,WACArD,EAAAqD,WAAA0I,MAEA/L,EAAAyC,WAAAsJ,OAEAuuB,IAAA,SAAAtqB,GACAhQ,EAAAqD,WACArD,EAAAqD,WAAA0I,MAAAiE,EAEAhQ,EAAAyC,WAAAsJ,MAAAiE,EAEAhQ,EAAA0G,QAAA,MAGA3F,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAAyC,YAEA63B,IAAA,SAAAtqB,GACA,IAAAhQ,EAAAwC,YACA,SAAA84B,WAAA,yDAEAt7B,GAAAyC,WAAAuN,MAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,qBACAzB,IAAA,WACA,MAAAnB,GAAAgZ,qBAGAjY,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA8N,gBAGA/M,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAJ,QAAA4D,KAAA3E,EAAAuW,YAAA0W,IAAA,SAAA1X,GACA,MAAAvV,GAAAuW,WAAAhB,QAIAxU,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAwC,eAGAzB,OAAAC,eAAAhB,EAAA,UACAmB,IAAA,WACA,MAAAnB,GAAAsjB,gBAAAsD,QAEA0T,IAAA,SAAAtqB,GACA,SAAAA,IAAuCA,EAAA,WACvChQ,EAAAu7B,gBAAAvrB,IACAhQ,EAAAsjB,gBAAAsD,OAAA5W,EACAhQ,EAAAu7B,cAAAvrB,MAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,kBACAzB,IAAA,WACA,MAAAnB,GAAAoN,gBAEAktB,IAAA,SAAAtqB,GACA,SAAAA,IACAA,EAAA,OAEAhQ,EAAAoN,eAAA4C,EACAhQ,EAAA+a,MAAA/a,EAAA4W,QAAA5W,EAAAoN,mBAGArM,OAAAC,eAAAhB,EAAA4C,KAAA,WACAzB,IAAA,WACA,MAAAnB,GAAA4W,SAEA0jB,IAAA,SAAAtqB,GACA,OAEqBlO,KAFrB9B,EAAA4yB,YAAA4I,KAAA,SAAA3G,GACA,MAAAA,GAAAj0B,OAAAoP,IAEA,SAAA/I,OAAA,sCAEAjH,GAAA4W,QAAA5G,EACAhQ,EAAA+a,MAAA/a,EAAA4W,QAAA5W,EAAAoN,mBAGApN,EAAAuC,cACAxB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAkG,OAAA8O,gBAGAjU,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAkG,OAAA6O,gBAIAhU,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA4U,UAAA2J,gBAGAxd,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAA4U,UAAAuJ,eAGApd,OAAAC,eAAAhB,EAAA4C,KAAA,aACAzB,IAAA,WACA,MAAAnB,GAAA4U,UAAAD,WAEA2lB,IAAA,SAAAtqB,GACAhQ,EAAA4U,UAAAD,UAAA3E,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA4U,UAAAC,YAEAylB,IAAA,SAAAtqB,GACAhQ,EAAA4U,UAAAC,WAAA7E,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAmR,SAGApQ,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAqlB,SAGAtkB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAorB,gBAGArqB,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAmZ,eAGApY,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA8V,gBAGA/U,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAwU,eAGAzT,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA4S,cAGA7R,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,MAAAnB,GAAAmc,YAGApb,OAAAC,eAAAhB,EAAA4C,KAAA,WACAzB,IAAA,WACA,MAAAnB,GAAAy0B,WAGAz0B,EAAA4C,KAAAsR,WAAAlU,EAAAkU,WACAnT,OAAAC,eAAAhB,EAAA4C,KAAA,QACAzB,IAAA,WACA,MAAAnB,GAAAk0B,UAEAoG,IAAA,SAAAtqB,GACA,IAAAhQ,EAAAs0B,QAAAtkB,GACA,SAAA/I,OAAA,2BAAA+I,EAEAhQ,GAAAk0B,SAAAlkB,KAGAhQ,EAAA20B,WAAAvxB,QAAA,SAAAq4B,GACA16B,OAAAC,eAAAhB,EAAA4C,KAAA,KAAA64B,GACAt6B,IAAA,WACA,MAAAnB,GAAA00B,kBAAA+G,IAEAnB,IAAA,SAAAtqB,GACAhQ,EAAA+hB,OAAA0Z,MACAz7B,EAAA00B,kBAAA+G,GAAAzrB,EACAA,GACAhQ,EAAAqI,iBAAAozB,EAAAzrB,QAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,aACAzB,IAAA,WACA,MAAAnB,GAAA4Z,WAEA0gB,IAAA,SAAAh0B,GACA,GAAAiB,MAAAjB,GACA,SAAAg1B,WAAA,+CAEA,IAAAt7B,EAAAwU,YAAAxL,OAAA1C,EACA,SAAAo1B,YAAA,6DAEA17B,GAAA4Z,UAAAtT,KAGAvF,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAgR,cAEAspB,IAAA,SAAAh0B,GACA,GAAAiB,MAAAjB,GACA,SAAAg1B,WAAA,+CAEA,IAAAt7B,EAAA8Q,mBAAA9H,OAAA1C,EACA,SAAAo1B,YAAA,gEAEA17B,GAAAgR,aAAA1K,KAGAvF,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,OACAijB,IAAApkB,EAAAka,eACAgN,MAAAlnB,EAAA0Y,iBACAuO,OAAAjnB,EAAAma,kBACAkK,KAAArkB,EAAAyY,oBAIA1X,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,OACAijB,IAAApkB,EAAAia,eACAiN,MAAAlnB,EAAA2Y,iBACAsO,OAAAjnB,EAAAoa,kBACAiK,KAAArkB,EAAA4Y,oBAIA7X,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,MAAAnB,GAAAmnB,wBAGApmB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA4nB,iBAAA,MAGA7mB,OAAAC,eAAAhB,EAAA4C,KAAA,iBACAzB,IAAA,WACA,MAAAnB,GAAA4nB,qBAGA7mB,OAAAC,eAAAhB,EAAA4C,KAAA,iBACAzB,IAAA,WACA,MAAAnB,GAAA8Q,mBAAAmc,IAAA,SAAA4H,GACA,MAAAA,QAIA9zB,OAAAC,eAAAhB,EAAA4C,KAAA,sBACAzB,IAAA,WACA,MAAAnB,GAAA6zB,oBAEAyG,IAAA,SAAAtqB,GACAhQ,EAAA6zB,mBAAA7jB,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,sBACAzB,IAAA,WACA,MAAAnB,GAAAoT,oBAEAknB,IAAA,SAAAtqB,GACAhQ,EAAAoT,mBAAApD,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,OACAzB,IAAA,WACA,MAAAnB,GAAAyK,OAGA1J,OAAAC,eAAAhB,EAAA4C,KAAA,UACAzB,IAAA,WACA,MAAAnB,GAAA4yB,aAEA0H,IAAA,SAAAtqB,GACA,OAAAlO,KAAAkO,EAKA,MAHAhQ,GAAAkH,WAAApF,GACA9B,EAAAk1B,eAAApzB,OACA9B,GAAA2G,cAAA,iBAAyDO,WAAApF,IAGzD,KAAA4B,MAAAspB,QAAAhd,IAAA,gBAAAA,GAAA,GACA,SAAA/I,OAAA,sCAEA,QAAAnF,KAAAkO,EAAA,GAAApP,KACA,SAAAqG,OAAA,sEAEAjH,GAAAkH,OAAA8I,EAAAid,IAAA,SAAApc,EAAA+G,GAOA,MANA/G,GAAA9E,MAAA8E,EAAA9E,OAAA/L,EAAA4G,MAAAwK,UACAP,EAAAxL,OAAAwL,EAAAxL,QAAArF,EAAAqF,OAAAwL,EAAA5H,MACA4H,EAAA5H,KAAA4H,EAAA5H,MAAA,SACA4H,EAAA+G,QACA/G,EAAAgC,YAAA+E,EACA/G,EAAA9C,UAAA,EACA8C,IAEA7Q,EAAAk1B,eAAApzB,GACA9B,EAAAs1B,mBACAt1B,EAAAm1B,qBACAn1B,EAAA22B,wBACA32B,EAAA62B,gBAAA,gBAAA72B,GAAA62B,eAAA9B,YACA/0B,EAAAkH,OAAA9D,QAAA,SAAAyN,EAAA+G,GACA5X,EAAA62B,oBAAA/0B,KAAA9B,EAAA62B,eAAA9B,WAAAlkB,EAAAjQ,QACAiQ,EAAAqT,QAAAlkB,EAAA62B,eAAA9B,WAAAlkB,EAAAjQ,SAIAZ,EAAA0G,QAAA,GACA1G,EAAA2G,cAAA,iBAAqDO,OAAAlH,EAAAkH,YAUrDlH,EAAA4C,KAAA+4B,SAAA,WACA,MAAA56B,QAAA4D,KAAA3E,EAAAs0B,UAEAt0B,EAAAs0B,QAAA,8CAAyD,SAAAtvB,EAAA42B,GACzD57B,EAAAs0B,QAAA,yCAAwDxtB,KAAAC,MAAA/B,GAAA,SAAAA,EAAAkC,GACxD,MAAA00B,GAAA52B,EAAAkC,MAGAlH,EAAAs0B,QAAA,+CAAAtvB,EAAA42B,GACA57B,EAAAs0B,QAAA,iCAAAxtB,KAAAC,MAAA/B,GAAA,SAAAA,EAAAkC,GACA,MAAA00B,GAAA52B,EAAAkC,MAGAlH,EAAAs0B,QAAA,yCAAoD,SAAAtvB,EAAA42B,GACpD,GAAAhyB,GAAAI,EAAAzJ,EAAAI,EAAAwJ,CAKA,KAHAA,EAAA,EACAxJ,KACAJ,EAAAyE,EAAAgE,OACAY,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9BO,EAAAW,KAAAX,MAAAnF,EAAA4E,GAAAZ,OAEA,KAAAY,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9B,IAAAI,EAAA,EAA2BA,EAAAG,EAASH,GAAA,EACpCrJ,EAAAiJ,GAAAI,GAAAhF,EAAA4E,GAAAI,EAGA,OAAA4xB,GAAAj7B,EAAAX,EAAAk5B,kBAAAl0B,KAEAhF,EAAAs0B,QAAA,0CAAAtvB,EAAA42B,GACA,MAAAA,GAAA52B,IAEAhF,EAAA4C,KAAA0xB,QAAAt0B,EAAAs0B,QAGAt0B,EAAA67B,IAAA,SAAA72B,EAAA42B,GACA,IAAA57B,EAAA4C,KAAA0xB,QAAAt0B,EAAAk0B,UACA,SAAAjtB,OAAA,yBAEAjH,GAAA4C,KAAA0xB,QAAAt0B,EAAAk0B,UAAAlvB,EAAA,SAAAA,EAAAkC,GACAxD,MAAAspB,QAAA9lB,KACAlH,EAAAkH,UAGAlH,EAAAgC,WAAA85B,qBACA97B,EAAAkH,OAAAlH,EAAAk5B,kBAAAl0B,IAEAhF,EAAAkH,SACAlH,EAAAk1B,WAAAl1B,EAAAk5B,kBAAAl0B,IAEAhF,EAAA4yB,aACA5yB,EAAAm1B,qBAGAn1B,EAAA81B,aAAA9wB,EAEAhF,EAAAgF,KAAAhF,EAAA81B,aAEA91B,EAAAkH,QAAA,IAAAlH,EAAAgF,KAAAgE,SACAhJ,EAAAk1B,aAAwCt0B,KAAA,MAExCZ,EAAAisB,kBAAA,kBACAjsB,EAAAk1B,aAAAl1B,EAAAkH,QAAAlH,EAAAgC,WAAA85B,sBACA97B,EAAAm1B,qBACAn1B,EAAA2G,cAAA,iBAAyDO,OAAAlH,EAAAk1B,iBAIzDn0B,OAAAC,eAAAhB,EAAA4C,KAAA,QACAzB,IAAA,WACA,MAAAnB,GAAAgF,MAEAs1B,IAAA,SAAAtqB,GACAhQ,EAAA67B,IAAA7rB,EAAA,SAAArP,GACAX,EAAAy0B,WACAz0B,EAAAs1B,mBACAt1B,EAAAgC,WAAA+5B,mBAAA/7B,EAAAgF,KAAAgE,OAAA,OACAlH,KAAA9B,EAAA62B,gBACA72B,EAAAksB,WAGAlsB,EAAAisB,kBAAA,iBACAjsB,EAAAgC,WAAAg6B,oBACAh8B,EAAAyZ,kBAEAzZ,EAAA22B,wBACA32B,EAAA2G,cAAA,eAAuD3B,KAAAhF,EAAAgF,OACvDhF,EAAA0G,QAAA,QAIA1G,EAAA+3B,cAAA,WASA,QAAAkE,GAAAjsB,EAAAksB,GACA,GAAA30B,MAAAyI,GACA,SAAA/I,OAAA,mCAEA+I,GAAA,IACAA,EAAA,GAEAA,EAAAuO,IACAvO,EAAAuO,GAEAA,EAAA,IACAvO,EAAA,GAEA2E,EAAA3E,EACAksB,GACAl8B,EAAA+kB,SAGA,QAAAoX,GAAAnsB,EAAAksB,GACA,GAAA30B,MAAAyI,GACA,SAAA/I,OAAA,oCAEA+I,GAAA,IACAA,EAAA,GAEAA,EAAAmO,IACAnO,EAAAmO,GAEAA,EAAA,IACAnO,EAAA,GAEA6E,EAAA7E,EACAksB,GACAl8B,EAAA+kB,SAzCA,GAAAqX,GAAA,EACAC,EAAA,EACA1nB,EAAA,EACAE,EAAA,EACA0J,EAAA,EACAJ,EAAA,EACAG,EAAA,GACAJ,EAAA,EAqCAle,GAAA4U,UAAAoC,SAAA,WACA,mBAAyBmH,EACzB,eAAAI,EACA,aAAA1J,EACA,YAAAF,EAAA,KAEA3U,EAAA4U,UAAA4X,SAAA,SAAA5iB,EAAAI,EAAAsyB,GACAH,EAAAvyB,GAAA,GACAqyB,EAAAjyB,EAAAsyB,IAEAv7B,OAAAC,eAAAhB,EAAA4U,UAAA,mBACAzT,IAAA,WACA,MAAAmd,IAEAgc,IAAA,SAAAtqB,GACAsO,EAAAtO,KAGAjP,OAAAC,eAAAhB,EAAA4U,UAAA,kBACAzT,IAAA,WACA,MAAA+c,IAEAoc,IAAA,SAAAtqB,GACAkO,EAAAlO,KAGAjP,OAAAC,eAAAhB,EAAA4U,UAAA,UACAzT,IAAA,WACA,MAAAi7B,IAEA9B,IAAA,SAAAtqB,GACAuO,EAAAvO,IACA2E,EAAA,GAEAynB,EAAApsB,KAGAjP,OAAAC,eAAAhB,EAAA4U,UAAA,SACAzT,IAAA,WACA,MAAAk7B,IAEA/B,IAAA,SAAAtqB,GACAqsB,EAAArsB,KAGAjP,OAAAC,eAAAhB,EAAA4U,UAAA,aACAzT,IAAA,WACA,MAAAwT,IAEA2lB,IAAA2B,IAEAl7B,OAAAC,eAAAhB,EAAA4U,UAAA,cACAzT,IAAA,WACA,MAAA0T,IAEAylB,IAAA6B,IAEAp7B,OAAAC,eAAAhB,EAAA4U,UAAA,gBACAzT,IAAA,WACA,MAAAod,IAEA+b,IAAA,SAAAtqB,GACA2E,EAAA3E,IACA2E,EAAA7J,KAAAX,IAAA6F,EAAA,IAEAuO,EAAA6d,IACAznB,EAAA,GAEA4J,EAAAvO,KAGAjP,OAAAC,eAAAhB,EAAA4U,UAAA,eACAzT,IAAA,WACA,MAAAgd,IAEAmc,IAAA,SAAAtqB,GACA6E,EAAA7E,IACA6E,EAAA/J,KAAAX,IAAA6F,EAAA,IAEAmO,EAAAnO,QAMC9N,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IR2/GK,SAAUhC,EAAQD,EAASO,GSlqJjC,GAAAyB,GAAAC,CAEAD,UAmjBCE,MAnjBDD,EAAA,WACA,YACA,iBAAA7B,GAEA,QAAAu8B,GAAAC,GACAx8B,EAAAy8B,kBAAAD,EAAA,qCAAAx8B,EAAA8R,OAAA,eACA0qB,EAAAn0B,iBAAA,uBACArI,EAAAy8B,kBAAAD,EAAA,6CAEAA,EAAAn0B,iBAAA,sBACArI,EAAAy8B,kBAAAD,EAAA,uCAGA,QAAAE,GAAAroB,EAAAjF,EAAAwe,EAAA+O,GASA,QAAAC,KACAhP,EAAAxqB,QAAA,SAAAgC,GAGA,QAAAy3B,GAAA71B,GACAA,EAAA81B,gBAAAC,GACA33B,EAAAggB,YAAA2X,YAAA/1B,EAAA81B,eACAE,IAAAh2B,EAAA81B,eACAN,IAAAx1B,EAAA81B,eACA13B,EAAAggB,YAAA2X,UAAAE,SAAAj2B,EAAA81B,iBAEA13B,EAAAggB,YAAAkR,UACA4G,EAAA/a,OAAA+a,EAAAr4B,QAAAO,EAAAggB,aAAA,GACAhgB,EAAAggB,gBAAAtjB,GACA06B,EAAAxa,oBAAA,WAAA6a,GACAE,EAAA/a,oBAAA,WAAA6a,GACAL,EAAAW,aAAA,mBACAX,EAAAW,aAAA,gBAEA,QAAAC,GAAAxP,GAEA,SAAA4O,EAAAa,aAAA,YACA,MAAAb,EAAAa,aAAA,eADA,CAIA,GAAAC,GAAAd,EAAAlN,uBACAgO,IACAjZ,KAAAiZ,EAAAjZ,KAAArkB,EAAA4G,MAAA22B,2BAAAR,EAAAhoB,YACAqP,IAAAkZ,EAAAlZ,IAAApkB,EAAA4G,MAAA42B,0BACAvW,OAAAqW,EAAArW,OACAC,MAAAoW,EAAApW,OAEA9hB,EAAAggB,YAAAsX,EAAAroB,EAAAipB,EAAA1P,EAAAhrB,GACA45B,EAAAW,aAAA,mBACAX,EAAAn0B,iBAAA,WAAAw0B,GACAE,EAAA10B,iBAAA,WAAAw0B,GACAK,EAAAp1B,KAAA1C,EAAAggB,cAEA,QAAAqY,KACA,GAAAn9B,EACA,UAAAk8B,EAAAa,aAAA,gBAIA,GADAb,EAAAW,aAAA,eACA,kBAAA/3B,GAAAwoB,MAOA,gBAHA9rB,MAHAxB,EAAA8E,EAAAwoB,MAAA1rB,MAAAU,GAAA,SAAAgrB,GACAwP,EAAAxP,QAEAlqB,MAAAspB,QAAA1sB,IACA88B,EAAA98B,GAIA88B,GAAAh4B,EAAAwoB,QAnDA,GACAoP,GADAR,EAAA15B,SAAAC,cAAA,QAqDA,SAAAqC,GACA,QAAAs4B,GAAAC,GACA,UAAAA,EAAA,CACA,qBAAAA,GACA,MAAAD,GAAAC,EAAAtpB,GAEA,oBAAAspB,GAEA,WADAnB,GAAAv3B,YAAA04B,EAGApB,GAAAC,GACAA,EAAAtzB,UAAAy0B,GAGAD,EAAAt4B,EAAAqQ,OACArQ,EAAAo3B,wBACAp3B,EAAAwoB,OAAAxoB,EAAAwoB,MAAA5kB,OAAA,qBAAA5D,GAAAwoB,SACAoP,EAAAl6B,SAAAC,cAAA,OACA/C,EAAAy8B,kBAAAO,EAAA,uCACAA,EAAA9zB,UAAAlJ,EAAA4G,MAAAg3B,0BACApB,EAAAv3B,YAAA+3B,GACAR,EAAAn0B,iBAAA,YAAAo1B,GACAjB,EAAAn0B,iBAAA,sBACAm0B,EAAAW,aAAA,kBAGA/3B,EAAAsiB,OACA8U,EAAAn0B,iBAAA,iBAAAgM,GACAjP,EAAAsiB,MAAAxlB,MAAAlC,GAAAqU,OAIAjP,GACA23B,EAAA93B,YAAAu3B,KAGA,QAAAqB,GAAA3b,GACA0L,EAAA1L,GAAAsa,qBAAA71B,cAAA,GAAAm3B,OAAA,UAEA,QAAAC,KACAhB,EAAApoB,UAAA,EACA3U,EAAAg+B,cAAA/4B,YAAAg5B,GACiBA,EAAAx7B,YACjBw7B,EAAAx7B,WAAA8zB,YAAA0H,GAEAlB,EAAApoB,WAAAooB,EAAAxe,aAAAwe,EAAA/nB,cAAAkpB,EAAAz7B,WACAy7B,EAAAz7B,WAAA8zB,YAAA2H,GACiBnB,EAAAxe,aAAAwe,EAAA/nB,aAAA,KACjB+nB,EAAApoB,WAAAooB,EAAAxe,aAAAwe,EAAA/nB,eACAhV,EAAAg+B,cAAA/4B,YAAAi5B,GAGA,QAAAC,GAAAl1B,GACA,eAAA2G,KACA,GAAAiI,GAAA7X,EAAAgC,WAAAo8B,wBACA,QAAAn1B,GAAA,IAAA8zB,EAAApoB,WACA,SAAA1L,GAAA8zB,EAAApoB,YAAAooB,EAAAxe,eACAwe,EAAApoB,WAAA,OAAA1L,GAAA4O,IACAwmB,EAAAhV,WAAAzZ,EAAA5P,EAAAgC,WAAAs8B,yBAAAr1B,KAGA,QAAAs1B,GAAAt1B,GACA,kBACAid,aAAAmY,IA9HA,GAMAhP,GANA0N,EAAAj6B,SAAAC,cAAA,OACAk7B,EAAAn7B,SAAAC,cAAA,OACAm7B,EAAAp7B,SAAAC,cAAA,OACAm6B,KACAsB,GAAA,EACA57B,IAEA,KAAAc,MAAAspB,QAAAY,GAAwC,SAAA3mB,OAAA,sCA+OxC,OAzCArE,GAAA4S,WAAAxV,EAAA4C,KACAA,EAAA+5B,oBACA/5B,EAAAm6B,YA9EA,WACA,GAAA0B,MACA98B,EAAA3B,EAAA0+B,aAAA1+B,EAAAkG,YACApE,KAAA68B,IACAA,EAAA3+B,EAAA4G,MAAAg4B,mBAEAhC,IACA58B,EAAAy8B,kBAAAM,EAAA,gCAAA/8B,EAAA8R,OAAA,eACA2sB,EAAA70B,EAAAwF,EAAAiV,KAAA1iB,EAAA0iB,KACAoa,EAAAz0B,EAAAoF,EAAAgV,IAAAziB,EAAAyiB,IACAqa,EAAA3yB,OAAA,EACA6yB,GAAA,EACA5B,EAAAn2B,MAAAi4B,SAAA,WACAZ,EAAAr3B,MAAAwD,MAAApK,EAAA4G,MAAAk4B,sBACAZ,EAAAt3B,MAAAwD,MAAApK,EAAA4G,MAAAk4B,uBACAb,EAAAC,GAAA96B,QAAA,SAAAmG,GACAA,EAAA3C,MAAAya,UAAA,SACA9X,EAAA3C,MAAAi4B,SAAA,WACAt1B,EAAA3C,MAAAm4B,OAAAJ,EAAA,IAEA5B,EAAAn2B,MAAAm4B,OAAAJ,EACAhC,KAAAqC,gBACAjC,EAAAn2B,MAAAq4B,UAAAp7B,OAAAq7B,YAAAT,EAAAz0B,EAAAhK,EAAA4G,MAAAu4B,yBAAA,KACApC,EAAAn2B,MAAAw4B,SAAAhwB,EAAArD,MAAA,KACA0yB,EAAAz0B,GAAAoF,EAAAtD,QAEA9L,EAAA8R,SACAirB,EAAAn2B,MAAAmF,MAAAqD,EAAArD,MAAA,MAEAgxB,EAAAn2B,MAAAyd,KAAAoa,EAAA70B,EAAA,KACAmzB,EAAAn2B,MAAAwd,IAAAqa,EAAAz0B,EAAA,KACA+yB,EAAA10B,iBAAA,SAAA01B,GACAhB,EAAA10B,iBAAA,iBAAArB,GACAhH,EAAAmhB,WACA4b,EAAApoB,WAAA3N,EAAAqlB,OACA0Q,EAAAloB,YAAA7N,EAAAolB,QAEA2R,MAEAE,EAAA/0B,UAAAlJ,EAAA4G,MAAAy4B,uBACAnB,EAAAh1B,UAAAlJ,EAAA4G,MAAA04B,yBACAvC,EAAA93B,YAAAg5B,GACAn7B,SAAA4B,KAAAO,YAAAi5B,GACAp7B,SAAA4B,KAAAO,YAAA83B,GACA1N,EAAA0N,EAAAzN,wBAEAD,EAAApI,OAAApjB,OAAAq7B,cACAvC,KAAAqC,gBACAP,EAAAz0B,GAAAqlB,EAAApI,OAAAjnB,EAAA4G,MAAA24B,wBAAA17B,OAAAq7B,aAEAT,EAAAz0B,EAAA,IAAoCy0B,EAAAz0B,EAAA,GACpC+yB,EAAA/nB,aAAAnR,OAAAq7B,YAAAl/B,EAAA4G,MAAA24B,0BACAxC,EAAAn2B,MAAAkF,OAAAjI,OAAAq7B,YAAAl/B,EAAA4G,MAAA24B,wBAAA,KACAd,EAAAz0B,GAAAhK,EAAA4G,MAAA24B,0BAGAlQ,EAAAnI,MAAArjB,OAAA27B,aACAf,EAAA70B,GAAAylB,EAAAnI,MAAArjB,OAAA27B,WAAAx/B,EAAA4G,MAAA24B,yBAEAd,EAAA70B,EAAA,IAAgC60B,EAAA70B,EAAA,GAChC60B,EAAAz0B,EAAA,IAAgCy0B,EAAAz0B,EAAA,GAChC+yB,EAAAn2B,MAAAyd,KAAAoa,EAAA70B,EAAA,KACAmzB,EAAAn2B,MAAAwd,IAAAqa,EAAAz0B,EAAA,KACAqlB,EAAA0N,EAAAzN,wBACA2O,EAAAr3B,MAAAwd,IAAAiL,EAAAjL,IAAA,KACA8Z,EAAAt3B,MAAAwd,IAAAiL,EAAAjL,IAAAiL,EAAAvjB,OAAAoyB,EAAAlpB,aAAA,KACAipB,EAAAr3B,MAAAyd,KAAAgL,EAAAhL,KAAA,KACA6Z,EAAAt3B,MAAAyd,KAAAgL,EAAAhL,KAAA,KACA6Z,EAAAt3B,MAAAmF,MAAAgxB,EAAAhoB,YAAA,KACAkpB,EAAAr3B,MAAAmF,MAAAgxB,EAAAhoB,YAAA,KACAmpB,EAAA71B,iBAAA,YAAA81B,EAAA,SACAD,EAAA71B,iBAAA,WAAAk2B,EAAA,SACAN,EAAA51B,iBAAA,YAAA81B,EAAA,OACAF,EAAA51B,iBAAA,WAAAk2B,EAAA,OACAR,OAMAn7B,EAAAi7B,aACAj7B,EAAAysB,OACAzsB,EAAAgrB,QACAhrB,EAAAq7B,UACAr7B,EAAAs7B,YACAt7B,EAAA0zB,QAAA,WACApQ,aAAAmY,GACAnB,EAAA95B,QAAA,SAAA1C,GACAA,EAAA41B,aAEA4H,EAAAD,EAAAlB,GAAA35B,QAAA,SAAAmG,GACAA,EAAA9G,YAAwC8G,EAAA9G,WAAA8zB,YAAAhtB,MAGxCxI,OAAAC,eAAA4B,EAAA,iBACAzB,IAAA,WACA,MAAAq9B,IAEAlE,IAAA,SAAAtqB,GACA,mBAAAA,IAAAzI,MAAAyI,IAAAyvB,SAAAzvB,IACA,SAAA/I,OAAA,qDAEAu3B,GAAAxuB,EACAwuB,EAAA5Q,EAAA5kB,OAAA,IACAw1B,EAAA5Q,EAAA5kB,OAAA,GAEAw1B,EAAA,IACAA,EAAA,GAEA5Q,EAAAxqB,QAAA,SAAAgC,EAAAwS,GACA,GAAAA,IAAA4mB,EACA,MAAAx+B,GAAAy8B,kBAAAr3B,EAAAo3B,qBAAA,0CAEAx8B,GAAAy8B,kBAAAr3B,EAAAo3B,qBAAA,0CAIA55B,EAEA,QAAA88B,GAAA14B,GAQA,QAAA24B,KACAC,EAAAh5B,MAAAi5B,WAAA7/B,EAAA4G,MAAAk5B,6BACAF,EAAAh5B,MAAAwD,MAAApK,EAAA4G,MAAAm5B,wBACA//B,EAAAg7B,qBACA4E,EAAAh5B,MAAAi5B,WAAA7/B,EAAA4G,MAAAo5B,qCACAJ,EAAAh5B,MAAAwD,MAAApK,EAAA4G,MAAAq5B,iCAGA,QAAAC,KACA,GAAAC,GAAA,CACAC,MACApgC,EAAAgF,KAAA5B,QAAA,SAAAkR,GACA,GAAAtE,GAAAsE,EAAAtN,EAAA0E,KAAAuH,OAAArS,KACAw/B,GAAApwB,IAAAmwB,EAAAngC,EAAAgC,WAAAq+B,uBACAF,GAAA,EACAC,EAAApwB,IACAyF,MAAAzV,EAAAkU,WAAAlN,EAAA0E,KAAAuH,OAAAhK,MAAA,WAAgFyC,MAAQsE,WACxF0X,MAAA,SAAA1gB,GACA44B,EAAA5vB,QACAhJ,EAAA6a,kBACA+d,EAAAj5B,cAAA,GAAAm3B,OAAA,UACA99B,EAAAsgC,2BAKAF,EAAAr/B,OAAA4D,KAAAy7B,GAAAnT,IAAA,SAAA3L,GACA,MAAA8e,GAAA9e,KAGA,QAAAif,GAAAlsB,GACAA,IAAA,iBAAAxP,QAAAwP,EAAAoX,WACAyU,IACAM,EAAAZ,EAAAtQ,wBACAmR,IACAA,EAAAnK,UACAmK,MAAA3+B,IAEA2+B,EAAA/D,EAAA11B,GACAqd,KAAAmc,EAAAnc,KACAD,IAAAoc,EAAApc,IACA8C,MAAAsZ,EAAAtZ,MACAD,OAAAuZ,EAAAvZ,OACAnb,OAAA00B,EAAA10B,OACAC,MAAAy0B,EAAAz0B,OACiBq0B,GAAsBpB,eAAA,IACvCyB,EAAAjC,cAAA,GArDA,GAKA4B,GACAI,EANAE,EAAA59B,SAAAC,cAAA,OACA49B,EAAA79B,SAAAC,cAAA,OACA69B,EAAA99B,SAAAC,cAAA,UACA68B,EAAA98B,SAAAC,cAAA,SACA3B,EAAA4F,EAAA0E,MAAA1E,EAAA0E,KAAAuH,OAAAjM,EAAA0E,KAAAuH,OAAAwC,OAAAzO,EAAA0E,KAAAuH,OAAArS,KAAA,EAmDAZ,GAAAy8B,kBAAAkE,EAAA,sCACA3gC,EAAAy8B,kBAAAmE,EAAA,8CACA5gC,EAAAy8B,kBAAAmD,EAAA,6CACAD,IACAC,EAAAiB,QAAA7gC,EAAAsgC,oBACAV,EAAAv3B,iBAAA,mBAAArB,GAEA,KAAAA,EAAAykB,UACAgV,EAAAjC,eAAA,GAGA,KAAAx3B,EAAAykB,UACAgV,EAAAjC,eAAA,GAGA,KAAAx3B,EAAAykB,UACAgV,EAAA5C,WAAA4C,EAAAjC,eACAx+B,EAAA0xB,sBAGA,IAAA1qB,EAAAykB,UACAgV,EAAA5C,WAAA4C,EAAAjC,eACAx3B,EAAAob,kBAGA,KAAApb,EAAAykB,SACAzrB,EAAA0xB,uBAGAkO,EAAAv3B,iBAAA,mBACArI,EAAAm5B,UAAAnyB,EAAA0E,KAAAuH,OAAArS,KAAAg/B,EAAA5vB,SAEA4vB,EAAAv3B,iBAAA,QAAAk4B,IACA,2CAAAn9B,QAAA,SAAAua,GACAiiB,EAAAv3B,iBAAAsV,EAAAgiB,KAEAC,EAAA5vB,MAAAhJ,EAAA0E,KAAAuH,OAAAjT,EAAAiX,cAAAjQ,EAAA0E,KAAAuH,OAAArS,OAAA,MACA+/B,EAAAz3B,UAAAlJ,EAAAgC,WAAA8+B,iBAAAr7B,QAAA,MAAArE,GACAw/B,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAAzgC,GAAAsgC,qBAEAC,MAEAK,EAAA13B,UAAAlJ,EAAA4G,MAAAm6B,wBACAL,EAAAr4B,iBAAA,iBAAArB,GACA,MAAAA,GAAA6a,oBAEA6e,EAAAz7B,YAAA07B,GACAD,EAAAz7B,YAAA26B,GACAc,EAAAz7B,YAAA27B,GACA55B,EAAA4mB,MAAA9lB,MACA2N,MAAAirB,IAEA3/B,OAAA4D,KAAA3E,EAAAiX,eAAAjO,QACAjI,OAAA4D,KAAA3E,EAAAiX,eAAA7T,QAAA,SAAA49B,GACA,GAAAj3B,GAAA/J,EAAA82B,gBAAAkK,EACAh6B,GAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAi/B,uBAAAx7B,QAAA,MAAAsE,EAAA0L,OAAA1L,EAAAnJ,MACA8mB,MAAA,SAAA1gB,GACAA,EAAAob,iBACApiB,EAAAm5B,UAAA6H,EAAA,IACAhhC,EAAAorB,aAAAC,aAMA,QAAA6V,GAAAl6B,GACA,GAAAm6B,KAAAn6B,EAAA0E,KAAA01B,cAAAp6B,EAAA0E,KAAAwJ,iBACAlO,EAAA0E,KAAA21B,aAAAr6B,EAAA0E,KAAA4H,UAAAtM,EAAA0E,KAAAiH,cACA3L,EAAA0E,KAAAuH,MACAjT,GAAAgC,WAAAs/B,YAAAH,GACAzB,EAAA14B,GAEAhH,EAAAgC,WAAAu/B,UACAvhC,EAAA4S,WAAA2M,OAAA,SAAA7d,EAAA4I,GACA,MAAA5I,GAAA4I,EAAAtB,QACqB,MACrBhC,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAw/B,SACA9Z,MAAA,WACA5kB,SAAA2+B,YAAA,QACAzhC,EAAA0xB,qBACA1xB,EAAAorB,aAAAC,WAIArrB,EAAAgC,WAAA0/B,WAAA1hC,EAAA2hC,eACA36B,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAA4/B,UACAla,MAAA,WACA1nB,EAAA0tB,MAAA1tB,EAAA2hC,cAAA36B,EAAA0E,KAAAmH,YAAA7L,EAAA0E,KAAAqC,UACA/N,EAAAwL,UAIAxL,EAAAgC,WAAA6/B,qBACA76B,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAA8/B,mBACAlU,MAAA,WACA,GAAAjtB,KAqBA,OApBAX,GAAA4yB,YAAAxvB,QAAA,SAAAyN,GACA,QAAAkxB,GAAA/6B,GACA6J,EAAAqT,QAAArT,EAAAqT,OACAld,EAAAob,iBACApiB,EAAA6hB,gBAAA7a,GACAhH,EAAA0xB,qBACA1xB,EAAA0G,QAAA,GACA1G,EAAA6oB,iBAEA,GAAAtf,GAAAzG,SAAAC,cAAA,MACAw5B,GAAAhzB,GACAA,EAAAlB,iBAAA,aAAA05B,GACAx4B,EAAAlB,iBAAA,QAAA05B,GACAx4B,EAAAL,WAAA2H,EAAAqT,OAAAlkB,EAAAgC,WAAAggC,yBACAhiC,EAAAgC,WAAAigC,4BACApxB,EAAA4E,OAAA5E,EAAAjQ,MACAD,EAAAmH,MACA2N,MAAAlM,MAGA5I,KAGAqG,EAAA0E,MAAA1E,EAAA0E,KAAAuH,QACAjM,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAkgC,eACAz8B,QAAA,OAAAuB,EAAA0E,KAAAuH,OAAAwC,OAAAzO,EAAA0E,KAAAuH,OAAArS,MACA8mB,MAAA,SAAArT,GACArN,EAAA0E,KAAAuH,OAAAiR,QAAA,EACA7P,EAAA+N,iBACApiB,EAAA6hB,gBAAAxN,GACArU,EAAA0xB,qBACA1xB,EAAA6oB,iBACAQ,WAAA,WAAoDrpB,EAAA0G,QAAA,IAAqB,QAKzE1G,EAAAgC,WAAAwU,gBAAAxW,EAAAgC,WAAAmgC,0BACAphC,OAAA4D,KAAA3E,EAAAmR,MAAA6C,MAAAhL,OAAA,GACAjI,OAAA4D,KAAA3E,EAAAmR,MAAAD,SAAAlI,OAAA,IACAhC,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAogC,wBACA1a,MAAA,SAAA1gB,GACAA,EAAAob,iBACApiB,EAAAmR,MAAA6C,QACAhU,EAAAmR,MAAAD,WACAlR,EAAAyZ,kBACAzZ,EAAAm1B,qBACAn1B,EAAA62B,mBAAA/0B,GACA9B,EAAA2G,cAAA,gBAA4D07B,YAAAriC,EAAA4G,MAAAwK,YAC5DpR,EAAA2G,cAAA,aAAyDmO,WAAA9U,EAAA4G,MAAAkO,aACzD9U,EAAA6oB,iBACA7oB,EAAA0G,QAAA,GACA1G,EAAA0xB,qBACA1xB,EAAAorB,aAAAC,WAIArrB,EAAAgC,WAAAsgC,cAAAtiC,EAAAgC,WAAAugC,mBAAApB,IACAn6B,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAwgC,yBAAA/8B,QAAA,KAAAuB,EAAA0E,KAAAuH,OAAAwC,OAAAzO,EAAA0E,KAAAuH,OAAArS,MACA8mB,MAAA,SAAArT,GACAA,EAAA+N,iBACApiB,EAAA+a,MAAA/T,EAAA0E,KAAAuH,OAAArS,KAAA,OACAZ,EAAAorB,aAAAC,WAGArkB,EAAA4mB,MAAA9lB,MACA2N,MAAAzV,EAAAgC,WAAAygC,0BAAAh9B,QAAA,KAAAuB,EAAA0E,KAAAuH,OAAAwC,OAAAzO,EAAA0E,KAAAuH,OAAArS,MACA8mB,MAAA,SAAArT,GACAA,EAAA+N,iBACApiB,EAAA+a,MAAA/T,EAAA0E,KAAAuH,OAAArS,KAAA,QACAZ,EAAA0xB,qBACA1xB,EAAAorB,aAAAC,YA3eA,GAAAsT,GAAAN,EAAAoC,CAgfAzgC,GAAAsgC,oBAAA,WACAG,IACAA,EAAAnK,UACAmK,MAAA3+B,KAGA9B,EAAA0xB,mBAAA,WACA5uB,SAAAkf,oBAAA,QAAAhiB,EAAA0xB,oBACAiN,EAAA3+B,EAAA4G,MAAAg4B,kBACA5+B,EAAAsgC,sBACAtgC,EAAAolB,aACAplB,EAAAolB,YAAAkR,UAEAt2B,EAAAolB,gBAAAtjB,IAEA9B,EAAAgyB,iBAAA,SAAAhrB,EAAAme,GAIA,QAAAud,KACAj8B,sBAAA,WACA3D,SAAAuF,iBAAA,QAAArI,EAAA0xB,oBACA5uB,SAAAkf,oBAAA,UAAA0gB,KANA,GAAA1iC,EAAAmhB,UAAAna,EAAA6B,SAAA7I,EAAAkG,OAAA,CASA,GAAAy8B,GACA/U,KACAxe,EAAA+V,GAAAnlB,EAAAslB,YAAAte,GACAqN,GACA2R,YAAAhf,EACA0E,KAAA1L,EAAA+lB,UAAA3W,EAAAxF,EAAAwF,EAAApF,GACA4jB,QAEAvZ,GAAA3I,KAAAoI,QACAotB,EAAA7sB,GAEArU,EAAA2G,cAAA,cAAA0N,IAGAA,EAAA3I,KAAAoI,SACA9T,EAAAolB,aACAplB,EAAA0xB,qBAEAiR,GACAte,KAAAjV,EAAAxF,EAAAwF,EAAAigB,KAAAhL,KACArkB,EAAA4G,MAAAg8B,sBAAA5iC,EAAAuK,iBACA6Z,IAAAhV,EAAApF,EAAAoF,EAAAigB,KAAAjL,IACApkB,EAAA4G,MAAAi8B,qBAAA7iC,EAAAwK,gBACA0c,MAAA7S,EAAA3I,KAAAK,MAAAsI,EAAA3I,KAAA9B,EAAAwF,EAAAigB,KAAAhL,KACA4C,OAAA5S,EAAA3I,KAAAI,OAAAuI,EAAA3I,KAAA1B,EAAAoF,EAAAigB,KAAAjL,IACAtY,OAAAuI,EAAA3I,KAAAI,OACAC,MAAAsI,EAAA3I,KAAAK,OAEA/L,EAAA8R,SACA6wB,EAAAte,KAAArkB,EAAA4G,MAAAk8B,wBAAA,KACAH,EAAA52B,MAAA/L,EAAA+L,MAAA,EAAA/L,EAAA4G,MAAAk8B,wBAAA,MAEA9iC,EAAAolB,YAAAsX,EAAAroB,EAAAsuB,EAAA/U,GACA9qB,SAAAuF,iBAAA,UAAAq6B,GACA17B,EAAAob,sBAKClgB,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IT0qJK,SAAUhC,EAAQD,EAASO,GU/tKjC,GAAAyB,GAAAC,CAEAD,UAiiBCE,MAjiBDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA45B,gBAAA,SAAAmJ,GACA,GAAAC,GAAAhjC,EAAA6+B,SAAA7+B,EAAAyC,YACAwgC,EAAAjjC,EAAA6+B,SAAAkE,GACAphC,EAAA3B,EAAA0+B,aAAA1+B,EAAAkG,QACAg9B,GACAt5B,EAAA,EACAI,EAAA,EACAD,EAAA,EACAD,EAAA,GAEAq5B,GACAv5B,GAAAw5B,IACAp5B,GAAAo5B,IACAr5B,EAAAq5B,IACAt5B,EAAAs5B,KAEAhqB,EAAApZ,EAAAqZ,4BACArB,EAAAhY,EAAAsZ,uBASA,OARA0pB,GAAA5e,KAAAziB,EAAAyiB,IACA4e,EAAA3e,MAAA1iB,EAAA0iB,KACA4e,EAAA7e,KAAAziB,EAAAyiB,IACA6e,EAAA5e,MAAA1iB,EAAA0iB,KACA6e,EAAAn5B,EAAAi5B,EAAA5e,IAAA4e,EAAAl3B,OAAAi3B,EAAAtuB,UAAAzU,EAAA4G,MAAAkS,eACAoqB,EAAAp5B,EAAAk5B,EAAA3e,KAAA2e,EAAAj3B,MAAAg3B,EAAAruB,WAAA1U,EAAA4G,MAAAkS,eACAoqB,EAAAt5B,EAAAo5B,EAAA3e,MAAA,EAAA4e,EAAA5e,KAAArM,EACAkrB,EAAAl5B,EAAAg5B,EAAA5e,KAAA,EAAA6e,EAAA7e,IAAAhL,GAEAxP,EAAAs5B,EAAAt5B,EAAAu5B,EAAAv5B,EAAAs5B,EAAAt5B,EAAAu5B,EAAAv5B,EACAI,EAAAk5B,EAAAl5B,EAAAm5B,EAAAn5B,EAAAk5B,EAAAl5B,EAAAm5B,EAAAn5B,EACAD,EAAAm5B,EAAAn5B,EAAAo5B,EAAAp5B,EAAAm5B,EAAAn5B,EAAAo5B,EAAAp5B,EACAD,EAAAo5B,EAAAp5B,EAAAq5B,EAAAr5B,EAAAo5B,EAAAp5B,EAAAq5B,EAAAr5B,IAGA9J,EAAAi5B,YAAA,SAAA8J,GACA,GAAAG,GAAAljC,EAAA45B,gBAAAmJ,EACAG,GAAAp5B,EAAA,IAAiCo5B,EAAAp5B,EAAA,GACjCo5B,EAAAn5B,EAAA,IAAiCm5B,EAAAn5B,EAAA,GACjCg5B,EAAAn8B,MAAAmI,KAAA,QACAm0B,EAAAl5B,EAAA,MACAk5B,EAAAp5B,EAAA,MACAo5B,EAAAn5B,EAAA,MACAm5B,EAAAt5B,EAAA,OAcA5J,EAAA0+B,aAAA,SAAA13B,GAEA,IADA,GAAA4C,GAAA,EAAAI,EAAA,EACAhD,EAAAvE,YAAA,oBAAAuE,EAAA8B,UAAA9B,IAAAhH,EAAA4C,MACA,yBAAAoE,EAAArE,UACA,yBAAAqE,EAAArE,WACAiH,GAAA5C,EAAA6N,WACA7K,GAAAhD,EAAA2N,WAEA3N,IAAAvE,UAEA,QACA4hB,KAAAza,EAAA9G,SAAAugC,iBAAAxuB,WACAuP,IAAApa,EAAAlH,SAAAugC,iBAAA1uB,YAGA3U,EAAA8kB,gBAAA,WACA,GAAA9kB,EAAAqlB,OAAArlB,EAAAqlB,MAAAiM,SAAA,CACA,GAAAliB,GAAApP,EAAAkG,OAAAopB,wBACA3tB,EAAA3B,EAAA0+B,aAAA1+B,EAAA4C,MACAihB,EAAA,aAAA7jB,EAAA4G,MAAAqS,mBAAA,IACAqqB,EAAAtjC,EAAA4G,MAAA2N,gBAAAsP,EACAnY,EAAA1L,EAAAujC,sBAAAvjC,EAAAqlB,MAAAiM,SAAAze,YAAA7S,EAAAqlB,MAAAiM,SAAAvjB,YAC4BnE,GAAA,IAAAI,GAAA,IAAA8B,OAAA,EAAAC,MAAA,EAC5B,IAAA/L,EAAA8R,OAKA,MAJA9R,GAAAqlB,MAAAze,MAAAyd,KAAA,IACArkB,EAAAqlB,MAAAze,MAAAwd,IAAApkB,EAAA8L,OAAA9L,EAAA4G,MAAA48B,sBAAAF,EAAA,OACAtjC,EAAAqlB,MAAAze,MAAAkF,OAAA9L,EAAA4G,MAAA48B,sBAAA,UACAxjC,EAAAqlB,MAAAze,MAAAmF,MAAA/L,EAAA+L,MAAAu3B,EAAA,OAGAtjC,GAAAqlB,MAAAze,MAAAyd,KAAAjV,EAAAiV,KAAA3Y,EAAA9B,EAAA5J,EAAAuK,iBAAA5I,EAAA0iB,KAAA,KACArkB,EAAAqlB,MAAAze,MAAAwd,IAAAhV,EAAAgV,IAAA1Y,EAAA1B,EAAAhK,EAAA4G,MAAA2N,gBAAAvU,EAAAwK,gBAAA7I,EAAAyiB,IAAA,KACApkB,EAAAqlB,MAAAze,MAAAkF,OAAAJ,EAAAI,OAAAw3B,EAAA,KACAtjC,EAAAqlB,MAAAze,MAAAmF,MAAAL,EAAAK,MAAA/L,EAAA4G,MAAA68B,gBAAA,KACAzjC,EAAAi5B,YAAAj5B,EAAAqlB,SAGArlB,EAAA6+B,SAAA,SAAA73B,EAAA08B,GAEA,IADA,GAAA35B,GAAAD,EAAAF,EAAA,EAAAI,EAAA,EAAArI,EAAAqF,EACAA,EAAAiO,cAAA,oBAAAjO,EAAA8B,UACAc,GAAA5C,EAAA0N,WACA1K,GAAAhD,EAAAyN,UACA1K,EAAA/C,EAAAgO,aACAlL,EAAA9C,EAAA+N,YACA/N,IAAAiO,YAEA,OAAAyuB,IACwBrf,KAAAza,EAAAwa,IAAApa,EAAA8B,OAAA/B,EAAAgC,MAAAjC,IAExB9C,EAAArF,EACAA,EAAA3B,EAAA0+B,aAAA13B,IACoBqd,KAAAza,EAAAjI,EAAA0iB,KAAAD,IAAApa,EAAArI,EAAAyiB,IAAAtY,OAAA/B,EAAAgC,MAAAjC,KAEpB9J,EAAAslB,YAAA,SAAAte,GACA,GAAAqoB,GAAArvB,EAAAkG,OAAAopB,wBACAlgB,GACAxF,EAAA5C,EAAAuoB,QAAAF,EAAAhL,KACAra,EAAAhD,EAAAwoB,QAAAH,EAAAjL,IAMA,OAJApkB,GAAAwC,cACA4M,EAAAxF,GAAA5J,EAAAuK,iBACA6E,EAAApF,GAAAhK,EAAAwK,kBAGAZ,EAAAwF,EAAAxF,EACAI,EAAAoF,EAAApF,EACAqlB,SAUArvB,EAAA6nB,QAAA,SAAA8b,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAAj4B,GAAA1L,EAAAqlB,MAAAiM,SACAtnB,EAAA0B,EAAAqC,QAIA,IAAA/N,EAAA2G,cAAA,iBACA+E,OACAm4B,SAAA7jC,EAAAqlB,MAAArV,MACA8zB,SAAAp4B,EAAAsE,MACA2zB,MAAAC,EACAve,MAAArlB,EAAAqlB,QACqB,QACrB,IAAArlB,EAAAqlB,MAAArV,QAAAtE,EAAAsE,QAAA2zB,EAAA,CAQA,GAPA3jC,EAAAy0B,QAAAzqB,GAAAhK,EAAAy0B,QAAAzqB,OACAhK,EAAAy0B,QAAAzqB,GAAA0B,EAAAuH,OAAArS,MAAAZ,EAAAqlB,MAAArV,MACAtE,EAAA1G,OACAhF,EAAAgF,KAAA0G,EAAAqC,aACArC,EAAA1G,KAAAhF,EAAAgF,KAAA0G,EAAAqC,WAEArC,EAAA1G,KAAA0G,EAAAuH,OAAArS,MAAAZ,EAAAqlB,MAAArV,MACAhG,IAAAhK,EAAAgF,KAAAgE,OAAA,CACA,GAAAhJ,EAAA2G,cAAA,UACAqJ,MAAAhQ,EAAAqlB,MAAArV,MACAqlB,aAAA3pB,EAAAsE,MACA+zB,QAAAJ,EACAj4B,OACA2Z,MAAArlB,EAAAqlB,QAC6B,QAC7BrlB,GAAAw0B,KAAA,EACAx0B,EAAAw5B,OAAA9tB,EAAA1G,MACAhF,EAAAs1B,mBAEAt1B,EAAAwL,MAAA,GAWA,MATA1I,UAAA4B,KAAA6xB,YAAAv2B,EAAAqlB,OACArlB,EAAA4C,KAAAyoB,QACArrB,EAAA2G,cAAA,WACA+E,OACAsE,MAAAhQ,EAAAqlB,MAAArV,MACA+zB,QAAAJ,EACAte,MAAArlB,EAAAqlB,QAEArlB,EAAAqlB,UAAAvjB,IACA,GAUA9B,EAAA0rB,YAAA,SAAA9hB,EAAAI,GACA,GAAAhK,EAAAgC,WAAAgiC,SAAA,CACAhkC,EAAAqlB,OACArlB,EAAA6nB,SAEA,IAEAoc,GACAC,EACAC,EACAC,EALA14B,EAAA1L,EAAAujC,sBAAA35B,EAAAI,GACArI,EAAA3B,EAAA8Q,kBAKA,IAAApF,KAAAuH,OAAA,CAGA,GADAixB,EAAAx4B,EAAAuH,OAAA,KACAjT,EAAA2G,cAAA,mBAAuD+E,SAAe,QACtE1L,GAAA2rB,eAAA/hB,EAAAI,GACAhK,EAAA8nB,cAAAle,EAAAI,GAEAhK,EAAAqlB,MADA6e,EACAphC,SAAAC,cAAA,UAEAD,SAAAC,cAAA/C,EAAAgC,WAAAqiC,UACA,oBAEA34B,EAAA1L,EAAAujC,sBAAA35B,EAAAI,GAEA0B,IACAw4B,IAEA,kBAAAA,GACAD,EAAAC,EAAAhiC,MAAAlC,EAAA4C,OAAuD8I,UACtChI,MAAAspB,QAAAkX,KACjBD,EAAAC,GAEAD,EAAA7gC,QAAA,SAAA4D,GACA,GACAV,GACAmP,EAFAnV,EAAAwC,SAAAC,cAAA,SAGAW,OAAAspB,QAAAhmB,IACAV,EAAAU,EAAA,GACAyO,EAAAzO,EAAA,KAEAV,EAAAU,EACAyO,EAAAzO,GAEAV,IAAAoF,EAAAsE,QAA6Co0B,GAAA,GAC7C9jC,EAAA0P,MAAA1J,EACAhG,EAAA4I,UAAAuM,EACAzV,EAAAqlB,MAAApgB,YAAA3E,KAEA8jC,IACAD,EAAArhC,SAAAC,cAAA,UACAohC,EAAAn0B,MAAAtE,EAAAsE,MACAm0B,EAAAj7B,UAAAwC,EAAAsE,MACAhQ,EAAAqlB,MAAApgB,YAAAk/B,IAEAnkC,EAAAqlB,MAAAhd,iBAAA,oBACArI,EAAA6nB,UACA7nB,EAAAwL,MAAA,MAGA1I,SAAA4B,KAAAO,YAAAjF,EAAAqlB,OACArlB,EAAAy8B,kBAAAz8B,EAAAqlB,MAAArlB,EAAA8R,OAAA,kEACA9R,EAAAqlB,MAAAze,MAAAi4B,SAAA,WACA7+B,EAAAqlB,MAAAiM,SAAA5lB,EACA1L,EAAA8kB,kBACA9kB,EAAAqlB,MAAAze,MAAAm4B,OAAA/+B,EAAA4G,MAAA09B,eACAtkC,EAAAqlB,MAAAze,MAAA29B,SAAAj9B,SAAAtH,EAAA4G,MAAA49B,iBAAA,IAAAxkC,EAAAwM,MAAA,KACAxM,EAAAqlB,MAAArV,MAAAtE,EAAAsE,MACAhQ,EAAAqlB,MAAAgG,QACArrB,EAAAqlB,MAAAhd,iBAAA,QAAArI,EAAA6hB,iBACA7hB,EAAAqlB,MAAAhd,iBAAA,WAAArI,EAAA6hB,iBACA7hB,EAAAqlB,MAAAhd,iBAAA,UAAArI,EAAA6hB,iBACA7hB,EAAAqlB,MAAAhd,iBAAA,YAAArI,EAAA6hB,iBACA7hB,EAAAqlB,MAAAhd,iBAAA,mBAAArB,GACA,GAAAy9B,GAAA/4B,EAAAmH,YACA6xB,EAAAh5B,EAAAqC,QAEA,SAAA/G,EAAAykB,QACAzrB,EAAA6nB,SAAA,GACA7nB,EAAAwL,MAAA,OAEiB,SAAAxE,EAAAykB,WACjBzrB,EAAAgC,WAAAqiC,WACArkC,EAAAgC,WAAAqiC,WAAAr9B,EAAAggB,UACAhnB,EAAA6nB,UACA7nB,EAAAwL,MAAA,OACiB,QAAAxE,EAAAykB,QAAA,CAEjB,GADAzkB,EAAAob,kBACApiB,EAAA6nB,UACA,MAEA7gB,GAAAggB,SACAyd,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAA9iC,EAAAqH,OAAA,EACA07B,GAAA,GAEAD,EAAA9iC,EAAAqH,OAAA,IACAy7B,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAA1kC,EAAAgF,KAAAgE,OAAA,GAEA07B,EAAA1kC,EAAAgF,KAAAgE,OAAA,IACA07B,EAAA,GAEA1kC,EAAA2rB,eAAA8Y,EAAAC,GACA1kC,EAAA0rB,YAAA+Y,EAAAC,MAGA1kC,EAAA2G,cAAA,aAA6C+E,OAAA2Z,MAAArlB,EAAAqlB,YAE7CrlB,EAAAy8B,kBAAA,SAAAlzB,EAAAo7B,GACA,GAAAC,IACAC,6CACA/4B,OAAA,OACAg5B,cAAA,SACAC,WAAA,MACAC,QAAA,IACAnF,WAAA7/B,EAAA4G,MAAAk5B,6BACA11B,MAAApK,EAAA4G,MAAAm5B,wBACAkF,OAAAjlC,EAAA4G,MAAAs+B,yBACAC,aAAAnlC,EAAA4G,MAAAw+B,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAA4+B,6BACAjB,SAAAvkC,EAAA4G,MAAA6+B,4BAEAC,8CACA55B,OAAA,OACAg5B,cAAA,SACAC,WAAA,MACAC,QAAA,IACAnF,WAAA7/B,EAAA4G,MAAA++B,sBACAv7B,MAAApK,EAAA4G,MAAAg/B,iBACAX,OAAAjlC,EAAA4G,MAAAi/B,0BACAV,aAAAnlC,EAAA4G,MAAAk/B,gCACAT,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAm/B,kCACAxB,SAAAvkC,EAAA4G,MAAAo/B,iCAEAC,uCACAC,SAAA,QACA97B,MAAApK,EAAA4G,MAAAu/B,2BACA5B,SAAAvkC,EAAA4G,MAAAw/B,8BACAb,WAAAvlC,EAAA4G,MAAAy/B,sBACAvB,cAAA,UAEAwB,gCACAf,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,oBACA1G,WAAA7/B,EAAA4G,MAAA++B,sBACAv7B,MAAApK,EAAA4G,MAAAg/B,iBACAX,OAAAjlC,EAAA4G,MAAA4/B,kBACAxB,QAAAhlC,EAAA4G,MAAA6/B,mBACAtB,aAAAnlC,EAAA4G,MAAA8/B,wBACAC,QAAA3mC,EAAA4G,MAAAggC,mBACA/H,SAAA,WACAE,OAAA,KACA8H,SAAA,UAEAC,qCACAjH,WAAA7/B,EAAA4G,MAAA++B,sBACAv7B,MAAApK,EAAA4G,MAAAg/B,kBAEAmB,2CACAlH,WAAA7/B,EAAA4G,MAAAogC,2BACA58B,MAAApK,EAAA4G,MAAAqgC,uBAEAC,0BACArI,SAAA,WACAE,OAAA,MAEAoI,mBACAC,QAAA,SAEAC,iCACAxI,SAAA,QACAza,IAAA,OACAC,KAAA,OACA4gB,OAAA,OACA0B,QAAA,IACA/f,OAAA,UACA7a,MAAA,MACAD,OAAA,MACAu5B,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,qBAEAe,qCACAC,UAAA,cACAC,QAAA,OACAC,OAAA,IACAzC,QAAA,UACAK,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAA8gC,qBACAnD,SAAAvkC,EAAA4G,MAAA+gC,mBACA1C,OAAAjlC,EAAA4G,MAAAghC,eACAx9B,MAAApK,EAAA4G,MAAAihC,cACAhI,WAAA7/B,EAAA4G,MAAAkhC,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEA+C,8BACAX,UAAA,cACAC,QAAA,OACAC,OAAA,IACAzC,QAAA,SAAAhlC,EAAA4G,MAAAuhC,oBAAA,KACA9C,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAwhC,mBACA7D,SAAAvkC,EAAA4G,MAAA49B,iBACA6D,UAAAroC,EAAA4G,MAAA0hC,kBACArD,OAAAjlC,EAAA4G,MAAAghC,eACAx9B,MAAApK,EAAA4G,MAAAihC,cACAhI,WAAA7/B,EAAA4G,MAAAkhC,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEAoD,4CACAlD,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,oBACAn8B,MAAA,UACAy1B,WAAA,UACA4H,OAAAznC,EAAA4G,MAAA4hC,sBACArD,aAAAnlC,EAAA4G,MAAA6hC,4BACA3D,cAAA,UAEA4D,qCACArD,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,oBACAn8B,MAAA,UACAy1B,WAAA,UACA4H,OAAAznC,EAAA4G,MAAA4hC,sBACArD,aAAAnlC,EAAA4G,MAAA6hC,4BACA3D,cAAA,UAEA6D,2CACA9I,WAAA7/B,EAAA4G,MAAAogC,2BACA58B,MAAApK,EAAA4G,MAAAqgC,uBAEA2B,sCACAnB,OAAAznC,EAAA4G,MAAAiiC,uBACAzB,QAAApnC,EAAA4G,MAAAkiC,wBACA1J,SAAAp/B,EAAA4G,MAAAmiC,yBACAC,SAAAhpC,EAAA4G,MAAAqiC,0BAEAC,uCACA7D,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,oBACA1G,WAAA7/B,EAAA4G,MAAA++B,sBACAv7B,MAAApK,EAAA4G,MAAAg/B,iBACAX,OAAAjlC,EAAA4G,MAAA4/B,kBACAxB,QAAAhlC,EAAA4G,MAAA6/B,mBACAtB,aAAAnlC,EAAA4G,MAAA8/B,wBACAC,QAAA3mC,EAAA4G,MAAAggC,mBACAC,SAAA,SACAsC,WAAA,UAEAC,gCACA/D,WAAA,SACAC,WAAA,SACAC,WAAAvlC,EAAA4G,MAAAy/B,sBACA9B,SAAAvkC,EAAA4G,MAAA2/B,oBACA1G,WAAA7/B,EAAA4G,MAAA++B,sBACAv7B,MAAApK,EAAA4G,MAAAg/B,iBACAX,OAAAjlC,EAAA4G,MAAA4/B,kBACAxB,QAAAhlC,EAAA4G,MAAA6/B,mBACAtB,aAAAnlC,EAAA4G,MAAA8/B,wBACAC,QAAA3mC,EAAA4G,MAAAggC,mBACAC,SAAA,SACAsC,WAAA,UAEAE,yCACAxJ,WAAA7/B,EAAA4G,MAAA0iC,mCAGA1E,GAAAD,IACA5jC,OAAA4D,KAAAigC,EAAAD,IAAA1X,IAAA,SAAAznB,GACA+D,EAAA3C,MAAApB,GAAAo/B,EAAAD,GAAAn/B,MAKAxF,EAAA04B,SAAA,SAAA1xB,GACAhH,EAAAyC,WAAAuE,EACAhH,EAAAg4B,UAEAh4B,EAAAg4B,OAAA,WACAh4B,EAAAwC,aACAxC,EAAAwV,WAAAxV,EAAAyC,WAAA+S,WACAxV,EAAAyK,IAAAzK,EAAAwV,WAAArT,QACAnC,EAAAkG,OAAAlG,EAAAwV,WAAAtP,OACAlG,EAAAorB,aAAAprB,EAAAwV,WAAA4V,aACAprB,EAAAw2B,YAAAx2B,EAAAkG,SAEAlG,EAAAorB,aAAAprB,EAAAorB,cAAAtoB,SAAAC,cAAA,SACA/C,EAAAorB,aAAAme,OAAAvpC,EAAA4C,KAAAy4B,KACAr7B,EAAAy8B,kBAAAz8B,EAAAorB,aAAA,iCACAprB,EAAAwC,aAAA,EACAxC,EAAAg+B,cAAAh+B,EAAAyC,WACAzC,EAAAwpC,eAAA,YAAA9mC,KAAA1C,EAAAg+B,cAAA/3B,SACAjG,EAAAwpC,gBACAxpC,EAAAkG,OAAAlG,EAAAg+B,cACAh+B,EAAAg+B,cAAA/4B,YAAAjF,EAAAorB,gBAEAprB,EAAAkG,OAAApD,SAAAC,cAAA,UACA/C,EAAAg+B,cAAA/4B,YAAAjF,EAAAkG,QACAlG,EAAAg+B,cAAA/4B,YAAAjF,EAAAorB,eAEAprB,EAAAy8B,kBAAAz8B,EAAAkG,OAAA,mBACAlG,EAAAyK,IAAAzK,EAAAkG,OAAAujC,WAAA,MACAzpC,EAAAyK,IAAAi/B,aAAA,aACA1pC,EAAAw2B,YAAAx2B,EAAAkG,QAEAlG,EAAAsjB,gBAAAtjB,EAAAkG,OAAAU,MACA5G,EAAAorB,aAAA+R,aAAA,eACAn9B,EAAAorB,aAAA/iB,iBAAA,gBAAArB,GACAA,EAAA6B,SAAA7I,EAAAkG,SACAlG,EAAAmhB,UAAA,KAGAnhB,EAAAw2B,YAAAnuB,iBAAA,SAAArI,EAAA0G,QAAA,GACA1G,EAAAw2B,YAAAnuB,iBAAA,aAAArI,EAAAuxB,YAAA,GACAvxB,EAAAw2B,YAAAnuB,iBAAA,UAAArI,EAAAmrB,SAAA,GACAnrB,EAAAw2B,YAAAnuB,iBAAA,YAAArI,EAAA2qB,WAAA,GACA3qB,EAAAw2B,YAAAnuB,iBAAA,WAAArI,EAAAgsB,UAAA,GACAhsB,EAAAw2B,YAAAnuB,iBAAA,QAAArI,EAAA0nB,OAAA,GACA1nB,EAAAw2B,YAAAnuB,iBAAA,YAAArI,EAAAklB,WACAllB,EAAAw2B,YAAAnuB,iBAAA,QAAArI,EAAAmsB,aAAA,GACAnsB,EAAAkG,OAAAmC,iBAAA,cAAArI,EAAAgyB,kBAAA,GACAhyB,EAAAorB,aAAA/iB,iBAAA,OAAArI,EAAAguB,MACAhuB,EAAAorB,aAAA/iB,iBAAA,MAAArI,EAAA+tB,KACA/tB,EAAAorB,aAAA/iB,iBAAA,QAAArI,EAAA0tB,OACA1tB,EAAAorB,aAAA/iB,iBAAA,WAAArI,EAAA+rB,UAAA,GACA/rB,EAAAorB,aAAA/iB,iBAAA,QAAArI,EAAA8rB,OAAA,GACA9rB,EAAAorB,aAAA/iB,iBAAA,UAAArI,EAAAsrB,SAAA,GACAznB,OAAAwE,iBAAA,SAAArI,EAAA0G,WAGCxE,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IVuuKK,SAAUhC,EAAQD,EAASO,GW1wLjC,GAAAyB,GAAAC,CAEAD,UA4nCCE,MA5nCDD,EAAA,WACA,YACA,iBAAA7B,GAQAA,EAAAo6B,eAAA,SAAAh5B,GAKA,IAJA,GAAAuoC,GAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAhoC,EAAA,GACAP,GAAA,GACAO,EAAA84B,OAAAsP,aAAA3oC,EAAA0oC,EAAAH,GAAAhoC,EACAP,EAAA0J,KAAAma,MAAA7jB,EAAA0oC,GAAA,CAEA,OAAAnoC,IAWA3B,EAAAy5B,aAAA,SAAA/4B,EAAAkX,GACA,GAAAjW,GAAA3B,EAAA4yB,WACA,IAAAjxB,EAAAqH,OAAA4O,EACA,SAAA3Q,OAAA,4CAEAjH,GAAA+1B,eAAAr1B,EAAAiB,GACAA,EAAAwgB,OAAAvK,EAAA,EAAAlX,GACAV,EAAAgF,KAAA5B,QAAA,SAAAkR,GACAtU,EAAAo1B,kBAAA9gB,EAAA5T,KAEAV,EAAA4C,KAAAsE,OAAAvF,GAUA3B,EAAA05B,aAAA,SAAA9hB,GACA,GAAAjW,GAAA3B,EAAA4yB,WAEA5yB,GAAAgF,KAAA5B,QAAA,SAAAkR,SACAA,GAAA3S,EAAAiW,GAAAhX,QAEAe,EAAAwgB,OAAAvK,EAAA,GACA5X,EAAA4C,KAAAsE,OAAAvF,GAUA3B,EAAA25B,UAAA,SAAAj5B,GACA,GAAAiB,GAAA3B,EAAA4yB,WACA5yB,GAAA+1B,eAAAr1B,EAAAiB,GACAA,EAAAmG,KAAApH,GACAV,EAAAgF,KAAA5B,QAAA,SAAAkR,GACAtU,EAAAo1B,kBAAA9gB,EAAA5T,KAEAV,EAAA4C,KAAAsE,OAAAvF,GASA3B,EAAAu5B,UAAA,SAAA3hB,GACA5X,EAAA81B,aAAA3T,OAAAvK,EAAA,GACA5X,EAAAm5B,YACAn5B,EAAA0G,QAAA,IAUA1G,EAAAs5B,UAAA,SAAA34B,EAAAiX,GACA,GAAA5X,EAAA81B,aAAA9sB,OAAA4O,EACA,SAAA3Q,OAAA,6CAEAjH,GAAA81B,aAAA3T,OAAAvK,EAAA,EAAAjX,GACAX,EAAA4yB,YAAAxvB,QAAA,SAAA1C,OACAoB,KAAAnB,EAAAD,EAAAE,OACAZ,EAAAo1B,kBAAAp1B,EAAA81B,aAAAle,GAAAlX,KAGAV,EAAAm5B,YACAn5B,EAAA0G,QAAA,IASA1G,EAAAw5B,OAAA,SAAA74B,GACAX,EAAA81B,aAAAhuB,KAAAnH,GACAX,EAAA4yB,YAAAxvB,QAAA,SAAA1C,OACAoB,KAAAnB,EAAAD,EAAAE,OACAZ,EAAAo1B,kBAAAp1B,EAAA81B,aAAA91B,EAAA81B,aAAA9sB,OAAA,GAAAtI,KAGAV,EAAAm5B,YACAn5B,EAAA0G,QAAA,IAUA1G,EAAA65B,aAAA,SAAA9rB,EAAAjC,GACA9L,EAAAmR,MAAA6C,KAAAjG,GAAAjC,EACA9L,EAAAwL,MAAA,IAUAxL,EAAA85B,eAAA,SAAAvM,EAAAxhB,GACA/L,EAAAmR,MAAAD,QAAAqc,GAAAxhB,EACA/L,EAAAwL,MAAA,IASAxL,EAAA+5B,kBAAA,WACA/5B,EAAAmR,MAAAD,WACAlR,EAAAwL,MAAA,IASAxL,EAAAg6B,gBAAA,WACAh6B,EAAAmR,MAAA6C,QACAhU,EAAAwL,MAAA,IAUAxL,EAAAm5B,UAAA,SAAAtoB,EAAAb,GACA,QAAAg6B,KACAhqC,EAAA61B,yBACA90B,OAAA4D,KAAA3E,EAAAiX,eAAA7T,QAAA,SAAAiC,GACA,GAAA4N,GAAAjT,EAAA82B,gBAAAjmB,EACAoC,KAGAjT,EAAAo0B,cAAAnhB,EAAA5N,QAAArF,EAAAqF,OAAAwL,EAAA5H,MAAA,UACAjJ,EAAAgF,KAAAhF,EAAAgF,KAAAK,OAAA,SAAAiP,GACA,MAAAtU,GAAAo0B,cAAA9f,EAAAjP,GAAArF,EAAAiX,cAAA5R,SAGArF,EAAA0G,SACA1G,EAAAwL,MAAA,GAEA,OAAA1J,KAAA+O,OAAA/O,KAAAkO,EAEA,MADAhQ,GAAAiX,iBACA+yB,KAEAn5B,GAAA,KAAAb,OAAAlO,KAAAkO,EAGAhQ,EAAAiX,cAAApG,GAAAb,QAFAhQ,GAAAiX,cAAApG,GAIAm5B,KASAhqC,EAAA+4B,iBAAA,SAAAhrB,GACA,GAAAqW,GAAA,EAAAxa,EAAA,EAAArJ,EAAAP,EAAAgF,KAAAgE,OACA6a,EAAA,aAAA7jB,EAAA4G,MAAAqS,mBAAA,IACAkK,EAAAnjB,EAAA4G,MAAA2N,gBAAAsP,CAIA,IAHA7jB,EAAAgC,WAAAqY,aACA9Z,GAAA,GAEAwN,EAAAxN,EACA,SAAA0G,OAAA,uBAEA,MAAA2C,EAAAmE,GACAqW,IAAApkB,EAAAmR,MAAA6C,KAAApK,IAAA5J,EAAA4G,MAAAkO,YAAAqO,EACAvZ,GAAA,CAGA,OAAAwa,IAAApkB,EAAAmR,MAAA6C,KAAAjG,IAAA/N,EAAA4G,MAAAkO,aASA9U,EAAA84B,qBAAA,SAAAjmB,GACA,GAAAwR,GAAA,EAAAra,EAAA,EAAArI,EAAA3B,EAAA4yB,WACA,IAAA/f,EADAlR,EAAAqH,OAAA,EAEA,SAAA/B,OAAA,0BAEA,MAAA+C,EAAA6I,GACAwR,GAAArkB,EAAAmR,MAAAD,QAAAlH,IAAArI,EAAAqI,GAAA+B,OAAA/L,EAAA4G,MAAAwK,UACApH,GAAA,CAEA,OAAAqa,IAUArkB,EAAA44B,SAAA,SAAAhvB,EAAAI,OACAlI,KAAA8H,IACA5J,EAAA4U,UAAAC,WAAA7U,EAAA84B,qBAAAlvB,QAEA9H,KAAAkI,IACAhK,EAAA4U,UAAAD,UAAA3U,EAAA+4B,iBAAA/uB,KAUAhK,EAAA64B,QAAA,SAAA7uB,GACAhK,EAAA44B,SAAA,EAAA5uB,IAUAhK,EAAA2rB,eAAA,SAAA/hB,EAAAI,GAQiB,IAPjBhK,EAAA8V,aAAAzQ,OAAA,SAAAqG,GACA,OAAAA,EAAAqC,WAAA/D,OAAAlI,KAAAkI,KACA0B,EAAAmH,cAAAjJ,OAAA9H,KAAA8H,IACA8B,EAAA9B,EAAA,GACA8B,EAAA1B,EAAA,GACA0B,EAAA9B,EAAA8B,EAAAK,MAAA/L,EAAA+L,OACAL,EAAA1B,EAAA0B,EAAAI,OAAA9L,EAAA8L,SACiB9C,QACjBhJ,EAAA44B,SAAAhvB,EAAAI,IAWAhK,EAAA8nB,cAAA,SAAAle,EAAAI,GACAhK,EAAA4T,YACA7F,SAAA/D,EACA6I,YAAAjJ,IAUA5J,EAAAi6B,WAAA,SAAAjV,GACAhlB,EAAA4S,cACA5S,EAAA2G,cAAA,oBACAklB,aAAA7rB,EAAA4nB,kBACAhV,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAunB,kBAEAvC,GACAhlB,EAAAwL,QASAxL,EAAA+nB,UAAA,SAAA/C,GACAhlB,EAAAwnB,YACApD,IAAA,EACAC,KAAA,EACA6C,MAAAlnB,EAAA8Q,mBAAA9H,OAAA,EACAie,OAAAjnB,EAAAgF,KAAAgE,OAAA,IAEAgc,GACAhlB,EAAAwL,QASAxL,EAAAiqC,iBAAA,SAAAp3B,GACA,GAAAq3B,IAAA,CAMA,OALAlqC,GAAAgF,KAAA5B,QAAA,SAAAkR,EAAAvG,GACA/N,EAAA4S,WAAA7E,KAAA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAA7E,EAAAiR,OAAAC,QAAA2B,MACAq3B,GAAA,KAGAA,GAUAlqC,EAAAiuB,oBAAA,SAAAnM,EAAA8S,GACA,GAAAj0B,MAAAgB,EAAAizB,EAAA50B,EAAA4yB,YAAA5yB,EAAA8Q,mBAAAvQ,EAAAP,EAAAgF,KAAAgE,MACAhJ,GAAA4S,WAAAxP,QAAA,SAAAkR,EAAAsD,GACA,GAAAA,IAAArX,EAAA,CACA,OAAA+T,EAAAtL,OAEA,YADArI,EAAAiX,GAAA,KAGAjX,GAAAiX,MACAtD,EAAAlR,QAAA,SAAAyxB,IACA,IAAAA,GAAAlzB,EAAAkzB,IACA/S,EAAA9hB,EAAAgF,KAAA4S,EAAAjW,EAAAkzB,GAAAj0B,YAcAZ,EAAAioB,aAAA,SAAApV,EAAA6S,EAAAykB,EAAAC,GAEA,QAAAC,GAAA/pC,GACAN,EAAAgF,KAAA5B,QAAA,SAAAkR,EAAAvG,GACA/N,EAAA4S,WAAA7E,GAAA/N,EAAA4S,WAAA7E,QACA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,IACAN,EAAA4S,WAAA7E,GAAAjG,KAAAxH,KALA,GAAAqB,GAAAqF,EAAA4C,CAiBA,IAAAugC,EAAA,CACA,IAAAnqC,EAAA4T,WAAuC,MAGvC,KAFAjS,EAAAmJ,KAAAiG,IAAA/Q,EAAA4T,WAAAf,eACA7L,EAAA8D,KAAAX,IAAAnK,EAAA4T,WAAAf,eACAjJ,EAAAjI,EAA2BqF,EAAA4C,EAAOA,GAAA,EAClCygC,EAAAzgC,GAGA8b,GAAAykB,IACAnqC,EAAA4S,cACA5S,EAAA4T,WAAAf,cACA7S,EAAA4T,WAAA7F,SAAA/N,EAAAka,gBAEAwL,GAAA1lB,EAAAiqC,iBAAAp3B,GArBA,SAAAvS,GACAN,EAAAgF,KAAA5B,QAAA,SAAAkR,EAAAvG,GACA/N,EAAA4S,WAAA7E,GAAA/N,EAAA4S,WAAA7E,QACA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,IACAN,EAAA4S,WAAA7E,GAAAoU,OAAAniB,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,GAAA,MAkBAuS,GAEAw3B,EAAAx3B,GAEAu3B,GACApqC,EAAA2G,cAAA,oBACAklB,aAAA7rB,EAAA4nB,kBACAhV,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAmnB,wBAaAnnB,EAAAsnB,UAAA,SAAAvZ,EAAA2X,EAAAykB,EAAAC,GAEA,QAAA5Q,GAAA8Q,GACAtqC,EAAA4S,WAAA03B,MACAtqC,EAAA4S,WAAA03B,GAAAxiC,MAAA,GACAnG,EAAAyB,QAAA,SAAAyxB,EAAAjd,GACA5X,EAAA4S,WAAA03B,GAAAxiC,KAAA8P,KALA,GAAAhO,GAAA2gC,EAAA5sB,EAAAhc,EAAA3B,EAAA8Q,kBAQA,UAAA9Q,EAAAqnB,wBAAAvlB,KAAA9B,EAAAwqC,aACAxqC,EAAA4S,WAAA7E,IAAA/N,EAAA4S,WAAA7E,GAAA/E,OAAA,IAAArH,EAAAqH,QACA0c,EAEA,YADA1lB,EAAA4S,WAAA7E,MAKA,SAAA/N,EAAAqnB,wBAAAvlB,KAAA9B,EAAAwqC,WACA,GAAAL,OAAAroC,KAAA9B,EAAAwqC,WAAA,CACA,IAAAxqC,EAAA4T,WAA2C,MAG3C,KAFA22B,EAAAz/B,KAAAiG,IAAA/Q,EAAA4T,WAAA7F,YACA4P,EAAA7S,KAAAX,IAAAnK,EAAA4T,WAAA7F,YACAnE,EAAA2gC,EAAgC5sB,GAAA/T,EAASA,GAAA,EACzC4vB,EAAA5vB,OAGA4vB,GAAAzrB,EAGAq8B,IACApqC,EAAA2G,cAAA,oBACAklB,aAAA7rB,EAAA4nB,kBACAhV,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAunB,mBAUAvnB,EAAAq5B,aAAA,SAAAtrB,GACA/N,EAAA2G,cAAA,gBACA8jC,UAAAzqC,EAAAuW,WAAAxI,GACA/I,KAAAhF,EAAAgF,KAAA+I,GACAA,aAEA/N,EAAA8N,aAAAC,GAAAstB,OACAr7B,EAAA8N,aAAAC,GAAAuoB,gBACAt2B,GAAA8N,aAAAC,SACA/N,GAAAmR,MAAAmH,MAAAvK,SACA/N,GAAAuW,WAAAxI,GACA/N,EAAA2G,cAAA,aACAmO,WAAA9U,EAAA4G,MAAAkO,aAEA9U,EAAA0G,QAAA,GACA1G,EAAAwL,MAAA,IASAxL,EAAAo5B,WAAA,SAAArrB,GACA,GAIA8K,GAJA6xB,EAAA1qC,EAAAsC,KAAAuxB,uBACAza,EAAApZ,EAAAqZ,4BACArB,EAAAhY,EAAAmR,MAAAD,QAAA2E,YAAA7V,EAAA4G,MAAAoR,mBACAjO,EAAA/J,EAAAmR,MAAAmH,MAAAvK,IAAA/N,EAAA4G,MAAA+jC,cAEA3qC,GAAAuW,WAAAxI,KACA28B,EAAAtrB,MAAApf,EAAAgC,WAAAod,MACAsrB,EAAA9pC,KAAAZ,EAAAgC,WAAAwU,eAAAxW,EAAAgC,WAAApB,KAAA,OAAAmN,MAAAjM,GACA4oC,EAAA9jC,MAAA8jC,EAAA9jC,OAAA5G,EAAA4G,MACA8jC,EAAAjoC,YACA+S,WAAAxV,EAAA4C,KACAD,SAAA,uBACAqS,aAAAjL,EACAgL,YAAA/U,EAAA+L,MAAAiM,EACA/E,QAA6BlH,MAAA/L,EAAA+L,MAAAiM,GAC7BtD,WAAAsD,EACAvD,UAAA2E,EACAnE,aAAAjV,EAAA4C,KAAAH,WACAA,WAAAzC,EAAA4C,KAAAH,WACAmE,MAAA,OACA5B,KAAAhF,EAAAgF,KAAA+I,IAEA8K,EAAA7Y,EAAAmD,WAAAunC,GACA1qC,EAAAuW,WAAAxI,GAAA8K,GAEAA,EAAA7Y,EAAAuW,WAAAxI,GACA8K,EAAAlC,SAAA,EACA3W,EAAA2G,cAAA,cACAkS,WACA7T,KAAAhF,EAAAgF,KAAA+I,GACAA,aAEA/N,EAAA8N,aAAAC,GAAA8K,EACA7Y,EAAAmR,MAAAmH,MAAAvK,GAAAhE,EACA/J,EAAA2G,cAAA,aAA6CmF,OAAA9L,EAAA4G,MAAAkO,aAC7C9U,EAAA0G,QAAA,IASA1G,EAAAmoB,WAAA,SAAApa,GAEA,GADA/N,EAAA8N,aAAAC,GAEA,MAAA/N,GAAAq5B,aAAAtrB,EAEA/N,GAAAo5B,WAAArrB,IAWA/N,EAAA82B,gBAAA,SAAAl2B,GACA,GAAAgJ,GAAAtJ,EAAAN,EAAA4yB,WACA,KAAAhpB,EAAA,EAAuBA,EAAAtJ,EAAA0I,OAAcY,GAAA,EACrC,GAAAtJ,EAAAsJ,GAAAhJ,SACA,MAAAN,GAAAsJ,IAYA5J,EAAAisB,kBAAA,SAAArrB,EAAA+Q,GACA3R,EAAAkG,SACAlG,EAAAmR,MAAAD,QAAA,eAAAtQ,GAAA,EAAAZ,EAAA82B,gBAAAl2B,GAAAgX,OACA9M,KAAAX,IAAAnK,EAAAq2B,wBAAAz1B,GAAAZ,EAAA4G,MAAA2hB,gBACA5W,IACA3R,EAAA0G,SACA1G,EAAAwL,MAAA,MAqBAxL,EAAAg5B,cAAA,SAAAttB,EAAAqC,GAEA,OAAAjM,KAAAiM,EACA,MAAA/N,GAAA8V,aAAAzQ,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,cAAAnH,GAAAhL,EAAAqN,eACiB/E,OAAA,CAEjB,IAAAY,GAAArJ,EAAAP,EAAA8V,aAAA9M,MACA,KAAAY,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9B,GAAA8B,EAAA9B,IAAA5J,EAAA8V,aAAAlM,MAAA8B,EAAA1B,IAAAhK,EAAA8V,aAAAlM,GAAAI,EACA,QAGA,WAaAhK,EAAA+a,MAAA,SAAA0a,EAAAmV,EAAAC,EAAAC,GACA,GAAA72B,GACAvT,EAAAV,EAAA4yB,YAAAvtB,OAAA,SAAAwvB,GACA,MAAAA,GAAAj0B,OAAA60B,GAEA,KAAAz1B,EAAA2G,cAAA,oBAAwD/F,KAAA60B,EAAAmV,cAAxD,CAEA,GADA5qC,EAAA4W,QAAA6e,EACA,IAAA/0B,EAAAsI,OACA,SAAA/B,OAAA,oCAEAgN,GAAA42B,GAAA7qC,EAAAq0B,QAAA3zB,EAAA,GAAAuI,MACAgL,OAAAnS,KAAApB,EAAA,GAAAuI,MACA6N,QAAAC,KAAA,qDAAArW,EAAA,GAAAuI,MAEAjJ,EAAAgF,KAAAhF,EAAAgF,KAAA+lC,KAAA,kBAAA92B,KAAAwhB,EAAAmV,GAAA5qC,EAAAq0B,QAAA3sB,QACA1H,EAAA2G,cAAA,cAA8C/F,KAAA60B,EAAAmV,cAC9C5qC,EAAAwL,MAAA,GACAs/B,GACA9qC,EAAA6oB,mBAEA7oB,EAAAomB,SAAA,SAAApf,GACA,QAAAA,EAAA4C,EAAA,GACA5C,EAAA4C,EAAA5J,EAAA+L,OACA/E,EAAAgD,EAAA,GACAhD,EAAAgD,EAAAhK,EAAA8L,SAaA9L,EAAAuqB,cAAA,SAAAwC,EAAAie,GACA,GAAA3d,KACArtB,GAAA4S,WAAAxP,QAAA,SAAAkR,EAAAvG,GACAsf,EAAAtf,EAAAi9B,MACA12B,EAAAlR,QAAA,SAAAmqB,GACAF,EAAAtf,EAAAi9B,GAAAljC,KAAAylB,EAAAR,OAGA/sB,EAAA4S,WAAAya,GAWArtB,EAAA2K,OAAA,SAAA0iB,EAAAzjB,EAAAI,GACA,GAGAihC,GAHAtqC,EAAAX,EAAA4nB,kBACAjmB,EAAA3B,EAAA8Q,mBACAvQ,EAAA8sB,EAAArkB,OAEAykB,EAAAzjB,EAAA,CACAqjB,GAAAjqB,QAAA,SAAAkR,EAAAsD,GACAA,IAAArX,GACA,IAAA+T,EAAAtL,QACAsL,EAAAlR,QAAA,SAAAyxB,GACAlzB,EAAAkzB,KACA70B,EAAAgF,KAAA4S,GAAAjW,EAAAkzB,GAAAj0B,MAAA,UAGAysB,EAAAjqB,QAAA,SAAAkR,EAAAsD,GACA6V,GAAA,EACAwd,EAAArhC,EAAA,EACA0K,EAAAlR,QAAA,SAAAyxB,EAAAqW,GACAD,GAAA,GACA,IAAApW,IACAlzB,EAAAspC,KACAtpC,EAAAkzB,IACA70B,EAAAgF,KAAAgE,OAAA,EAAAykB,GACAA,EAAA,IACAztB,EAAAgF,KAAAyoB,GAAA9rB,EAAAspC,GAAArqC,MAAAD,EAAAiX,GAAAjW,EAAAkzB,GAAAj0B,YAYAZ,EAAAmrC,gBAAA,SAAAt4B,GACA,MAAA7S,GAAA8V,aAAAzQ,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,kBACa7J,OAAA,GAUbhJ,EAAAorC,aAAA,SAAAr9B,GACA,MAAA/N,GAAA8V,aAAAzQ,OAAA,SAAA3E,GACA,MAAAA,GAAAqN,eACa/E,OAAA,GAWbhJ,EAAAujC,sBAAA,SAAA35B,EAAAI,GACA,MAAAhK,GAAA8V,aAAAzQ,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,cAAAjJ,GAAAlJ,EAAAqN,WAAA/D,IACa,IAWbhK,EAAA+lB,UAAA,SAAAnc,EAAAI,EAAAqhC,GAeA,GAAArrC,EAAA8V,aAAA,CACA,GAAAmvB,GAGA3kC,EAEAgrC,EAGA5/B,EACA6/B,EARAC,EAAAH,EAAArrC,EAAAgC,WAAAypC,gBAAA,EACAC,EAAA,SAAA1rC,EAAAgC,WAAA2pC,mBAEAprC,EAAAP,EAAA8V,aAAA9M,OAEA4iC,EAAAF,EAAA1rC,EAAAu4B,WAAA,YACAsT,EAAAH,EAAA1rC,EAAAu4B,WAAA,WAGA,IAAAv4B,EAAA8V,cAAA9V,EAAA8V,aAAA9M,OAAA,CAEA,GADAhJ,EAAAmhB,UAAA,IACAnX,EAAAhK,EAAA8L,QACA9B,EAAA,GACAJ,EAAA5J,EAAA+L,OACAnC,EAAA,GAEA,MADA5J,GAAAmhB,UAAA,GAEAC,YAAA,UACAjf,QAAA,UAGA,KAAA7B,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAe9B,GAdAoL,EAAA1L,EAAA8V,aAAAxV,GAEAirC,GACA3hC,EAAA8B,EAAA9B,EACAI,EAAA0B,EAAA1B,EACA8B,OAAAJ,EAAAI,OACAC,MAAAL,EAAAK,OAEAs/B,GAAA,gCAAA3oC,KAAAgJ,EAAA9E,SACA2kC,EAAA3hC,GAAA4hC,EACAD,EAAAvhC,GAAAwhC,EACAD,EAAAz/B,QAAA0/B,EACAD,EAAAx/B,OAAAy/B,GAEAD,EAAA3hC,EAAA5J,EAAA4G,MAAA2N,gBAAA3K,GACA2hC,EAAA3hC,EAAA2hC,EAAAx/B,MAAA/L,EAAA4G,MAAA2N,gBAAA3K,GACA2hC,EAAAvhC,EAAAhK,EAAA4G,MAAA2N,gBAAAvK,GACAuhC,EAAAvhC,EAAAuhC,EAAAz/B,OAAA9L,EAAA4G,MAAA2N,gBAAAvK,EAAA,CACA,uBAAAtH,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA0V,YAAA1V,EAAA9E,MACA8E,EAAAvJ,QAAA,aACAuJ,CAEA,2BAAAhJ,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA0V,YAAA1V,EAAA9E,MACA8E,EAAAvJ,QAAA,aACAuJ,CAEA,wBAAAhJ,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA0V,YAAA1V,EAAA9E,MACA8E,EAAAvJ,QAAA,YACAuJ,CAEA,gCAAAhJ,KAAAgJ,EAAA9E,OAaA,MAZA8E,GAAA0V,YAAA,sBACA1V,EAAAvJ,QAAA,sBACAuJ,EAAA21B,aAAA,EACA31B,EAAAogC,qBAAA,EACA9hC,EAAAhK,EAAA4U,UAAA+P,IAAA/Y,EAAA5B,EAAAhK,EAAA4U,UAAA0J,iBACA5S,EAAA0V,YAAA,yBACA1V,EAAAvJ,QAAA,0BACyB6H,EAAAhK,EAAA4U,UAAA+P,IAAA/Y,EAAA5B,IACzB0B,EAAA0V,YAAA,sBACA1V,EAAAvJ,QAAA,uBAEAnC,EAAA4mB,OAAA,UACAlb,CAEA,kCAAAhJ,KAAAgJ,EAAA9E,OAaA,MAZA8E,GAAA0V,YAAA,wBACA1V,EAAAvJ,QAAA,wBACAuJ,EAAA21B,aAAA,EACA31B,EAAAqgC,uBAAA,EACAniC,EAAA5J,EAAA4U,UAAA+P,IAAA5a,EAAAH,EAAA5J,EAAA4U,UAAAsJ,gBACAxS,EAAA0V,YAAA,0BACA1V,EAAAvJ,QAAA,2BACyByH,EAAA5J,EAAA4U,UAAA+P,IAAA5a,EAAAH,IACzB8B,EAAA0V,YAAA,yBACA1V,EAAAvJ,QAAA,0BAEAnC,EAAA4mB,OAAA,UACAlb,CAKA,IAHAu5B,EArGA,SAAAsG,GACA,MAAAA,GAAA3hC,EAAA2hC,EAAAx/B,MAAA,GAAA/L,EAAAgC,WAAAgqC,iBAAApiC,GAAA2hC,EAAA3hC,EAAA2hC,EAAAx/B,MAAA,GAAA/L,EAAAgC,WAAAgqC,iBAAApiC,EACA,IAEA2hC,EAAA3hC,EAAA,GAAA5J,EAAAgC,WAAAgqC,iBAAApiC,GAAA2hC,EAAA3hC,EAAA,GAAA5J,EAAAgC,WAAAgqC,iBAAApiC,EACA,IAEA2hC,EAAAvhC,EAAAuhC,EAAAz/B,OAAA,GAAA9L,EAAAgC,WAAAgqC,iBAAAhiC,GAAAuhC,EAAAvhC,EAAAuhC,EAAAz/B,OAAA,GAAA9L,EAAAgC,WAAAgqC,iBAAAhiC,EACA,IAEAuhC,EAAAvhC,EAAA,GAAAhK,EAAAgC,WAAAgqC,iBAAAhiC,GAAAuhC,EAAAvhC,EAAA,GAAAhK,EAAAgC,WAAAgqC,iBAAAhiC,EACA,QADA,IA2FAuhC,GAEAD,EAAAI,GAAAhgC,EAAAgH,kBAAA,IAAAhH,EAAAgH,gBAAA7N,QAAAogC,IACA,cAAApgC,QAAAogC,KACAjlC,EAAAgC,WAAAiqC,mBAAAX,KACAtrC,EAAAgC,WAAAkqC,2BAAAxgC,EAAA4J,WAAA5J,EAAA4J,UAAAg2B,KACAtrC,EAAAgC,WAAAmqC,uBAAAzgC,EAAAiH,aAAAjH,EAAA4H,YAAA5H,EAAAiH,cAAAjH,EAAA4H,UAAA,CACA,IAAA5H,EAAA6H,gBAAA7H,EAAA4H,UAAAtT,EAAAgC,WAAAkqC,2BAAAxgC,EAAA4J,WAAA,MAAA2vB,EAGA,MAFAv5B,GAAAvJ,QAAA,YACAuJ,EAAA0V,YAAA,YACA1V,CAEA,KAAAA,EAAA6H,iBAAA7H,EAAA4H,UAAAg4B,EAGA,MAFA5/B,GAAAvJ,QAAAypC,EACAlgC,EAAA0V,YAAA6jB,EAAA,QACAv5B,EAGA,kBAAA7G,QAAAogC,IACAv5B,EAAAqC,UAAA,IACA/N,EAAAgC,WAAAoqC,gBAAAd,KACAtrC,EAAAgC,WAAAqqC,wBAAA3gC,EAAA4J,WAAA5J,EAAA4J,UAAAg2B,KACA5/B,EAAA6H,eAAA,CACA,IAAA7H,EAAAiH,aAAAjH,EAAA4H,UAAAtT,EAAAgC,WAAAqqC,wBAAA3gC,EAAA4J,WAAA,MAAA2vB,EAGA,MAFAv5B,GAAAvJ,QAAA,YACAuJ,EAAA0V,YAAA,YACA1V,CAEA,KAAAA,EAAAiH,cAAAjH,EAAA4H,UAAAg4B,EAGA,MAFA5/B,GAAAvJ,QAAA0pC,EACAngC,EAAA0V,YAAA6jB,EAAA,QACAv5B,EAGA,2BAAAA,EAAA9E,OACA8E,EAAAvJ,QAAA,OACAuJ,EAAA0V,YAAA,iBACA1V,GAEA,kBAAAA,EAAA9E,OACA5G,EAAAgC,WAAAsqC,iBAAA5gC,EAAA1B,EAAAhK,EAAA4G,MAAA2N,iBAAAvK,IACAhK,EAAAgC,WAAA4nB,oBACAle,EAAA0V,YAAA,OACA1V,EAAAvJ,QAAA,SAEAuJ,EAAAvJ,QAAAnC,EAAAu4B,WACA7sB,EAAA0V,YAAA,eAEA1V,GAEAA,EAAAoI,QACA9T,EAAAmhB,UAAA,EACAzV,EAAA0V,YAAA,YACA1V,EAAAvJ,QAAA,YACAuJ,GAEA,cAAAA,EAAA9E,OACA5G,EAAAmhB,UAAA,EACAzV,EAAA0V,YAAA,OACA1V,EAAAvJ,QAAA,OACAuJ,IAEAA,EAAA0V,YAAA,OACA1V,EAAAvJ,QAAA,OACAuJ,GAKA,MAFA1L,GAAAmhB,UAAA,EACAnhB,EAAA4mB,OAAA,WAEAxF,YAAA,aACAjf,QAAA,aACAyE,MAAA,aACAw6B,cAAA,MAUAphC,EAAAmnB,mBAAA,WACA,GAAA1d,IAAuBG,EAAAw5B,IAAAp5B,EAAAo5B,KACvB15B,GAAwBE,GAAAw5B,IAAAp5B,GAAAo5B,IAUxB,OATApjC,GAAA4S,WAAAxP,QAAA,SAAAkR,EAAAvG,GACA,GAAAw+B,GAAAC,CACA/iC,GAAAO,EAAA+D,EAAAtE,EAAAO,EAAA+D,EAAAtE,EAAAO,EACAN,EAAAM,EAAA+D,EAAArE,EAAAM,EAAA+D,EAAArE,EAAAM,EACAuiC,EAAAzhC,KAAAX,IAAAjI,MAAA,KAAAoS,GACAk4B,EAAA1hC,KAAAiG,IAAA7O,MAAA,KAAAoS,GACA7K,EAAAG,EAAA4iC,EAAA/iC,EAAAG,EAAA4iC,EAAA/iC,EAAAG,EACAF,EAAAE,EAAA2iC,EAAA7iC,EAAAE,EAAA2iC,EAAA7iC,EAAAE,KAGAwa,IAAA3a,EAAAO,EACAqa,KAAA5a,EAAAG,EACAqd,OAAAvd,EAAAM,EACAkd,MAAAxd,EAAAE,IAWA5J,EAAAk5B,kBAAA,SAAAv4B,GAEA,MADAA,MAAAX,EAAAgF,KACAjE,OAAA4D,KAAAhE,EAAA,KAAwC8rC,IAAA,KAAQxf,IAAA,SAAA3L,EAAA1J,GAChD,GAAA3O,GAAAjJ,EAAAw1B,qBAAAlU,EAAA3gB,GACAL,GACAM,KAAA0gB,EACA7L,MAAAlO,MAAAD,SAAAga,EAAA,KAAAA,EAAAthB,EAAAo6B,eAAA9Y,GAAA1b,cACAgS,QACA3O,OACA5D,OAAArF,EAAAqF,OAAA4D,GAOA,OALAjJ,GAAA62B,gBACA72B,EAAA62B,eAAA9B,gBACAjzB,KAAA9B,EAAA62B,eAAA9B,WAAAz0B,EAAAM,QACAN,EAAA4jB,QAAAlkB,EAAA62B,eAAA9B,WAAAz0B,EAAAM,OAEAN,KAWAN,EAAA24B,eAAA,WACA34B,EAAAy0B,YASAz0B,EAAAwnB,WAAA,SAAAmL,EAAAjN,GACA1lB,EAAAunB,gBAAAoL,GAAA3yB,EAAAunB,eACA,IAAAlT,GAAAzK,EAAAI,EAAArI,EAAA3B,EAAA4yB,WAIA,IAHAlN,IACA1lB,EAAA4S,eAEA5S,EAAAunB,gBAAAnD,KAAA,GACApkB,EAAAunB,gBAAAN,OAAAjnB,EAAAgF,KAAAgE,QACAhJ,EAAAunB,gBAAAlD,MAAA,GACArkB,EAAAunB,gBAAAL,MAAAvlB,EAAAqH,OACA,SAAA/B,OAAA,4BAEA,KAAA2C,EAAA5J,EAAAunB,gBAAAnD,IAA8Cxa,GAAA5J,EAAAunB,gBAAAN,OAAkCrd,GAAA,EAEhF,IADA5J,EAAA4S,WAAAhJ,MACAI,EAAAhK,EAAAunB,gBAAAlD,KAAmDra,GAAAhK,EAAAunB,gBAAAL,MAAiCld,GAAA,GACpF,IAAAhK,EAAA4S,WAAAhJ,GAAA/E,QAAAmF,IACAhK,EAAA4S,WAAAhJ,GAAA9B,KAAAkC,EAIAqK,IACAzB,WAAA5S,EAAA4S,WACA2U,gBAAAvnB,EAAAunB,iBAEAxmB,OAAAC,eAAAqT,EAAA,gBACAlT,IAAA,WACA,MAAAnB,GAAA4nB,qBAGA5nB,EAAA2G,cAAA,mBAAA0N,IAUArU,EAAAq2B,wBAAA,SAAAz1B,GACA,GAAAH,IAAA2iC,GACA,sBAAAxiC,GACAZ,EAAAyK,IAAAoM,KAAA7W,EAAA4G,MAAA8lC,kBACA1sC,EAAAyK,IAAAsF,aAAA/P,EAAAgF,KAAAgE,QAAAhJ,EAAAgC,WAAAqY,WAAA,MAAArD,YAAAjL,MACA/L,EAAA4G,MAAA+lC,gBAAA3sC,EAAA4G,MAAAgmC,0BACA5sC,EAAA4G,MAAAimC,0BACA7sC,EAAA4G,MAAAkmC,0BACA9sC,EAAAgC,WAAAqU,KAAArW,EAAA4G,MAAA8G,eACA1N,EAAA4G,MAAA6G,oBAAAzN,EAAA4G,MAAA4G,qBAAA,KAEAxN,EAAA4yB,YAAAxvB,QAAA,SAAAyxB,GACA,GAAAA,EAAAj0B,SAAA,CACAZ,EAAAyK,IAAAoM,KAAA7W,EAAA4G,MAAAmmC,oBACA,IAAAn9B,GAAA5P,EAAAyK,IAAAsF,YAAA8kB,EAAApf,OAAAof,EAAAj0B,MAAAmL,MACA/L,EAAA4G,MAAAomC,uBACAhtC,EAAA4G,MAAAqmC,qBACAxsC,GAAAmP,EAAAnP,EAAAmP,EAAAnP,KAEAT,EAAAgF,KAAA5B,QAAA,SAAAkR,GACAtU,EAAAyK,IAAAoM,KAAA7W,EAAA4G,MAAAsmC,QACA,IAAAt9B,GAAA5P,EAAAyK,IAAAsF,YAAAuE,EAAA1T,IAAAmL,MACA/L,EAAA4G,MAAAumC,iBACAntC,EAAA4G,MAAA68B,gBAAAzjC,EAAA4G,MAAAwmC,qBACA3sC,GAAAmP,EAAAnP,EAAAmP,EAAAnP,IAEAA,IAQAT,EAAA2a,eAAA,WACA,MAAA3a,GAAA8Q,mBAAAyO,OAAA,SAAA8tB,EAAAp6B,GACA,MAAAo6B,IAAAp6B,EAAAlH,OAAA/L,EAAA4G,MAAAwK,YACa,IAEbpR,EAAAkU,WAAAxM,OAAA,SAAAV,GACA,WAAAlF,KAAAkF,EAAA0E,KAAAsE,MAAAhJ,EAAA0E,KAAAsE,MAAA,IAEAhQ,EAAAkU,WAAA6D,cAAA/X,EAAAkU,WAAAxM,OACA1H,EAAAkU,WAAAo5B,WAAAttC,EAAAkU,WAAAxM,OACA1H,EAAAkU,WAAA9M,OAAApH,EAAAkU,WAAAxM,OACA1H,EAAAkU,WAAAq5B,IAAAvtC,EAAAkU,WAAAxM,OACA1H,EAAAkU,WAAA5I,KAAAtL,EAAAkU,WAAAxM,OACA1H,EAAAq0B,QAAA3sB,OAAA,SAAA+tB,EAAAmV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAA/yB,EAAA3J,GACA,WAAApM,KAAA+V,EAAA4d,IAAA,OAAA5d,EAAA4d,GACA,MAEA3zB,KAAAoM,EAAAunB,IAAA,OAAAvnB,EAAAunB,GACA,EAEA+X,EACA31B,EAAA4d,GAAAgY,cACA51B,EAAA4d,GAAAgY,cAAAv/B,EAAAunB,IADuD,EAGvDvnB,EAAAunB,GAAAgY,cACAv/B,EAAAunB,GAAAgY,cAAA51B,EAAA4d,IADmD,IAInDz1B,EAAAq0B,QAAAjtB,OAAA,SAAAquB,EAAAmV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAA/yB,EAAA3J,GACA,MAAAs/B,GACA31B,EAAA4d,GAAAvnB,EAAAunB,GAEAvnB,EAAAunB,GAAA5d,EAAA4d,KAGAz1B,EAAAq0B,QAAAqZ,KAAA,SAAAjY,EAAAmV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAA/yB,EAAA3J,GACA,MAAAs/B,GACA,GAAAG,MAAA91B,EAAA4d,IAAAmY,UACA,GAAAD,MAAAz/B,EAAAunB,IAAAmY,UAEA,GAAAD,MAAAz/B,EAAAunB,IAAAmY,UACA,GAAAD,MAAA91B,EAAA4d,IAAAmY,cAIC1rC,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === headerIndex,\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize, onlyResizeX) {\n            if (!self.canvas) { return; }\n            var x,\n                l,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            if (!onlyResizeX) {\n                self.scrollCache.y = [];\n                l = (self.data || []).length;\n                for (x = 0; x < l; x += 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                    dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n                }\n            }\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (!onlyResizeX && self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            if (!onlyResizeX) {\n                self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            }\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = Math.floor(((self.data || []).length * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true, true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true, true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getVisibleSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addTableHeaders() {\n                if (!headers.length) { return ''; }\n                return '<tr>' + headers.map(function (name) {\n                    return '<th>' + htmlSafe(name) + '</th>';\n                }).join('') + '</tr>';\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                var ht = column.title || column.name;\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    if (headers.indexOf(ht) === -1\n                            && sData.length === data.length\n                            && self.attributes.copyHeadersOnSelectAll) {\n                        headers.push(ht);\n                    }\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            // intentional redefinition of column\n                            column = s[self.orders.columns[columnIndex]];\n                            // escape strings\n                            addCellValue(row[column.name], trRow, textRow, column);\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = headers.join(',') + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addTableHeaders() + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.pkDefined = true;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys = self.styleKeys\n                .concat(self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }))\n                .concat(self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }));\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            // if (!self.data) {\n            //     self.intf.data = [];\n            // }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         * @returns array List of registered MIME types.\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parsers['application/json+x-canvas-datagrid;2dArray'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid;2dArray'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid;2dArray'] = function (data, callback) {\n            var x, y, l, d, max;\n            // find the longest length\n            max = 0;\n            d = [];\n            l = data.length;\n            for (x = 0; x < l; x += 1) {\n                max = Math.max(max, data[x].length);\n            }\n            for (x = 0; x < l; x += 1) {\n                for (y = 0; y < max; y += 1) {\n                    d[x][y] = data[x][y];\n                }\n            }\n            return callback(d, self.getSchemaFromData(data));\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function (d) {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.attributes.disableRowOrdering) {\n                        self.createRowOrders();\n                    }\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[x] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[rowIndex] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1877dedda46081fa0e4a","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === headerIndex,\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize, onlyResizeX) {\n            if (!self.canvas) { return; }\n            var x,\n                l,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            if (!onlyResizeX) {\n                self.scrollCache.y = [];\n                l = (self.data || []).length;\n                for (x = 0; x < l; x += 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                    dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n                }\n            }\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (!onlyResizeX && self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            if (!onlyResizeX) {\n                self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            }\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = Math.floor(((self.data || []).length * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true, true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true, true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getVisibleSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addTableHeaders() {\n                if (!headers.length) { return ''; }\n                return '<tr>' + headers.map(function (name) {\n                    return '<th>' + htmlSafe(name) + '</th>';\n                }).join('') + '</tr>';\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                var ht = column.title || column.name;\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    if (headers.indexOf(ht) === -1\n                            && sData.length === data.length\n                            && self.attributes.copyHeadersOnSelectAll) {\n                        headers.push(ht);\n                    }\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            // intentional redefinition of column\n                            column = s[self.orders.columns[columnIndex]];\n                            // escape strings\n                            addCellValue(row[column.name], trRow, textRow, column);\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = headers.join(',') + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addTableHeaders() + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.pkDefined = true;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys = self.styleKeys\n                .concat(self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }))\n                .concat(self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }));\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            // if (!self.data) {\n            //     self.intf.data = [];\n            // }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         * @returns array List of registered MIME types.\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parsers['application/json+x-canvas-datagrid;2dArray'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid;2dArray'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid;2dArray'] = function (data, callback) {\n            var x, y, l, d, max;\n            // find the longest length\n            max = 0;\n            d = [];\n            l = data.length;\n            for (x = 0; x < l; x += 1) {\n                max = Math.max(max, data[x].length);\n            }\n            for (x = 0; x < l; x += 1) {\n                for (y = 0; y < max; y += 1) {\n                    d[x][y] = data[x][y];\n                }\n            }\n            return callback(d, self.getSchemaFromData(data));\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function (d) {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.attributes.disableRowOrdering) {\n                        self.createRowOrders();\n                    }\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[x] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[rowIndex] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}