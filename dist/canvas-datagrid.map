{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap f0bd03201f0ad99c6d55","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","typeMap","data","strData","JSON","parse","e","Error","style","fullStyleString","split","sd","indexOf","key","substring","val","idef","console","warn","replace","schema","strSchema","number","strNum","parseInt","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","set","value","draw","attrName","oldVal","newVal","tfn","j","stringify","keys","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","wheeling","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentIsCanvas","shadowRootParentElement","parentDOMNode","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","schemaHashes","uId","changes","expandToRow","col","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","def","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","clipElement","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","nodeName","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","parentElement","getContext","textBaseline","MutationObserver","mutations","mutation","observe","createShadowRoot","ordA","charCodeAt","ordZ","len","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","isColumnVisible","isRowVisible","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAsOCE,MAtODD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,0BAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,OAAQD,QAASM,qBG7TjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,QA+CC2B,MA9CDD,8BAAA,QAAAO,SAAAC,WACA,YAGA,SAAAC,MAAAC,MACAA,aACA,IAAAR,QAgBA,OAfAA,MAAAS,gBAAAV,KAAAS,KAAAF,UACAN,KAAAU,KAAAV,KAAAS,YAAAE,KAAA,qDACAX,KAAAQ,UACAR,KAAAY,WAAA,SAAAJ,GAEA,MADAA,GAAAF,WAAA,EACA,GAAAC,MAAAC,IAEArC,QAAA0C,QAAA,SAAA9C,GACAA,EAAAiC,QAEAA,KAAAU,KAAAF,KAAAR,KAAAQ,KACAR,KAAAU,KAAAI,KAAAd,KAAAc,KACAd,KAAAS,aACAT,KAAAc,OAEAd,KAAAU,KApBAJ,qBACA,IAAAnC,SAAA4C,MAAAtB,UAAAuB,MAAAvC,KAAAwC,UA0CA,OArBAC,QAAAC,cACAZ,KAAAd,UAAAT,OAAAoC,OAAAF,OAAAC,YAAA1B,YAGAyB,OAAAG,iBACAd,KAAAe,mBAAAhB,UAAAiB,0BACAhB,KAAAd,UAAA+B,qBAAA,WAA2DtD,KAAAuD,WAC3DlB,KAAAd,UAAAiC,yBAAApB,UAAAoB,yBACAnB,KAAAd,UAAAkC,kBAAArB,UAAAqB,kBACAT,OAAAG,eAAArD,OAAA,kBAAAuC,QAGAW,eAAAU,gBAAAV,OAAAW,UACAX,OAAAU,eAAA,SAAApB,GAAiD,UAAAD,MAAAC,KAGjDzC,OAAAD,QAAA,SAAA0C,GAGA,MAFAA,SACAA,EAAAF,WAAA,EACA,GAAAC,MAAAC,IAEAzC,OAAAD,SACCsC,MAAAtC,QAAA+B,iCAAA9B,OAAAD,QAAAgC,gCHqUK,SAAU/B,EAAQD,EAASM,GI9XjC,GAAAyB,GAAAC,CAEAD,IAAAzB,EAAA,QA8HC2B,MA9HDD,EAAA,SAAAG,GACA,YACA,iBAAAD,GAGA,QAAA8B,GAAAC,EAAAC,GACA,GAAArC,GAAA,EAQA,OAPAoB,OAAAtB,UAAAoB,QAAApC,KAAAsD,EAAA,SAAAE,GACA,GAAAA,MAAAC,cAEA,YADAvC,GAAA,IAAAsC,EAAAE,cAGAxC,IAAAsC,KAEAD,EAAA,YAAArC,EAEA,QAAAyC,GAAAC,EAAAC,GACA,GAAA/D,KAQA,OANA0B,GAAA1B,GACAA,EAAA0B,SAAAoC,GAAAE,OAAA,SAAAhE,GACA,MAAAA,GAAA,GAAA4D,gBAAAG,EAAAH,eACAL,EAAAvD,EAAA,MAAA+D,EAAAH,eACAL,EAAAvD,EAAA,SAAA+D,EAAAH,gBACa,GArBbnC,OACA,IAAAwC,GAAAlC,IAwHA,OAjGAkC,IACAC,KAAA,SAAAC,GACA,IACA,MAAAC,MAAAC,MAAAF,GACiB,MAAAG,GACjB,SAAAC,OAAA,8DAGAC,MAAA,SAAAC,GACA,GAAApD,KAaA,OAZAoD,GAAAC,MAAA,KAAwCpC,QAAA,SAAAqC,GACxC,GAAAA,EAAA,CACA,GAAA3E,GAAA2E,EAAAC,QAAA,KACAC,EAAAF,EAAAG,UAAA,EAAA9E,GACA+E,EAAAJ,EAAAG,UAAA9E,EAAA,GACAgF,EAAAnB,EAAA,SAAAgB,EACA,QAAArD,KAAAwD,EAEA,WADAC,SAAAC,KAAA,+BAAAL,EAGAxD,GAAA2D,EAAA,IAAAf,QAAAe,GAAA,IAAAD,EAAAI,QAAA,6CAEA9D,GAEA+D,OAAA,SAAAC,GACA,IACA,MAAAjB,MAAAC,MAAAgB,GACiB,MAAAf,GACjB,SAAAC,OAAA,gEAGAe,OAAA,SAAAC,GACA,MAAAC,UAAAD,EAAA,KAEAE,QAAA,SAAAC,GACA,cAAAC,KAAAD,IAEAE,OAAA,SAAAC,GACA,MAAAA,KAGA9D,EAAAiB,wBAAA,WACA,GAAAhD,MAAsB8F,GAAA,wBAKtB,OAJApE,GAAA1B,GACAA,EAAA0B,SAAAC,WAAAW,QAAA,SAAAyD,GACAD,EAAAE,KAAAD,EAAA,GAAAnC,iBAEAkC,GAEA/D,EAAAqB,kBAAA,WACA,GAAA/B,GAAAc,EAAAxC,IACAwC,GAAA8D,cACA9D,EAAA8D,aAAA,EACA9D,EAAAF,KAAAiE,WAAA/D,EAMAd,EAAAc,EAAAI,QACA,yBAAAD,QAAA,SAAAuC,GACApE,OAAAC,eAAAyB,EAAAF,KAAA4C,GACAsB,IAAA,SAAAC,GACA/E,EAAAwD,GAAAuB,EACAjE,EAAAkE,QAEAxF,IAAA,WACA,MAAAQ,GAAAwD,UAKA9C,EAAAoB,yBAAA,SAAAmD,EAAAC,EAAAC,GACA,GAAAC,GAAAC,EAAArF,EAAAc,EAAAxC,IACA,iBAAA2G,GACAI,EAAAzC,EAAAO,MAAAgC,GACAnF,EAAAc,EAAAF,KAAAuC,MAAAJ,KAAAC,MAAAD,KAAAuC,UAAAxE,EAAAF,KAAAuC,WACA/D,OAAAmG,KAAAF,GAAApE,QAAA,SAAAuC,GACAxD,EAAAwD,GAAA6B,EAAA7B,UAEA1C,EAAAF,KAAAuC,MAAAnD,IAGA,SAAAiF,OACAnE,EAAAF,KAAAiC,KAAAD,EAAAC,KAAAsC,IAGA,WAAAF,OACAnE,EAAAF,KAAAmD,OAAAnB,EAAAmB,OAAAoB,KAGAC,EAAAxC,QAAAJ,GAAA,aAAAyC,GAAA,SAEAnE,EAAAR,WAAA2E,GAAAG,EAAAD,MAGA/E,EAAAM,YACAA,IAECF,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IJqYK,SAAU/B,EAAQD,EAASM,GKrgBjC,GAAAyB,GAAAC,CAEAD,UA04BCE,MA14BDD,EAAA,WACA,YACA,iBAAAE,GAKA,QAAAoF,KACA,GAAAC,IAAA,CACArG,QAAAmG,KAAAnF,EAAAsF,gBAAAzE,QAAA,SAAA0E,GACAvF,EAAAsF,eAAAC,GAAAC,WACAH,GAAA,KAGAA,GACArF,EAAA4E,OAGA,QAAAa,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAG,WAAAH,EAAAI,eACAC,EAAAL,EAAAK,EAAA/F,EAAAgG,iBACAC,EAAAP,EAAAO,EAAAjG,EAAAkG,eACA,IAAAlG,EAAAsF,eAAAM,GAAA,CAEA,GADAD,EAAA3F,EAAAsF,eAAAM,GACAD,EAAAQ,SAAAT,EAAAS,QAAAR,EAAAS,QAAAV,EAAAU,MAGiB,CACjB,IAAAT,EAAAH,SACA,MAEA,OAAAxF,GAAAqG,IAAAC,UAAAX,EAAAI,EAAAE,GALAjG,EAAAsF,eAAAM,OAAA7F,GAQA4F,EAAA,GAAAY,OAAAb,EAAAU,MAAAV,EAAAS,QACAnG,EAAAsF,eAAAM,GAAAD,EACAA,EAAAa,OAAA,WACAxG,EAAAqG,IAAAC,UAAAX,EAAAI,EAAAE,GACAb,KAEAO,EAAAc,IAAA,6BAA0CC,KAC1C,kDAAAhB,EAAAU,MAAA,aAAAV,EAAAS,OAAA,qJAGAP,EAAA,uCAMA,QAAAe,GAAAZ,EAAAE,GAqBA,MApBAF,IAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,gBACAlG,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA8D,8BACA7G,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAgE,oCACA/G,EAAAqG,IAAAW,YACAjB,GAAA/F,EAAA+C,MAAAkE,mCACAhB,GAAAjG,EAAA+C,MAAAmE,kCACA,QAAAlH,EAAAmH,gBACAnH,EAAAqG,IAAAe,OAAArB,EAAAE,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAA/F,EAAA+C,MAAAuE,8BAAArB,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAA,GAAA/F,EAAA+C,MAAAuE,8BAAArB,EAAAjG,EAAA+C,MAAAwE,gCACAvH,EAAAqG,IAAAe,OAAArB,EAAAE,KAEAjG,EAAAqG,IAAAgB,OAAAtB,EAAAE,EAAAjG,EAAA+C,MAAAwE,gCACAvH,EAAAqG,IAAAgB,OAAAtB,EAAA/F,EAAA+C,MAAAuE,8BAAArB,EAAAjG,EAAA+C,MAAAwE,gCACAvH,EAAAqG,IAAAgB,OAAAtB,EAAA,GAAA/F,EAAA+C,MAAAuE,8BAAArB,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAAE,EAAAjG,EAAA+C,MAAAwE,iCAEAvH,EAAAqG,IAAAmB,SACAxH,EAAAqG,IAAAoB,OACAzH,EAAA+C,MAAAkE,mCACAjH,EAAA+C,MAAAuE,8BACAtH,EAAA+C,MAAA2E,oCAEA,QAAAC,GAAAjC,EAAAK,EAAAE,GAqBA,MApBAF,IAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,gBACAlG,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6E,eACA5H,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA8E,qBACA7H,EAAAqG,IAAAW,YACAjB,GAAA/F,EAAA+C,MAAA+E,oBACA7B,GAAAjG,EAAA+C,MAAAgF,mBACA/H,EAAAgI,aAAAtC,EAAAjD,KAAAzC,EAAAiI,YACAjI,EAAAqG,IAAAe,OAAArB,EAAAE,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAA/F,EAAA+C,MAAAmF,eAAAjC,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAA,GAAA/F,EAAA+C,MAAAmF,eAAAjC,EAAAjG,EAAA+C,MAAAoF,iBACAnI,EAAAqG,IAAAe,OAAArB,EAAAE,KAEAjG,EAAAqG,IAAAgB,OAAAtB,EAAAE,GACAjG,EAAAqG,IAAAgB,OAAAtB,EAAA/F,EAAA+C,MAAAoF,gBAAAlC,EAAA,GAAAjG,EAAA+C,MAAAmF,gBACAlI,EAAAqG,IAAAgB,OAAAtB,EAAAE,EAAAjG,EAAA+C,MAAAmF,gBACAlI,EAAAqG,IAAAgB,OAAAtB,EAAAE,IAEAjG,EAAAqG,IAAAmB,SACAxH,EAAAqG,IAAAoB,OACAzH,EAAA+C,MAAA+E,oBACA9H,EAAA+C,MAAAmF,eACAlI,EAAA+C,MAAAqF,qBAEA,QAAAC,GAAAtC,EAAAE,EAAAqC,EAAAC,EAAAC,GACAzC,GAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,eACA,IAAAuC,GAAA1C,EAAAuC,EAAAI,EAAAzC,EAAAsC,CACAvI,GAAAqG,IAAAW,YACAhH,EAAAqG,IAAAe,OAAArB,EAAAyC,EAAAvC,GACAjG,EAAAqG,IAAAgB,OAAAoB,EAAAD,EAAAvC,GACAjG,EAAAqG,IAAAsC,iBAAAF,EAAAxC,EAAAwC,EAAAxC,EAAAuC,GACAxI,EAAAqG,IAAAgB,OAAAoB,EAAAxC,EAAAsC,EAAAC,GACAxI,EAAAqG,IAAAsC,iBAAAF,EAAAC,EAAAD,EAAAD,EAAAE,GACA1I,EAAAqG,IAAAgB,OAAAtB,EAAAyC,EAAAE,GACA1I,EAAAqG,IAAAsC,iBAAA5C,EAAA2C,EAAA3C,EAAA2C,EAAAF,GACAxI,EAAAqG,IAAAgB,OAAAtB,EAAAE,EAAAuC,GACAxI,EAAAqG,IAAAsC,iBAAA5C,EAAAE,EAAAF,EAAAyC,EAAAvC,GAEA,QAAA2C,GAAA7C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,gBACAlG,EAAAqG,IAAAuC,SAAA7C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAM,GAAA9C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,gBACAlG,EAAAqG,IAAAwC,WAAA9C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAO,GAAAC,EAAAhD,EAAAE,GACAF,GAAA/F,EAAAgG,iBACAC,GAAAjG,EAAAkG,gBACAlG,EAAAqG,IAAAyC,SAAAC,EAAAhD,EAAAE,GAEA,QAAA+C,GAAArK,EAAAsK,GACAjJ,EAAAqG,IAAAW,aAEAkC,EAAA,WACAlJ,EAAAqG,IAAAe,OAAAzI,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAsH,EAAAjG,EAAAkG,iBACAlG,EAAAqG,IAAAgB,OAAA1I,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAyH,MAAAzH,EAAAsH,EAAAjG,EAAAkG,kBAEAuC,EAAA,WACAzI,EAAAqG,IAAAe,OAAAzI,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAyH,MAAAzH,EAAAsH,EAAAjG,EAAAkG,iBACAlG,EAAAqG,IAAAgB,OAAA1I,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAyH,MAAAzH,EAAAsH,EAAAjG,EAAAkG,gBAAAvH,EAAAwH,SAEAuC,EAAA,WACA1I,EAAAqG,IAAAe,OAAAzI,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAsH,EAAAjG,EAAAkG,gBAAAvH,EAAAwH,QACAnG,EAAAqG,IAAAgB,OAAA1I,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAyH,MAAAzH,EAAAsH,EAAAjG,EAAAkG,gBAAAvH,EAAAwH,SAEA3H,EAAA,WACAwB,EAAAqG,IAAAe,OAAAzI,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAsH,EAAAjG,EAAAkG,iBACAlG,EAAAqG,IAAAgB,OAAA1I,EAAAoH,EAAA/F,EAAAgG,iBAAArH,EAAAsH,EAAAjG,EAAAkG,gBAAAvH,EAAAwH,UAGA8C,KACAjJ,EAAAqG,IAAAmB,SAEA,QAAA2B,GAAAJ,EAAA3C,GACA,GAAAzH,GAAA2J,EAAA,CACA,OAAAtI,GAAAoJ,cAAAL,IAAA/I,EAAAoJ,cAAAL,GAAA3C,GACApG,EAAAoJ,cAAAL,GAAA3C,IAGAkC,EAAAtI,EAAAqG,IAAAgD,YAAAN,GAAA3C,MACApG,EAAAoJ,cAAAL,GAAA/I,EAAAoJ,cAAAL,OACApK,GAAiBgG,MAAAoE,EAAA3C,MAAAkC,GACjBtI,EAAAoJ,cAAAL,GAAA3C,GAAAzH,EACAA,GAEA,QAAA2K,GAAA5D,GACA,GAAA6D,GAAAvJ,EAAA+C,MAAA2C,EAAA3C,MAAA,eACAyG,EAAAxJ,EAAA+C,MAAA2C,EAAA3C,MAAA,cACA0G,EAAAzJ,EAAA+C,MAAA2C,EAAA3C,MAAA,gBACA2G,EAAA1J,EAAA+C,MAAA2C,EAAA3C,MAAA,iBACA4G,EAAAH,EAAA9D,EAAAS,OAAA,GAAAT,EAAAS,OACAyD,EAAAL,EAAA7D,EAAAwC,eAAAxC,EAAAmE,iBACAnE,GAAAqD,KAAAI,EAAAzD,EAAAI,eAAAJ,EAAAU,MAAAqD,EAAAF,GACA7D,EAAAqD,KAAA5C,OAAAT,EAAAoE,WACA,UAAApE,EAAAqE,oBACAH,EAAAlE,EAAAU,MAAAV,EAAAqD,KAAA3C,MAAAqD,EACa,WAAA/D,EAAAqE,sBACbH,EAAAlE,EAAAU,MAAA,EAAAV,EAAAqD,KAAA3C,MAAA,GAEA,QAAAV,EAAAsE,kBACAL,EAAAH,EAAA9D,EAAAqD,KAAA5C,OACa,WAAAT,EAAAsE,oBACbL,EAAAjE,EAAAS,OAAAuD,EAAAhE,EAAAqD,KAAA5C,QAEAT,EAAAqD,KAAAhD,EAAAL,EAAAK,EAAA6D,EACAlE,EAAAqD,KAAA9C,EAAAP,EAAAO,EAAA0D,EACAb,EAAApD,EAAAqD,KAAApE,MAAAe,EAAAqD,KAAAhD,EAAAL,EAAAqD,KAAA9C,GAxLA,GAAAgE,MACAC,EAAA,EACAC,EAAA,EACAnK,GAAAsF,kBA6LAtF,EAAA4E,KAAA,SAAAwF,GA8IA,QAAAC,GAAAzL,EAAA0L,EAAAC,GACA,gBAAAC,EAAAC,EAAAC,GACA,GACAC,GACAjF,EAaApC,EAfAsH,EAAAJ,EAAAzH,OAAA,OAGA8H,EAAA,aAAA3G,KAAA0G,GACAE,EAAA,aAAA5G,KAAA0G,GACAG,EAAA,kBAAAH,EACAI,EAAA,qBAAAJ,EACAK,EAAAjL,EAAAkL,WAAAX,KAAA,IAAAvK,EAAAkL,WAAAX,GAAApH,QAAAuH,GACAS,EAAAnL,EAAAoL,OAAAxM,EAAAoB,EAAAiI,aAAA,IAAAjI,EAAAoL,OAAAxM,EAAAoB,EAAAiI,WAAA9E,QAAAuH,GACAW,EAAArL,EAAAsL,WAAAhB,WAAAC,GAAAvK,EAAAsL,WAAAC,cAAAb,EACAc,EAAA,gBAAA5M,GAAA4L,EAAA3L,OAAA,OAAAD,EAAA4L,EAAA3L,WAAAkB,KAAAnB,EAAA4L,EAAA3L,MACA4M,IAAAzL,EAAA0L,OAAAC,KAAA3L,EAAAsL,WAAAhB,YAAAC,GACAvK,EAAA0L,OAAAE,QAAA5L,EAAAsL,WAAAC,eAAAb,IACA,IAAAA,IAAA,IAAAH,KACAQ,EAAA,gDAEAc,EAAA7L,EAAA8L,WAAAtB,EAAAuB,MAAA,UACAC,EAAA,EACAC,EAAA,EACAC,EAAAlM,EAAAmM,MAAAP,QAAAb,EAAA,aAAAP,EAAAxK,EAAAiI,YAAAuC,EAAApE,MACAgG,GACAzH,MAAA/F,EAAA4L,EAAA3L,MACAwN,IAAAzN,EACA4L,SA0EA,IAxEA,kBAAAI,IACAsB,EAAA5D,EAAAvC,OAGAhG,KAAAmM,IACAA,EAAAlM,EAAA+C,MAAAuJ,aAEAvG,EAAAmG,EAAAlM,EAAA+C,MAAAwJ,gBAAA,IACAxG,GAAAmG,EAAAlM,EAAA+C,MAAAwJ,iBAEAlB,IACAT,EAAA,eAEA,IAAA5K,EAAAwM,YAAArJ,QAAAmH,IAAAO,GACA7K,EAAAwM,YAAAjI,KAAA+F,GAEAhH,EAAAtD,EAAAyM,cAAA,kBAAAL,GACAM,EAAA3G,EACA4G,EAAA1G,EACA,eAAA2E,GACA8B,EAAA,EACAC,EAAA,GACqB5B,EACrB2B,EAAA,EACqB7B,IACrB8B,EAAA,GAEAjH,GACAqG,KAAAP,EAAA,uBAAAhB,EAAAuB,KACAhJ,MAAA6H,EACAgC,SAAA,uBACA7G,EAAA2G,EACAzG,EAAA0G,EACA5C,oBAAA/J,EAAA+C,MAAA6H,EAAA,uBACAZ,kBAAAhK,EAAA+C,MAAA6H,EAAA,qBACAiC,UAAA7M,EAAAkG,gBAAAyG,EACAG,WAAA9M,EAAAgG,iBAAA0G,EACAK,UAAA/M,EAAAgN,UAAAD,UACAE,WAAAjN,EAAAgN,UAAAC,WACA5B,UAAAI,EACAN,UACAF,WACA7E,MAAA8F,EACA/F,OAAA+G,EACAC,YAAAjB,EACAkB,aAAAF,EACAzI,WAAAzE,EAAAU,KAAA+D,WACA4I,aAAArN,EAAAU,KAAA+D,WACAhC,KAAA7D,EACAkM,WACAD,WACAG,iBACAsC,kBAAA9C,EAAA8C,gBACAvC,cACAwC,UACA/C,SACAe,YAAAb,EACAJ,SAAAC,EACAiD,gBAAA/C,EACAgD,aAAAnD,EACAkB,SACAkC,QAAA1N,EAAAE,WAAArB,MAAA,IAAAD,EAAAoB,EAAAiI,UAAA,IAAAuC,EAAAxK,EAAAiI,UACA0F,WAAA3N,EAAAU,KACAmF,UAAA,GACA4F,eACA9G,MAAAkG,IAAAE,EAAAP,EAAAoD,OAAApD,EAAA3L,KAAAD,EAAA4L,EAAA3L,OAEAuN,EAAA1G,OACAA,EAAAmI,WAAAnI,EAAAmF,SAAA7K,EAAAmM,MAAAR,MAAA,GAAAmC,EACApI,EAAAqI,UAAArI,EAAAmF,SAAA7K,EAAAmM,MAAAP,QAAAoC,WAAAhO,EAAAmM,MAAAP,QAAApB,EAAAxK,EAAAiI,WACAvC,EAAA1F,EAAAiI,UAAArJ,EAAAoB,EAAAiI,UACAjI,EAAAiO,aAAAC,QAAAxI,IACA1F,EAAAyM,cAAA,mBAAAL,GAAA,CA+CA,GA9CApM,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,mBACA5K,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA6H,EAAA,eACA5K,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAA6H,EAAA,eACAO,IACAnL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,wBACA5K,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA6H,EAAA,qBAEAK,IACAjL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,2BACA5K,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA6H,EAAA,wBAEAa,IACAzL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA0I,EAAA,oBAEAzL,EAAAyM,cAAA,aAAAL,GACA1G,EAAA8F,SACA9F,EAAAS,SAAA2H,IACApI,EAAAS,OAAA2H,GAAA9N,EAAA+C,MAAAqL,wBACAC,GAAA,GAEA3I,EAAAU,MAAApG,EAAAmM,MAAAP,QAAApB,EAAAxK,EAAAiI,YAAAjI,EAAA+C,MAAAuL,wBAEAf,IAAA7H,EAAAqF,cACArF,EAAAS,OAAAnG,EAAAmM,MAAAR,KAAA4C,EAAAvO,EAAAiI,YAAAjI,EAAA+C,MAAAmK,YAEAxH,EAAA8F,SACA5C,EAAA8D,EAAAC,EAAAjH,EAAAU,MAAAV,EAAAS,QACA0C,EAAA6D,EAAAC,EAAAjH,EAAAU,MAAAV,EAAAS,SAEAnG,EAAAqG,IAAAmI,OACAnG,EAAA3C,EAAAK,EAAAL,EAAAO,EAAAP,EAAAU,MAAAV,EAAAS,OAAA,GACAnG,EAAAqG,IAAAoI,OACAzO,EAAAyM,cAAA,kBAAAL,GACA1G,EAAAS,SAAA+G,GAAAK,IAAA7H,EAAAqF,cACA/K,EAAAmM,MAAAR,KAAAd,GAAA,EAAAjM,EAAAoB,EAAAiI,WAAAvC,EAAAS,OACAkI,GAAA,GAEA3I,EAAAU,QAAA8F,IACAlM,EAAAmM,MAAAP,QAAApB,EAAAxK,EAAAiI,WAAAvC,EAAAU,MACAiI,GAAA,GAEAtD,GAAA/K,EAAAE,WAAAwO,OACA1O,EAAAyM,cAAA,kBAAAL,KACAH,EAAAtE,EAAAjC,EAAA1F,EAAA+C,MAAA6H,EAAA,eAAA+B,EAAA,KAGA3M,EAAAE,WAAAyO,gBAAA5D,IACAA,EACA,GAAArF,EAAA8F,SAAAxL,EAAAyM,cAAA,uBAAAL,GAAA,CACA,IAAApM,EAAA4O,WAAAlJ,EAAAgI,QAAA,CAMA,GALA/C,EAAA3K,EAAAQ,KAAAmK,oBAAA3K,EAAAQ,KACAmK,EAAA9L,KAAAmB,EAAAE,WAAA2O,eAAAnJ,EAAAgI,WAAA3N,GACA4K,EAAAlG,WAAAiB,EACAiF,EAAAlI,KAAA7D,EAAA4L,EAAA3L,MACAuN,EAAAzB,qBACA3K,EAAAyM,cAAA,uBAAAL,GAAqF,MACrFpM,GAAA4O,WAAAlJ,EAAAgI,QAAA1N,EAAAY,WAAA+J,GACA3K,EAAAmM,MAAAR,KAAA4C,EAAAvO,EAAAiI,WACAjI,EAAAmM,MAAAR,KAAA4C,EAAAvO,EAAAiI,YAAAjI,EAAA+C,MAAA+L,eACAT,GAAA,EAEA3I,EAAAqJ,KAAA/O,EAAA4O,WAAAlJ,EAAAgI,QACAhI,EAAAqJ,KAAAtK,WAAAiB,EACAA,EAAAqJ,KAAAC,SAAA,EACAtJ,EAAAqJ,KAAAnK,OACA5E,EAAAyM,cAAA,iBAAAL,OACyB1G,GAAA8F,SACzBxL,EAAA4O,WAAAlJ,EAAAgI,UACA1N,EAAA4O,WAAAlJ,EAAAgI,QAAAjJ,WAAA2I,aAAA,GAEAvC,GAAA7K,EAAAiP,UAAAzE,EAAA3L,OACAmB,EAAAyM,cAAA,qBAAAL,KACAJ,EAAArF,EAAA+F,EAAA1M,EAAA+C,MAAA6H,EAAA,oBAGA5K,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,SACAO,IACAnL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,eAEAK,IACAjL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA6H,EAAA,kBAEAa,IACAzL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA0I,EAAA,UAEAzL,EAAAqG,IAAA6I,KAAAlP,EAAA+C,MAAA6H,EAAA,QACAlF,EAAAoE,WAAA9J,EAAA+C,MAAA6H,EAAA,cACAlF,EAAAwC,eAAA+D,EACAvG,EAAAmE,kBAAAmC,EACA1I,MAAAvD,KAAAuD,IAAAuI,EACAA,EAAAO,GAAA,OACArM,KAAAuD,GAAAuI,IACAvI,EAAA,GACAE,QAAAC,KAAA,mCACA+G,EAAAuB,KAAA,wBAEArG,EAAAI,oBAAA/F,KAAAuD,GAAA,OAAAA,IAAA,IAAA6L,WACAnP,EAAAoP,mBAAArP,KAAAC,EAAAoP,cAAA9L,IAAAuH,IACAnF,EAAAI,eAAA9F,EAAAE,WAAAmP,iBAAA/L,GAEAtD,EAAAyM,cAAA,aAAAL,KACA1G,EAAAG,WAAA,SAAA2E,EAAAuB,KACAtG,EAAAC,GAEA4D,EAAA5D,IA8BA,OAzBA2F,KACAiE,EAAA5J,GAEAuF,IAAAF,IACA/K,EAAAkL,WAAAxF,EAAA4E,SAAA,KACA,IAAAtK,EAAAkL,WAAAxF,EAAA4E,SAAA,GAAAnH,QAAAuC,EAAA6F,cACA,IAAA7F,EAAA4E,UACA5E,EAAAmF,UACA0E,EAAAhL,MAAAmB,EAAA,MAEA1F,EAAAkL,WAAAxF,EAAA4E,SAAA,KACA,IAAAtK,EAAAkL,WAAAxF,EAAA4E,SAAA,GAAAnH,QAAAuC,EAAA6F,cACAgE,EAAAhL,MAAAmB,EAAA,MAEA1F,EAAAkL,WAAAxF,EAAA4E,WAAA,IAAA5E,EAAA6F,cACA,IAAAvL,EAAAkL,WAAAxF,EAAA4E,UAAAnH,QAAAuC,EAAA6F,YAAA,IACAgE,EAAAhL,MAAAmB,EAAA,MAEA1F,EAAAkL,WAAAxF,EAAA4E,WAAA5E,EAAA6F,cAAA3L,EAAA4P,SACA,IAAAxP,EAAAkL,WAAAxF,EAAA4E,UAAAnH,QAAAuC,EAAA6F,YAAA,IACAgE,EAAAhL,MAAAmB,EAAA,OAGA1F,EAAAqG,IAAAoJ,UACA1J,GAAAL,EAAAU,MAAApG,EAAA+C,MAAAwJ,gBACA7G,EAAAU,QAGA,QAAAsJ,GAAAC,EAAAC,EAAArF,GACA,GAAAsF,EACA7P,GAAAE,WAAA4P,iBACA/J,EAAA,EACAgK,GAAqCA,cAAAH,EAAA,GACrCG,EAAA/P,EAAAiI,UAAA0H,EAAA3P,EAAAiI,UACA4H,GACAhR,KAAA,gBACAuH,MAAApG,EAAA+C,MAAAiN,mBACAjN,MAAA,gBACAgJ,KAAA,SACAtJ,KAAAkN,EAAA3P,EAAAiI,UACA2H,OAAA,GAEAC,EAAA7P,EAAAiI,UAAA0H,EAAA3P,EAAAiI,UACAsF,EAAAvN,EAAAgI,aAAA2H,EAAA3P,EAAAiI,WACAoC,EAAA0F,EAAAH,EAAArF,GAAAsF,GAAA,OAqEA,QAAAI,GAAAxH,EAAA7J,GACA,GAAAL,GAAA2R,EAAAC,EAAApR,EAAAqR,EAAAxQ,EAAA4P,MACA,IAAAvJ,EAAA,EAAAiH,EAAA3E,EACA,QAOA,IALAgG,EAAAvO,EAAAyC,KAAAgG,GACA8E,EAAAvN,EAAAgI,aAAAuG,EAAAvO,EAAAiI,WACAkI,EAAAnQ,EAAAmM,MAAAR,KAAA4C,EAAAvO,EAAAiI,YAAAjI,EAAA+C,MAAAmK,WACAgD,EAAA3C,EAAAvN,EAAAmM,MAAAkE,MAAA9B,EAAAvO,EAAAiI,WAAA,EACA6F,EAAAqC,EAAAD,EACAjK,GAAA,EAAA6H,EACA,QAMA,KAJA9N,EAAAE,WAAA4P,iBACA/J,GAAAuK,GAEApD,EAAAY,EACA/O,EAAAiB,EAAAuQ,gBAA8CxR,EAAAqR,EAAOrR,GAAA,EAGrD,GAFAR,EAAAyB,EAAA0L,OAAAE,QAAA7M,IACAgH,GAAAsE,EAAAkE,EAAA9F,EAAA7J,GAAAgB,EAAArB,KAAAQ,IACAiB,EAAAoG,MAAA,CACApG,EAAAwQ,iBAAAzR,EACAiB,EAAAyQ,iBAAA1K,CACA,OAwCA,MApCAmH,GAAAY,EACA/H,GAAA,EAAA/F,EAAAgN,UAAAC,WAAAjN,EAAA0Q,gBAAA1Q,EAAA+C,MAAAwJ,gBAEAoE,EAAA3Q,EAAA4O,WAAAL,EAAAvO,EAAAiI,WACAQ,IAAAzI,EAAAyC,KAAA+M,QAAAjC,GACAoD,EAAA3B,SAAA,EACA2B,EAAAlM,YACAoI,UAAA5G,EAAAkK,EAAAnQ,EAAAkG,gBACA4G,WAAAwD,EAAA,EAAAtQ,EAAAgG,iBACAoH,aAAA8C,EACA/C,YAAAnN,EAAAoG,MAAAkK,EAAAtQ,EAAA+C,MAAA6N,eAAA,EACAvD,aAAArN,EAAAU,KAAA+D,WACAA,WAAAzE,EAAAU,KAAA+D,WACA1B,MAAA/C,EAAA+C,MACA6J,SAAA,uBACAG,UAAA/M,EAAAgN,UAAAD,UACAE,WAAAjN,EAAAgN,UAAAC,WACA3C,SAAA7B,GAEAzI,EAAAiO,aAAAC,SACA5D,SAAAvE,EACAwF,YAAA,EACAtF,EAAA0K,EAAAlM,WAAAoI,UACA9G,EAAA4K,EAAAlM,WAAAqI,WACA3G,OAAAwK,EAAAlM,WAAA2I,aACAhH,MAAAuK,EAAAlM,WAAA0I,YACApK,MAAA,YACAgJ,KAAA4E,EAAAlM,WAAAmI,WAEA+D,EAAA/L,QACiB+L,IACjBA,EAAAlM,WAAA2I,aAAA,QACApN,GAAAmM,MAAAkE,MAAA9B,EAAAvO,EAAAiI,YAEA4I,EAAAtM,MAAAgK,EAAA9F,EAAA7J,EAAAqH,EAAA6H,IACA7H,GAAAiH,EAAAlN,EAAA+C,MAAAwJ,iBACA,EA9gBA,IAAAvM,EAAAyM,cAAA,mBACAzM,EAAA8Q,aAAA9Q,EAAAmG,QAAAnG,EAAAoG,OAAA,CAGA,GAAApG,EAAA8Q,aAAA1G,EAEA,WADA2G,uBAAA/Q,EAAA2N,WAAA/I,KAGA,SAAA5E,EAAAU,KAAAsO,QAAA,CAIA,GAAAX,GAAA0B,EAAApQ,EAAA+M,EAAAC,EAAAgE,EAAApD,EACAO,EAAAE,EAAA/H,EAAAF,EAAApH,EAAA4J,EAAAD,EAAA1I,EAAA6I,EAAA8F,EAAAe,EACAC,KACAsB,KACArS,EAAAwB,EAAAyC,KAAA+M,OACAwB,EAAAhR,EAAAiR,gBACAC,EAAAlR,EAAAmR,yBACAb,EAAAtQ,EAAAoR,2BACAlE,EAAAlN,EAAA+C,MAAAmK,UACAhD,IAAA,EACAvK,EAAA0R,YAAAC,MAEAtR,EAAAyC,KAAA+M,OAAAxP,EAAA0L,OAAAC,KAAA6D,QACAxP,EAAAuR,kBA2pBAvR,EAAAqG,IAAAmI,OApKA,WACAxO,EAAAwM,eACA5M,EAAAI,EAAAwR,mBACAxR,EAAAiO,gBACAjO,EAAAkG,gBAAAlG,EAAA8Q,YAAA9Q,EAAAyE,WAAAoI,UAAA,EACA7M,EAAAgG,iBAAAhG,EAAA8Q,YAAA9Q,EAAAyE,WAAAqI,WAAA,EACAvE,EAAAvI,EAAAmG,OACAmC,EAAAtI,EAAAoG,MACApG,EAAA8Q,aACA9Q,EAAAqG,IAAAoL,MAAAvQ,OAAAwQ,iBAAAxQ,OAAAwQ,qBAGA,WACArJ,EAAA,IAAAC,EAAAC,EAAA,GACAvI,EAAAqG,IAAAoI,OACAzO,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA4O,gBACA/I,EAAA,IAAAN,EAAAC,MAEA,WACA,GAAAxJ,GAAAM,EAAAd,EAAA6R,EAAAxQ,EAAA4P,MAGA,KAFAzJ,GAAA,EAAA/F,EAAAgN,UAAAC,WAAAjN,EAAA0Q,gBAAA1Q,EAAA+C,MAAAwJ,gBACAtG,GAAA,EAAAjG,EAAAgN,UAAAD,UAAAmE,EAAAlR,EAAA4R,eAAA5R,EAAA+C,MAAAwJ,gBACA9D,EAAAzI,EAAA6R,eAA6CpJ,EAAAjK,EAAOiK,GAAA,EAEpD,GADApJ,EAAAW,EAAA0L,OAAAC,KAAAlD,IACAwH,EAAA5Q,EAAAoJ,GAAA,CACAzI,EAAA8R,kBAAArJ,EACAzI,EAAA+R,kBAAA9L,CACA,OAGA,GAAAjG,EAAAE,WAAA8R,WAAA,CAMA,IALAhS,EAAAE,WAAA4P,iBACA/J,GAAAuK,GAEAxC,EAAAZ,EAAAlN,EAAA+C,MAAAmK,WACAK,GAAA,EACAxO,EAAAiB,EAAAuQ,gBAAkDxR,EAAAqR,IAClD7R,EAAAyB,EAAA0L,OAAAE,QAAA7M,MACAgH,GAAAsE,EAAArK,EAAAiS,OAAAjS,EAAAyC,KAAA+M,OAAAxP,EAAAyC,KAAA+M,QAAA5P,EAAArB,KAAAQ,IACAiB,EAAAoG,MAAApG,EAAAgN,UAAAC,aAHyDlO,GAAA,GAOzD8R,EAAAtM,MAAAvE,EAAAiS,OAAAjS,EAAAyC,KAAA+M,OAAAxP,EAAAyC,KAAA+M,OAAAvJ,EAAA6H,QAqDA,WACA9N,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAmP,4BACAlS,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAoP,4BACA5C,EAAA1O,QAAA,SAAAlC,GACAqK,EAAArK,EAAA,GAAAA,EAAA,SAGA,WACA2Q,IACA,QAAAtP,EAAAE,WAAAkS,cACApS,EAAAsL,YAAAtL,EAAAsL,WAAAhB,WAAAgF,EAAAhF,WACAtK,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAsP,6BACArS,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAuP,6BACAzJ,EAAA,EAAAyG,EAAArJ,EAAAjG,EAAAuS,iBAAAjC,EAAAxC,KAGA9N,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAsP,6BACArS,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAuP,6BACAzJ,EAAAyG,EAAAvJ,EAAAuJ,EAAArJ,EAAAqJ,EAAAlJ,MAAAkJ,EAAAnJ,aArPA,WACA,GAAAvH,GAAAL,EAAAQ,EAAAyT,EAAAhI,EAAA4F,EAAAxQ,EAAA4P,MAMA,IALAqB,EAAAhQ,QAAA,SAAA4R,GACAxM,EAAAwM,EAAA,GACAvF,EAAAuF,EAAA,GACA/C,EAAA+C,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEAzS,EAAAE,WAAAwS,kBAAA,CAQA,IAPA3M,GAAA,EAAA/F,EAAAgN,UAAAC,WAAAjN,EAAA0Q,gBACA1Q,EAAAE,WAAA4P,iBACA/J,GAAAuK,GAEArK,EAAA,EAEAiH,EAAAlN,EAAAmR,yBACApS,EAAAiB,EAAAuQ,gBAAkDxR,EAAAqR,IAClD7R,EAAAyB,EAAA0L,OAAAE,QAAA7M,GACAyL,EAAA5K,EAAArB,GACAK,GACAgP,MAAApD,EAAAoD,MACA/O,KAAA2L,EAAA3L,KACAuH,MAAAoE,EAAApE,MACArD,MAAA,mBACAgJ,KAAA,SACA6D,MAAA7Q,EACA4T,MAAApU,GAEAiU,GAA4CA,iBAAAhI,EAAAoD,OAAApD,EAAA3L,MAC5C2T,EAAAxS,EAAAiI,UAAA,IAAAuC,EAAAxK,EAAAiI,UACArJ,EAAAoB,EAAAiI,UAAAuC,EAAAxK,EAAAiI,aACAlC,GAAAsE,EAAAmI,GAAA,MAAA5T,EAAAG,EAAAR,IACAyB,EAAAoG,MAAApG,EAAAgN,UAAAC,aAhByDlO,GAAA,GAqBzDgH,EAAAuC,IACA3J,GACAE,KAAA,GACAuH,MAAApG,EAAA+C,MAAA6N,eACA7N,MAAA,gBACA6P,cAAA,EACAtF,iBAAA,EACAvB,KAAA,SACA6D,MAAAhQ,EAAA4P,QAEA7Q,EAAAqB,EAAAiI,UAAA,mBACAoC,GAAkCwI,OAAA,KAAW,MAAAlU,GAAA,OAG7CqB,EAAAE,WAAA4P,iBACA9B,GAAsCA,WAAA,IACtCA,EAAAhO,EAAAiI,UAAA,aACAlC,EAAA,EACApH,GACAE,KAAA,aACAuH,MAAApG,EAAA+C,MAAAiN,mBACAjN,MAAA,aACAgJ,KAAA,SACA6D,OAAA,GAEAjR,EAAAqB,EAAAiI,UAAA,aACAoC,EAAA2D,GAAA,MAAArP,GAAA,WAmHA,WACA,GAAAqB,EAAA8S,cAAA,CACA,GAAApK,IACAvC,OAAAnG,EAAA8S,cAAA3M,OACAC,MAAApG,EAAA8S,cAAA1M,MACAL,EAAA/F,EAAA8S,cAAA/M,EAAA/F,EAAA8S,cAAAC,WAAAhN,EACAE,EAAAjG,EAAA8S,cAAA7M,EAAAjG,EAAA8S,cAAAC,WAAA9M,GAEAvH,GACA0H,MAAAkC,EACA0K,OAAAzK,EACAxC,EAAA,EACAE,EAAA,EAEAjG,GAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAkQ,6BACAjT,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAmQ,yBACAlT,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAoQ,yBACA,gBAAAnT,EAAAoT,UACA1K,EAAAtC,MAAAkC,EACAI,EAAA3C,EAAA,EACArH,EAAA0H,MAAAkC,EACA5J,EAAAuH,EAAAjG,EAAAiR,YAAAhL,EACA2C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACAnG,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAsQ,8BACArT,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAuQ,8BACAtT,EAAAiR,YAAA3G,WAAAtK,EAAA8S,cAAAxI,UACAtK,EAAAiR,YAAA3G,SAAA,IAAAtK,EAAA8S,cAAAxI,UACAtB,EAAAtK,EAAA,MAEiB,mBAAAsB,EAAAoT,UAAApT,EAAA8S,gBACjBpK,EAAAvC,OAAAoC,EACAG,EAAAzC,EAAA,EACAvH,EAAAyH,OAAAoC,EACA7J,EAAAqH,EAAA/F,EAAAiR,YAAAlL,EACA6C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACAnG,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAAsQ,8BACArT,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAuQ,8BACAtT,EAAAiR,YAAA1F,cAAAvL,EAAA8S,cAAAvH,aACAvL,EAAAiR,YAAA1F,YAAA,IAAAvL,EAAA8S,cAAAvH,aACAvC,EAAAtK,EAAA,UA5kBA,WACA,GAAAkH,IACAG,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACArD,MAAA,uBAEA1D,GACA0G,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACArD,MAAA,yBAEAwQ,GACAxN,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACArD,MAAA,uBAEAyQ,GACAzN,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACArD,MAAA,yBAEA0Q,GACA1N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA0E,UAAA,EACA4I,mBAAA,EACA3Q,MAAA,qBAEArE,EAAA,EAAAsB,EAAA+C,MAAA4Q,mBACA/U,EAAA,GAAAoB,EAAA+C,MAAA4Q,kBACA3T,GAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA6Q,qBACA5T,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAA8Q,qBAEAjO,EAAAG,GAAAuC,EAAAtI,EAAA+C,MAAA6N,eAAA5Q,EAAA+C,MAAA8Q,qBAAAjV,EACAgH,EAAAK,GAAAiL,EACAtL,EAAAQ,MAAApG,EAAA+C,MAAA6N,eAAA5Q,EAAA+C,MAAA8Q,qBAAAjV,EACAgH,EAAAO,OAAAoC,EAAA2I,EAAAlR,EAAA+C,MAAA6N,eAAAhS,EAAAF,EACAsB,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA+Q,yBACAlL,EAAAhD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAAzH,GACAmK,EAAAjD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAAzH,GAEA6U,EAAAxN,EAAAH,EAAAG,EAAA/F,EAAA+C,MAAA4Q,mBACAJ,EAAAtN,EAAAiL,EAAAlR,EAAA+C,MAAA4Q,oBACA/N,EAAAO,OAAAnG,EAAAgN,UAAA+G,kBACA/T,EAAAgN,UAAAD,UAAA/M,EAAAgN,UAAAgH,cACAT,EAAAnN,MAAApG,EAAA+C,MAAAkR,kBACAV,EAAApN,OAAAnG,EAAAgN,UAAA+G,gBACA/T,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAmR,kBACA,WAAAhQ,KAAA8M,EAAA3Q,WACAL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAoR,sBAEAZ,EAAApN,OAAAP,EAAAO,SACAkC,EAAAkL,EAAAxN,EAAAwN,EAAAtN,EAAAsN,EAAAnN,MAAAmN,EAAApN,OAAAnG,EAAA+C,MAAAqR,0BACApU,EAAAqG,IAAAmB,SACAxH,EAAAqG,IAAAoB,QAGApI,EAAA0G,GAAAuK,EACAjR,EAAA4G,GAAAsC,EAAAvI,EAAA+C,MAAA6N,eAAAhS,EACAS,EAAA+G,MAAAkC,EAAAtI,EAAA+C,MAAA6N,eAAAN,EAAA1R,EAAAF,EACAW,EAAA8G,OAAAnG,EAAA+C,MAAA6N,eAAA5Q,EAAA+C,MAAA8Q,qBAAAjV,EACAoB,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAA+Q,yBACAlL,EAAAvJ,EAAA0G,EAAA1G,EAAA4G,EAAA5G,EAAA+G,MAAA1H,EAAAW,EAAA8G,QACA0C,EAAAxJ,EAAA0G,EAAA1G,EAAA4G,EAAA5G,EAAA+G,MAAA1H,EAAAW,EAAA8G,QAEAqN,EAAAvN,EAAA5G,EAAA4G,EAAAjG,EAAA+C,MAAA4Q,mBACAH,EAAAzN,EAAAuK,EAAAtQ,EAAA+C,MAAA4Q,oBACAtU,EAAA+G,MAAApG,EAAAgN,UAAAqH,iBACArU,EAAAgN,UAAAC,WAAAjN,EAAAgN,UAAAsH,aACAd,EAAApN,MAAApG,EAAAgN,UAAAqH,eACAb,EAAArN,OAAAnG,EAAA+C,MAAAkR,kBACAjU,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAmR,kBACA,aAAAhQ,KAAA8M,EAAA3Q,WACAL,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAoR,sBAEAX,EAAApN,MAAA/G,EAAA+G,QACAiC,EAAAmL,EAAAzN,EAAAyN,EAAAvN,EAAAuN,EAAApN,MAAAoN,EAAArN,OAAAnG,EAAA+C,MAAAqR,0BACApU,EAAAqG,IAAAmB,SACAxH,EAAAqG,IAAAoB,QAGAzH,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAAwR,2BACAvU,EAAAqG,IAAAO,UAAA5G,EAAA+C,MAAAyR,+BACAf,EAAA1N,EAAA1G,EAAA0G,EAAA1G,EAAA+G,MAAA1H,EACA+U,EAAAxN,EAAAL,EAAAK,EAAAL,EAAAO,OAAAzH,EACA+U,EAAArN,MAAApG,EAAA+C,MAAA6N,eAAA5Q,EAAA+C,MAAA8Q,qBACAJ,EAAAtN,OAAAnG,EAAA+C,MAAA6N,eAAA5Q,EAAA+C,MAAA8Q,qBACAxL,EAAAoL,EAAA1N,EAAA0N,EAAAxN,EAAAwN,EAAArN,MAAAqN,EAAAtN,OAAA,GACAnG,EAAAqG,IAAAmB,SACAxH,EAAAqG,IAAAoB,OACAzH,EAAAiO,aAAAC,QAAAtI,GACA5F,EAAAiO,aAAAC,QAAAqF,GACAvT,EAAAiO,aAAAC,QAAA7O,GACAW,EAAAiO,aAAAC,QAAAsF,GACAxT,EAAAiO,aAAAC,QAAAuF,GACAzT,EAAAgN,UAAAyH,KACA7O,IACA2C,EAAAlJ,GAEAW,EAAAgN,UAAA0H,KACA9O,EAAA2N,EACAhL,EAAAiL,MAmjBAnF,GACArO,EAAA2U,QAAA,GAnFA,WACA3U,EAAAqG,IAAA8H,UAAAnO,EAAA+C,MAAA6R,gBACA5U,EAAAqG,IAAAS,YAAA9G,EAAA+C,MAAA8R,gBACAhM,EAAA,IAAA7I,EAAAoG,MAAApG,EAAAmG,WAuBA,WACA8D,EAAAC,EAAAC,GAAAkH,YAAAC,MAAA3R,CACA,IAAAf,EACAoB,GAAAE,WAAA4U,QACA9U,EAAAqG,IAAA6I,KAAA,kBACAtQ,KACAA,EAAAmW,MAAA9K,EAAA+K,OAAA,SAAAnF,EAAAnH,GACA,MAAAmH,GAAAnH,GACqB,GAAAuB,EAAAuF,QAAAyF,QAAA,GACrB,OACAhL,EAAAiL,IAAA,SAAArF,GAAuD,MAAAA,GAAAoF,QAAA,KAAuBE,KAAA,UAC9EvW,EAAAwW,WAAApW,OAAAmG,KAAAnF,EAAAsF,gBAAAkK,OACA5Q,EAAAoO,UAAAhN,EAAAgN,UAAAmC,WACAvQ,EAAAyW,YAAA,WAAsCrV,EAAA6R,eAAA,aAAA7R,EAAAuQ,gBAAA,IACtC3R,EAAA0W,YAAA,WAAsCtV,EAAA4R,eAAA,aAAA5R,EAAA0Q,gBAAA,IACtC9R,EAAA2W,aAAA,WAAuCvV,EAAAkG,gBAAA,aAAAlG,EAAAgG,iBAAA,IACvCpH,EAAA4W,oBAAAxV,EAAAwV,oBACAxV,EAAAwV,oBAAAzP,EAAA,KAAA/F,EAAAwV,oBAAAvP,EAAA,GACArH,EAAA6W,KAAA,aAA+BzV,EAAAoG,MAAA,eAAApG,EAAAmG,OAAA,IAC/BvH,EAAA8W,MAAA,SAAgC1V,EAAA0V,MAAA3P,EAAA,UAAA/F,EAAA0V,MAAAzP,EAAA,IAChCrH,EAAA+W,MAAA3V,EAAA4V,WACA,SAAiC5V,EAAA4V,WAAA7P,EAAA,UAAA/F,EAAA4V,WAAA3P,EAAA,IAAjC,GACArH,EAAAiX,SAAA7V,EAAAiO,aAAAuB,OACA5Q,EAAAkX,SAAA9V,EAAA8V,SACAlX,EAAAwU,SAAApT,EAAAoT,SACApT,EAAAiR,cACArS,EAAA2M,YAAAvL,EAAAiR,YAAA1F,YACA3M,EAAA0L,SAAAtK,EAAAiR,YAAA3G,SACA1L,EAAA4O,gBAAAxN,EAAAiR,YAAAzD,gBACA5O,EAAA6O,aAAAzN,EAAAiR,YAAAxD,aACA7O,EAAAyB,QAAAL,EAAAiR,YAAA5Q,QACAzB,EAAAmX,YAAA/V,EAAAiR,YAAA8E,YACAnX,EAAAmE,MAAA/C,EAAAiR,YAAAlO,MACAnE,EAAAmN,KAAA/L,EAAAiR,YAAAlF,MAEA/L,EAAAqG,IAAAmI,OACAxP,OAAAmG,KAAAvG,GAAAiC,QAAA,SAAAuC,EAAAwM,GACA,GAAAlR,GAAA0E,EAAA,KAAAxE,EAAAwE,EAEApD,GAAAqG,IAAAO,UAAA,2BACAgC,EAAA0H,EAFA,MAEAV,EAAA,IAFA,IAGA5P,EAAAqG,IAAAO,UAAA,mBACAkC,EAAApK,EAAA4R,EAAA,EAAAY,EAJA,GAIAtB,KAEA5P,EAAAqG,IAAAoJ,cAiBAzP,EAAAyM,cAAA,iBACAzM,EAAAqG,IAAAoJ,eAGCrP,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IL6gBK,SAAU/B,EAAQD,EAASM,GMz5CjC,GAAAyB,GAAAC,CAEAD,UA87BCE,MA97BDD,EAAA,WACA,YACA,iBAAAE,GACA,GAOAgW,GAPAC,GAA0BlQ,EAAA,EAAAE,EAAA,EAAA8G,UAAA,EAAAE,WAAA,GAC1BiJ,GAA8BjJ,WAAA,EAAAF,UAAA,GAC9BoJ,GAA0BlJ,WAAA,EAAAF,UAAA,GAC1BqJ,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAEAC,EAAA,CACAxW,GAAAyW,YAAA,SAAA5T,GACA,GAAA6T,GAAA1W,EAAA2W,OAAAC,wBACA3N,GACAlD,EAAAlD,EAAAgU,QAAA,GAAAC,QAAAJ,EAAAK,KACA9Q,EAAApD,EAAAgU,QAAA,GAAAG,QAAAN,EAAAO,IAMA,OAJAjX,GAAA8Q,cACA7H,EAAAlD,GAAA/F,EAAAgG,iBACAiD,EAAAhD,GAAAjG,EAAAkG,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACAyQ,SAGA1W,EAAAkX,aAAA,WACAd,GAAAH,EAAAhJ,WAAAkJ,EAAAlJ,aAAAgJ,EAAA/M,EAAAiN,EAAAjN,GACAmN,GAAAJ,EAAAlJ,UAAAoJ,EAAApJ,YAAAkJ,EAAA/M,EAAAiN,EAAAjN,GACAiN,GACAlJ,WAAAgJ,EAAAhJ,WACAF,UAAAkJ,EAAAlJ,UACA7D,EAAAmI,YAAAC,MAAA,KAGAtR,EAAAmX,UAAA,SAAAtU,GACA,kBACAuU,cAAApX,EAAAqX,iBACA,IAAApO,GAAAjJ,EAAAyW,YAAA5T,EACAyU,MAAAC,IAAAtB,EAAAlQ,GAAAuR,KAAAC,IAAAtB,EAAAhQ,GAAAjG,EAAAE,WAAAsX,gBACAlB,EAAAtW,EAAAyX,UAAAxO,EAAAlD,EAAAkD,EAAAhD,GACAjG,EAAA0X,UAAA7U,EAAAoG,GACAjJ,EAAA2X,UAAA9U,EAAAoG,GACAjJ,EAAA0X,UAAA7U,EAAAoG,GACAjJ,EAAA4E,UAIA5E,EAAA4X,WAAA,SAAA/U,GACAyT,GAAA,EACAtW,EAAA4V,WAAA5V,EAAAyW,YAAA5T,GACA0T,EAAAvW,EAAAyX,UAAAzX,EAAA4V,WAAA7P,EAAA/F,EAAA4V,WAAA3P,GAAA,GACAjG,EAAAyM,cAAA,cAAkDoL,YAAAhV,EAAA6C,KAAA1F,EAAAuW,iBAClDvW,EAAA8X,gBAAAjV,GACAA,EAAAkV,iBACA/X,EAAAgY,kBACA/K,WAAAjN,EAAAgN,UAAAC,WACAF,UAAA/M,EAAAgN,UAAAD,UACA7D,EAAAmI,YAAAC,MAAA,KAEA2E,GACAlQ,EAAA/F,EAAA4V,WAAA7P,EACAE,EAAAjG,EAAA4V,WAAA3P,EACAgH,WAAAjN,EAAAgN,UAAAC,WACAF,UAAA/M,EAAAgN,UAAAD,UACA7D,EAAA,GAEAlJ,EAAAiY,UAAApV,GACAqV,aAAAlY,EAAAmY,cACAf,cAAApX,EAAAqX,kBACArX,EAAAmY,aAAAC,WAAApY,EAAAmX,UAAAtU,GAAA7C,EAAAE,WAAAmY,mBACArY,EAAAqX,iBAAAiB,YAAAtY,EAAAkX,aAAA,IACAlX,EAAAuY,oBAAA,EACAC,SAAAC,KAAAC,iBAAA,YAAA1Y,EAAAiY,WAAyEU,SAAA,IACzEH,SAAAC,KAAAC,iBAAA,WAAA1Y,EAAA4Y,UAAA,GACAJ,SAAAC,KAAAC,iBAAA,cAAA1Y,EAAA6Y,aAAA,KAEA7Y,EAAA8Y,OAAA,SAAA5P,EAAAR,EAAA/J,EAAAC,GACA,MAAAD,IAAAuK,EAAAtK,IAAA,EAAAsK,GAAAR,GAEA1I,EAAA+Y,kBAAA,WACA,IAAA/Y,EAAA2W,SAAA3W,EAAAgN,UAAAgM,SAA2D,MAAAjI,uBAAA/Q,EAAA+Y,kBAC3D,IAAAhT,GACAE,EAGAiD,EAFA7J,EAAAgS,YAAAC,MAAA,IACA1S,EAAAoB,EAAAE,WAAA+Y,gCAAA,GAIA,IAFAhD,EAAA/M,EAAA+M,EAAA/M,GAAA7J,EAAAT,GACAsK,EAAA7J,EAAA4W,EAAA/M,EAAA,GACA,GAAAlJ,EAAAuY,oBAAA/B,EAAA,IAIA,MAHAA,GAAA,EACAxW,EAAAuY,oBAAA,OACArC,GAAkCjJ,YAAA,EAAAF,WAAA,GAGlCyJ,IAAA,EACAzQ,EAAA/F,EAAA8Y,OAAA5P,EAAA+M,EAAAhJ,YAAAiJ,EAAAjJ,WAAArO,GACAqH,EAAAjG,EAAA8Y,OAAA5P,EAAA+M,EAAAlJ,WAAAmJ,EAAAnJ,UAAAnO,GACAoB,EAAAgN,UAAAgM,SAAAjT,EAAAE,GACA8K,sBAAA/Q,EAAA+Y,oBAEA/Y,EAAA4Y,SAAA,SAAA/V,GACA,IAAA7C,EAAAyM,cAAA,YAAgDoL,YAAAhV,IAAhD,CACA,GAAAqW,GAAA5B,KAAAC,IAAAtB,EAAAlQ,GAAAuR,KAAAC,IAAAtB,EAAAhQ,GAAAjG,EAAAE,WAAAsX,cACAvO,GACAlD,EAAA/F,EAAA4V,WAAA7P,EAAAkQ,EAAAlQ,EACAE,EAAAjG,EAAA4V,WAAA3P,EAAAgQ,EAAAhQ,GAEAP,EAAA1F,EAAAyX,UAAAxO,EAAAlD,EAAAkD,EAAAhD,EACAjG,GAAA8V,WACAQ,EACAtW,EAAAmZ,QAAAtW,EAAA7C,EAAA4V,YACasD,IACbxT,EAAA2F,OACArL,EAAAoZ,YAAA1T,EAAA6F,YAAA7F,EAAA4E,WAEAtK,EAAA2X,UAAA9U,EAAA7C,EAAA4V,YACA5V,EAAAmZ,QAAAtW,EAAA7C,EAAA4V,YACA5V,EAAAqZ,MAAAxW,EAAA7C,EAAA4V,cAGAU,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAtZ,EAAAiY,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAtZ,EAAA4Y,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAtZ,EAAA6Y,aAAA,GACAX,aAAAlY,EAAAmY,cACAf,cAAApX,EAAAqX,kBACArX,EAAAkX,eACAhB,EAAAjJ,WAAAmJ,EAAApW,EAAAE,WAAAqZ,yBACArD,EAAAnJ,UAAAsJ,EAAArW,EAAAE,WAAAqZ,yBACAvZ,EAAAuY,oBAAA,EACA,IAAA/B,GAAA,WAAAtS,KAAAqS,EAAAxT,QAAAmW,GACAlZ,EAAA+Y,uBAGA/Y,EAAAiY,UAAA,SAAApV,GACA,GAAAjE,GAAAoB,EAAAyW,YAAA5T,EACA7C,GAAAyM,cAAA,aAAiDoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,gBACjDjR,EAAA8X,gBAAAjV,GACAA,EAAAkV,iBACA/X,EAAA8V,WACAG,GACAlQ,EAAAnH,EAAAmH,EAAA/F,EAAA4V,WAAA7P,EACAE,EAAArH,EAAAqH,EAAAjG,EAAA4V,WAAA3P,EACAgH,WAAAjN,EAAAgN,UAAAC,WACAF,UAAA/M,EAAAgN,UAAAD,UACA7D,EAAA,GAEA,mBAAAhF,KAAAqS,EAAAxT,OACA/C,EAAAgN,UAAAD,UAAA/M,EAAAgN,UAAAgH,cAAApV,EAAAqH,EAAAjG,EAAAmG,QACa,qBAAAjC,KAAAqS,EAAAxT,OACb/C,EAAAgN,UAAAC,WAAAjN,EAAAgN,UAAAsH,aAAA1V,EAAAmH,EAAA/F,EAAAoG,OACakQ,GACbtW,EAAA0X,UAAA7U,EAAAjE,GACAoB,EAAA4E,QAEA,IAAA4R,GACAxW,EAAAgN,UAAAgM,SAAAhZ,EAAAgY,iBAAA/K,WAAAgJ,EAAAlQ,EACA/F,EAAAgY,iBAAAjL,UAAAkJ,EAAAhQ,MAIAjG,EAAA6Y,YAAA,SAAAhW,GACA7C,EAAAyM,cAAA,eAAmDoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eACnDjR,EAAA8V,WACA9V,EAAA4Y,SAAA/V,GACAyT,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAtZ,EAAAiY,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAtZ,EAAA4Y,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAtZ,EAAA6Y,aAAA,KAGA7Y,EAAA8X,gBAAA,SAAAjV,GAA6CA,EAAAiV,mBAC7C9X,EAAA0Y,iBAAA,SAAAtM,EAAAoN,GACAxZ,EAAAyZ,OAAArN,GAAApM,EAAAyZ,OAAArN,OACApM,EAAAyZ,OAAArN,GAAA8B,QAAAsL,IAEAxZ,EAAAsZ,oBAAA,SAAAlN,EAAAoN,IACAxZ,EAAAyZ,OAAArN,QAAAvL,QAAA,SAAA6Y,EAAAC,GACAH,IAAAE,GACA1Z,EAAAyZ,OAAArN,GAAAwN,OAAAD,EAAA,MAIA3Z,EAAAyM,cAAA,SAAAL,EAAAvJ,GAEA,QAAAkV,KACA8B,GAAA,EAFA,GAAAA,EAIA,IAAA7Z,EAAAyZ,OAAArN,GAMA,MALApM,GAAAyZ,OAAArN,GAAAvL,QAAA,SAAA2Y,GACA3W,EAAAwD,IAAArG,EAAAqG,IACAxD,EAAAkV,iBACAyB,EAAApZ,MAAAJ,EAAAU,MAAAmC,MAEAgX,GAEA7Z,EAAA2U,OAAA,SAAAmF,GACA,GAEA9F,GACAM,EAHAyF,EAAA,EAAA/Z,EAAA+C,MAAAwJ,gBACAyN,EAAA,EAAAha,EAAA+C,MAAAkX,4BAGA/I,EAAAlR,EAAAmR,yBACAb,EAAAtQ,EAAAoR,0BA8DA,OA1DApR,GAAA8Q,aACA9Q,EAAAmG,OAAAnG,EAAAyE,WAAA2I,aACApN,EAAAoG,MAAApG,EAAAyE,WAAA0I,cAEAnN,EAAAka,iBACAla,EAAAma,yBACAna,EAAAmG,OAAAnG,EAAAma,wBAAA/M,aACApN,EAAAoG,MAAApG,EAAAma,wBAAAhN,cAEAnN,EAAAmG,OAAAnG,EAAAoa,cAAAhN,aACApN,EAAAoG,MAAApG,EAAAoa,cAAAjN,aAEAnN,EAAA2W,OAAAxQ,OAAAnG,EAAAmG,OAAAjF,OAAAwQ,iBACA1R,EAAA2W,OAAAvQ,MAAApG,EAAAoG,MAAAlF,OAAAwQ,iBACA1R,EAAA2W,OAAA5T,MAAAoD,OAAAnG,EAAAmG,OAAA,KACAnG,EAAA2W,OAAA5T,MAAAqD,MAAApG,EAAAoG,MAAA,MAEApG,EAAAkG,gBAAAlG,EAAAQ,KAAA0F,iBAAA,EACAlG,EAAAgG,iBAAAhG,EAAAQ,KAAAwF,kBAAA,GAEAgO,EAAAhU,EAAAyC,KAAAuS,OAAA,SAAAqF,EAAAhO,GACA,MAAAgO,IACAra,EAAAmM,MAAAR,KAAAU,EAAArM,EAAAiI,YAAAjI,EAAA+C,MAAAmK,aACAlN,EAAAmM,MAAAkE,MAAAhE,EAAArM,EAAAiI,YAAA,GACA8R,GACa,MACbzF,EAAAtU,EAAAwR,mBAAAwD,OAAA,SAAAqF,EAAAC,GACA,MAAAA,GAAAC,OAAoCF,EACpCA,GAAAra,EAAAmM,MAAAP,QAAA0O,EAAAta,EAAAiI,YAAAqS,EAAAlU,OAAApG,EAAA+C,MAAAuJ,aAAAyN,GACa,MACb/Z,EAAAE,WAAA8R,aACAgC,GAAAhU,EAAA+C,MAAAmK,WAAA6M,GAEA/Z,EAAAgN,UAAA5G,MAAApG,EAAAoG,MAAAkK,EACAtQ,EAAAgN,UAAA7G,OAAAnG,EAAAmG,OAAA+K,EAAA8I,EACAha,EAAAgN,UAAAiK,IAAA/F,EAAA8I,EACAha,EAAAgN,UAAA+J,KAAAzG,EACAtQ,EAAAgN,UAAAgH,eAAAhU,EAAA+C,MAAA6N,eAAA5Q,EAAAgN,UAAA7G,OACAnG,EAAAgN,UAAAsH,cAAAtU,EAAA+C,MAAA6N,eAAA5Q,EAAAgN,UAAA5G,MACApG,EAAAgN,UAAAwN,eAAAxa,EAAAgN,UAAA5G,MAxCA,KAyCApG,EAAAgN,UAAAsH,YAAAtU,EAAAgN,UAAA5G,MAzCA,IA0CApG,EAAAgN,UAAAqH,eAAArU,EAAAgN,UAAA5G,MACApG,EAAAgN,UAAAwN,cACAxa,EAAA+C,MAAA6N,eACA5Q,EAAAgN,UAAAyN,gBAAAza,EAAAgN,UAAA7G,OA9CA,KA+CAnG,EAAAgN,UAAAgH,cAAAhU,EAAAgN,UAAA7G,OA/CA,KAgDAnG,EAAAgN,UAAA+G,gBAAA/T,EAAAgN,UAAA7G,OACAnG,EAAAgN,UAAAyN,eACAza,EAAA+C,MAAA6N,eACA5Q,EAAAgN,UAAAqH,eAAAiD,KAAAoD,IAAA1a,EAAAgN,UAAAqH,eAAArU,EAAA+C,MAAA4X,qBACA3a,EAAAgN,UAAA+G,gBAAAuD,KAAAoD,IAAA1a,EAAAgN,UAAA+G,gBAAA/T,EAAA+C,MAAA4X,qBACA3a,EAAA4a,KAAA5a,EAAAwM,YAAAgD,OAAA,EAAAxP,EAAAE,WAAA2a,kBACA7a,EAAA8a,kBACA9a,EAAA+a,QAAA,GACAjB,GACA9Z,EAAA4E,MAAA,GAEA5E,EAAAyM,cAAA,cACA,GAEAzM,EAAA+a,OAAA,SAAAlY,EAAAmY,GACA,GAAApb,GAAAI,EAAAwR,mBACAuI,EAAA,EAAA/Z,EAAA+C,MAAAwJ,eAKA,KAJAvM,EAAA6R,eAAA,EACA7R,EAAA4R,eAAA,EACA5R,EAAAuQ,gBAAA,EACAvQ,EAAA0Q,gBAAA,EACA1Q,EAAA4R,eAAA5R,EAAAgN,UAAAD,WAAA/M,EAAA6R,eAAA7R,EAAAyC,KAAA+M,QACAxP,EAAA4R,iBACA5R,EAAAmM,MAAAR,KAAA3L,EAAAyC,KAAAzC,EAAA6R,gBAAA7R,EAAAiI,YAAAjI,EAAA+C,MAAAmK,aACAlN,EAAAmM,MAAAkE,MAAArQ,EAAAyC,KAAAzC,EAAA6R,gBAAA7R,EAAAiI,YAAA,GACA8R,EACA/Z,EAAA6R,gBAAA,CAEA,MAAA7R,EAAA0Q,gBAAA1Q,EAAAgN,UAAAC,YAAAjN,EAAAuQ,gBAAA3Q,EAAA4P,QACAxP,EAAA0Q,iBACA1Q,EAAAmM,MAAAP,QAAAhM,EAAAI,EAAAuQ,iBAAAvQ,EAAAiI,YAAArI,EAAAI,EAAAuQ,iBAAAnK,MACApG,EAAAuQ,iBAAA,CAEAvQ,GAAAyC,KAAA+M,OAAA,IACAxP,EAAAuQ,gBAAA+G,KAAAoD,IAAA1a,EAAAuQ,gBAAA,KACAvQ,EAAA0Q,gBAAA4G,KAAAoD,IAAA1a,EAAA0Q,iBACA1Q,EAAAmM,MAAAP,QAAAhM,EAAAI,EAAAuQ,iBAAAvQ,EAAAiI,YAAArI,EAAAI,EAAAuQ,iBAAAnK,OAAA,GACApG,EAAA6R,eAAAyF,KAAAoD,IAAA1a,EAAA6R,eAAA,KACA7R,EAAA4R,eAAA0F,KAAAoD,IAAA1a,EAAA4R,gBACA5R,EAAAmM,MAAAR,KAAA3L,EAAAyC,KAAAzC,EAAA6R,gBAAA7R,EAAAiI,YAAAjI,EAAA+C,MAAAmK,aACAlN,EAAAmM,MAAAkE,MAAArQ,EAAAyC,KAAAzC,EAAA6R,gBAAA7R,EAAAiI,YAAA,OAEAjI,EAAAoJ,iBACA4R,GACAhb,EAAA4E,MAAA,GAIAmM,sBAAA/Q,EAAA8a,iBACA9a,EAAAyM,cAAA,UAA0CwK,IAAAjX,EAAAgN,UAAAD,UAAAgK,KAAA/W,EAAAgN,UAAAC,cAE1CjN,EAAA0X,UAAA,SAAA7U,EAAAoY,GACA,IAAAjb,EAAAkb,cAAAlb,EAAAmb,MAAA,CAGAnb,EAAA0V,MAAAuF,GAAAjb,EAAAob,YAAAvY,EACA,IACAtE,GAEA8c,EACAC,EAIAC,EARAC,EAAA3Y,EAAA4Y,YAAA5Y,EAAA6Y,SAAA1b,EAAAE,WAAAyb,wBAEA/b,EAAAI,EAAA4b,YAGA7V,EAAA/F,EAAA0V,MAAA3P,EACAE,EAAAjG,EAAA0V,MAAAzP,EACAlH,EAAAiB,EAAAyX,UAAA1R,EAAAE,GAEAmG,GAAsByL,YAAAhV,EAAA6C,KAAA3G,EAAAgH,IAAAE,KACtB4V,EAAA7b,EAAAiR,WAKA,IAJAiH,aAAAlY,EAAA8b,aACA9b,EAAA+b,UAAgChW,IAAAE,QAChCjG,EAAA8V,UAAA,IAEA9V,EAAAyM,cAAA,YAAAL,KAGArN,GAAAiB,EAAAiR,cAAAjR,EAAAiR,YAAA3G,WAAAvL,EAAAuL,UACAtK,EAAAiR,YAAA1F,cAAAxM,EAAAwM,eACAvL,EAAAgc,qBAAA,EACA5P,EAAA1G,KAAAmW,EACA7b,EAAAyM,cAAA,eAAAL,GACAA,EAAA1G,KAAA3G,EACAiB,EAAAyM,cAAA,gBAAAL,IAEApM,EAAAiR,YAAAlS,EACAiB,EAAA8V,UAAA,CAIA,GADA9V,EAAAoL,WACApL,EAAAic,cACAld,IACA,IAAAiB,EAAAkc,YAAA/Y,QAAApE,EAAAsB,WACAL,EAAAmc,SAAApd,EACAiB,EAAAoT,SAAArU,EAAAgX,YACA/V,EAAA2W,OAAA5T,MAAAqZ,OAAArd,EAAAsB,QACA,SAAAtB,EAAAsB,SAAAtB,EAAA0D,OACAzC,EAAA2W,OAAA5T,MAAAqZ,OAAA,UACApc,EAAAoL,OAAArM,EAAA0D,KAAAzC,EAAAiI,YAAAlJ,EAAAwM,eAEAvL,EAAAqc,WAAArc,EAAA8S,gBACA,SAAA/T,EAAAsB,SACAtB,EAAA0D,MAAA,CA4CA,GA3CA6Y,EAAAtb,EAAAsc,qBACAf,GACAxV,EAAAuR,KAAAC,IAAAvX,EAAAuc,UAAAxW,KACAE,EAAAqR,KAAAC,IAAAvX,EAAAuc,UAAAtW,OAEA,IAAAjG,EAAAwc,gBAAAjR,aAAA1I,EAAA4Z,WACAzc,EAAAwc,iBACAlS,SAAAtK,EAAAsL,WAAAhB,SACAiB,YAAAvL,EAAAsL,WAAAC,cAGA8P,GACApE,IAAAK,KAAAoF,IAAA1c,EAAAwc,gBAAAlS,SAAAvL,EAAAuL,UACAyM,KAAAO,KAAAoF,IAAA1c,EAAAwc,gBAAAjR,YAAAxM,EAAAwM,aACAoR,OAAArF,KAAAoD,IAAA1a,EAAAwc,gBAAAlS,SAAAvL,EAAAuL,UACAsS,MAAAtF,KAAAoD,IAAA1a,EAAAwc,gBAAAjR,YAAAxM,EAAAwM,eAEA,IAAAvL,EAAAwc,gBAAAjR,cACA8P,EAAAtE,MAAA,EACAsE,EAAAuB,MAAAhd,EAAA4P,OAAA,EACA6L,EAAApE,IAAAK,KAAAoF,IAAApB,EAAArE,IAAAlY,EAAAuL,UACA+Q,EAAAsB,OAAArF,KAAAoD,IAAAY,EAAAqB,OAAA5d,EAAAuL,WAEAtK,EAAAwc,gBAAAlS,WAAAvL,EAAAuL,UACAtK,EAAAwc,gBAAAjR,cAAAxM,EAAAwM,cACAvL,EAAA6c,iBAAA,IAEA7c,EAAAgc,qBAAA,IAAAT,EAAAxV,GAAA,IAAAwV,EAAAtV,GAAA,QAAAjG,EAAAE,WAAAkS,iBACA,QAAApS,EAAAE,WAAAkS,gBAAA,IAAApS,EAAAwc,gBAAAjR,YACAvL,EAAA8c,UAAA/d,EAAAuL,SAAAkR,EAAA,SAEAxb,EAAA+c,wBAAAhd,KAAAhB,EAAAuL,UAKAtK,EAAAkL,WAAAnM,EAAAuL,UAAAtK,EAAAkL,WAAAnM,EAAAuL,eACA,IAAAtK,EAAAkL,WAAAnM,EAAAuL,UAAAnH,QAAApE,EAAAwM,cACAvL,EAAAkL,WAAAnM,EAAAuL,UAAA/F,KAAAxF,EAAAwM,cANAvL,EAAAkL,WAAAnM,EAAAuL,YAAA,IAAAtK,EAAAkL,WAAAnM,EAAAuL,UAAAnH,QAAApE,EAAAwM,cACAvL,EAAAkL,WAAAnM,EAAAuL,UAAAsP,OAAA5Z,EAAAkL,WAAAnM,EAAAuL,UAAAnH,QAAApE,EAAAwM,aAAA,MAUAvL,EAAAgd,iBAAA3B,EAAApE,MAAAjX,EAAAgd,gBAAA/F,KACAoE,EAAAtE,OAAA/W,EAAAgd,gBAAAjG,MACAsE,EAAAsB,SAAA3c,EAAAgd,gBAAAL,QACAtB,EAAAuB,QAAA5c,EAAAgd,gBAAAJ,OAAApB,GAGA,GAFAxb,EAAAkL,cACAoQ,EAAAD,EACA,QAAArb,EAAAE,WAAAkS,cACA,IAAA7T,EAAA+c,EAAArE,IAAiD1Y,GAAA+c,EAAAqB,OAAqBpe,GAAA,EACtEyB,EAAA8c,UAAAve,GAAA,eAGAyB,GAAAid,WAAA3B,GAAA,EAGAtb,GAAAkd,eAAAra,EAAAkD,EAAAE,EAAAuV,GAGAxb,EAAAgc,qBAAA,EACAhc,EAAA4E,MAAA,MAEA5E,EAAAqZ,MAAA,SAAAxW,EAAAoY,GASA,QAAAkC,KACAC,GACApd,EAAAyM,cAAA,oBACA4Q,aAAArd,EAAAsd,kBACApS,WAAAlL,EAAAkL,WACA8R,gBAAAhd,EAAAgd,kBAbA,GAAAze,GACA6e,EACA5B,EAAA3Y,EAAA4Y,YAAA5Y,EAAA6Y,SAAA1b,EAAAE,WAAAyb,wBACA1S,EAAAgS,GAAAjb,EAAAob,YAAAvY,EAEA,IADA7C,EAAAiR,YAAAjR,EAAAyX,UAAAxO,EAAAlD,EAAAkD,EAAAhD,OACAlG,KAAAC,EAAAiR,YAAAlC,KAAA,CAcA,GAHA/O,EAAAmb,OACAnb,EAAAud,UAEAvd,EAAA6c,gBAEA,YADA7c,EAAA6c,iBAAA,EAIA,IADAte,EAAAyB,EAAAiR,aACAjR,EAAAyM,cAAA,SAA6CoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eAC7CjR,EAAA8V,SAAA,CAGA,YAAA9V,EAAAiR,YAAA5Q,QAAA,CACA,kBAAAL,EAAAiR,YAAAlO,MAIA,MAHA/C,GAAA2S,MAAA3S,EAAAiI,SAAA,MAAAjI,EAAAwd,QAAA3Z,QACA7D,EAAAyd,gBACAN,IAGA,yBAAAnd,EAAAiR,YAAAlO,MAAA,CACA,YAAA/C,EAAAE,WAAAwd,0BAQA,MAPA1d,GAAAiP,UAAA1Q,EAAAiM,OAAA3L,KACAmB,EAAAmH,eAAA,QAAAnH,EAAAmH,eAAA,aAEAnH,EAAAmH,eAAA,MAEAnH,EAAA2S,MAAApU,EAAAiM,OAAA3L,KAAAmB,EAAAmH,oBACAgW,IAGA,eAAAnd,EAAAE,WAAAwd,0BAIA,MAHA1d,GAAA2d,aAAApf,EAAAiM,OAAAoF,MAAA4L,EAAA3Y,EAAA4Z,UAAA,GACAU,QACAnd,GAAA4E,OAQA,IAJA,yCAAAzB,QAAAnD,EAAAiR,YAAAlO,QAAAyY,GACAxb,EAAA4d,cAAArf,EAAAgN,YAAAhN,EAAA+L,UAEAtK,EAAAkL,WAAA3M,EAAA+L,UAAAtK,EAAAkL,WAAA3M,EAAA+L,cACA,QAAAtK,EAAAE,WAAAkS,eAAA,kBAAApS,EAAAiR,YAAAlO,MAAA,CACA,qBAAA/C,EAAAiR,YAAAlO,OACA/C,EAAAE,WAAAwO,MAAAzF,EAAAlD,EAAA,GACAkD,EAAAlD,EAAA/F,EAAAiR,YAAAlL,EAAA/F,EAAA+C,MAAAmF,eACAlI,EAAA+C,MAAA+E,oBACA9H,EAAA+C,MAAAqF,qBAAApI,EAAA+C,MAAA8a,sBACA5U,EAAAhD,EAAAjG,EAAAiR,YAAAhL,EAAAjG,EAAA+C,MAAAoF,gBACAnI,EAAA+C,MAAAgF,mBAAA/H,EAAA+C,MAAA8a,sBACA5U,EAAAhD,EAAA,EAEA,WADAjG,GAAA8d,WAAAvf,EAAA+L,SAGA8S,IAAA,EACApd,EAAA8c,UAAAve,EAAA+L,SAAAkR,EAAA,SAEA3Y,EAAA4Z,WAAAjB,IACAxb,EAAAgd,gBAAAhd,EAAAsc,qBACAtc,EAAAid,eAAAld,IAAA,IAGAod,IACAnd,EAAA4E,MAAA,MAEA5E,EAAA+d,iBAAA,SAAAlb,GACA,GAAAoG,GAAAlD,EAAAE,CAUA,OATAgD,GAAAjJ,EAAAob,YAAAvY,GACAkD,EAAA/F,EAAAge,sBAAA/U,EAAAlD,EAAA/F,EAAAuc,UAAAxW,EACAE,EAAAjG,EAAAie,uBAAAhV,EAAAhD,EAAAjG,EAAAuc,UAAAtW,EACAF,EAAA/F,EAAA+C,MAAAmb,iBACAnY,EAAA/F,EAAA+C,MAAAmb,gBAEAjY,EAAAjG,EAAA+C,MAAAob,eACAlY,EAAAjG,EAAA+C,MAAAob,eAEAne,EAAAyM,cAAA,gBAAoD1G,IAAAE,IAAAgW,aAAAjc,EAAAic,iBACpDjc,EAAAgN,UAAAC,WAAAjN,EAAAgN,UAAAsH,YAAAtU,EAAAE,WAAAke,kBACA,cAAApe,EAAAoT,WACApT,EAAA2U,QAAA,GACA3U,EAAAgN,UAAAC,YAAAlH,GAEA,cAAA/F,EAAAoT,UACApT,EAAAmM,MAAAP,QAAA,kBAAA5L,EAAAic,aAAAzR,OAAAzH,MACA,aAAA/C,EAAAic,aAAAzR,OAAAxK,EAAAiI,WAAAlC,GACA,mCAAA5C,QAAAnD,EAAAic,aAAAzR,OAAAzH,QACA/C,EAAA2U,QAAA,OAEA3U,GAAAqe,oBAGA,cAAAre,EAAAoT,UACApT,EAAAic,aAAA1O,QACAvN,EAAAmM,MAAAkE,MAAArQ,EAAAic,aAAAxZ,KAAAzC,EAAAiI,WAAAhC,EACiBjG,EAAAE,WAAAoe,gBACjBte,EAAA+C,MAAAmK,WAAAjH,EAEAjG,EAAAmM,MAAAR,KAAA3L,EAAAic,aAAAxZ,KAAAzC,EAAAiI,WAAAhC,EAEAjG,EAAAyM,cAAA,aAAiDJ,IAAApG,QACjDjG,GAAAqe,yBAGAre,EAAAoJ,oBAEApJ,EAAAue,eAAA,WACAve,EAAA2U,SACA6D,SAAAC,KAAAa,oBAAA,YAAAtZ,EAAA+d,kBAAA,GACAvF,SAAAC,KAAAa,oBAAA,UAAAtZ,EAAAue,gBAAA,GACAve,EAAAwe,iBACAxe,EAAA4E,MAAA,GACA5E,EAAA6c,iBAAA,GAEA7c,EAAAye,WAAA,SAAA5b,GACA,GAAAoG,GAAAjJ,EAAAob,YAAAvY,EAUA,OATA7C,GAAAE,WAAAwe,mBAAA1e,EAAAwV,sBACA,oDAAArS,QAAAnD,EAAA2e,mBACA3e,EAAAwV,oBAAAzP,GAAAlD,EAAA+b,UACA5e,EAAAwV,oBAAAvP,GAAApD,EAAAgc,UACA7e,EAAAwV,oBAAAzP,EAAAuR,KAAAoF,IAAA1c,EAAAoG,MAAApG,EAAA+C,MAAA6N,eAAA0G,KAAAoD,IAAA,EAAA1a,EAAAwV,oBAAAzP,IACA/F,EAAAwV,oBAAAvP,EAAAqR,KAAAoF,IAAA1c,EAAAmG,OAAAnG,EAAA+C,MAAA6N,eAAA0G,KAAAoD,IAAA,EAAA1a,EAAAwV,oBAAAvP,IACAgD,EAAAjJ,EAAAwV,qBAEAxV,EAAA8e,WAAA9e,EAAAyX,UAAAxO,EAAAlD,EAAAkD,EAAAhD,GAAA5F,QACA,0BAAAL,EAAA8e,YAAA,0BAAA9e,EAAA2e,iBACA3e,EAAA2e,gBAAA,wBACA3e,EAAAuc,UAAAtT,EACAjJ,EAAA+e,YAAAhI,KAAA/W,EAAAgN,UAAAC,eACAiL,cAAAlY,EAAA8b,cAGA,wBAAA9b,EAAA8e,YAAA,wBAAA9e,EAAA2e,iBACA3e,EAAA2e,gBAAA,sBACA3e,EAAAuc,UAAAtT,EACAjJ,EAAA+e,YAAA9H,IAAAjX,EAAAgN,UAAAD,cACAmL,cAAAlY,EAAA8b,eAGA,wBAAA9b,EAAA2e,iBACA,wBAAA3e,EAAA8e,aACA9e,EAAA8e,WAAA,uBAEA,0BAAA9e,EAAA2e,iBACA,0BAAA3e,EAAA8e,aACA9e,EAAA8e,WAAA,yBAEA5G,aAAAlY,EAAA8b,mBACA,IAAA9b,EAAAkc,YAAA/Y,QAAAnD,EAAA8e,cAGA,wBAAA9e,EAAA8e,WACA9e,EAAAgN,UAAAD,UAAA/M,EAAA+e,YAAA9H,KAAAhO,EAAAhD,EAAAjG,EAAAuc,UAAAtW,GACAjG,EAAAgN,UAAAyN,eACa,wBAAAza,EAAA8e,YACb9e,EAAAgN,UAAAD,WAAA/M,EAAA4a,KAAA5a,EAAA+C,MAAAmK,WACAlN,EAAA8b,YAAA1D,WAAApY,EAAAye,WAAAze,EAAAE,WAAA8e,iBAAAnc,IACa,2BAAA7C,EAAA8e,aACb9e,EAAAgN,UAAAD,WAAA/M,EAAA4a,KAAA5a,EAAA+C,MAAAmK,WACAlN,EAAA8b,YAAA1D,WAAApY,EAAAye,WAAAze,EAAAE,WAAA8e,iBAAAnc,IAEA,0BAAA7C,EAAA8e,WACA9e,EAAAgN,UAAAC,WAAAjN,EAAA+e,YAAAhI,MAAA9N,EAAAlD,EAAA/F,EAAAuc,UAAAxW,GACA/F,EAAAgN,UAAAwN,cACa,4BAAAxa,EAAA8e,YACb9e,EAAAgN,UAAAC,YAAAjN,EAAAE,WAAA+e,yBACAjf,EAAA8b,YAAA1D,WAAApY,EAAAye,WAAAze,EAAAE,WAAA8e,iBAAAnc,IACa,2BAAA7C,EAAA8e,aACb9e,EAAAgN,UAAAC,YAAAjN,EAAAE,WAAA+e,yBACAjf,EAAA8b,YAAA1D,WAAApY,EAAAye,WAAAze,EAAAE,WAAA8e,iBAAAnc,QAGA7C,EAAAkf,eAAA,WACAhH,aAAAlY,EAAA8b,aACAtD,SAAA2G,iBACA3G,SAAA2G,kBAEA3G,SAAAC,KAAAa,oBAAA,YAAAtZ,EAAAye,YAAA,IAEAze,EAAAof,YAAA,SAAAvc,GACA,GAAAoG,GAAAlD,EAAAE,CACAgD,GAAAjJ,EAAAob,YAAAvY,GACAkD,EAAAkD,EAAAlD,EAAA/F,EAAAuc,UAAAxW,EACAE,EAAAgD,EAAAhD,EAAAjG,EAAAuc,UAAAtW,GACAjG,EAAAE,WAAAmf,uBAAA,mBAAArf,EAAAoT,YAGApT,EAAAE,WAAAof,oBAAA,gBAAAtf,EAAAoT,YAGApT,EAAAyM,cAAA,cACAoL,YAAAhV,EACA0c,OAAAvf,EAAAwc,gBACAgD,OAAAxf,EAAAiR,YACAmC,SAAApT,EAAAoT,aAIAkE,KAAAC,IAAAxR,GAAA/F,EAAAE,WAAAuf,iBAAAnI,KAAAC,IAAAtR,GAAAjG,EAAAE,WAAAuf,mBACAzf,EAAA8S,cAAA9S,EAAAwc,gBACAxc,EAAA0f,cAAA1f,EAAAiR,YACAjR,EAAA8S,cAAAC,YACAhN,IACAE,KAEAjG,EAAAkd,eAAAra,EAAAoG,EAAAlD,EAAAkD,EAAAlD,GAAA,MAGA/F,EAAA2f,gBAAA,SAAA9c,GACA,GAAA+c,IACAC,cAAA7f,EAAA0L,OAAAC,KACAmU,iBAAA9f,EAAA0L,OAAAE,SAEArN,GACAshB,cAAA,WACAC,iBAAA,eACiB9f,EAAAoT,SACjBoF,UAAAC,KAAAa,oBAAA,YAAAtZ,EAAAof,aAAA,GACA5G,SAAAC,KAAAa,oBAAA,UAAAtZ,EAAA2f,iBAAA,GACA3f,EAAA8S,eACA9S,EAAA0f,gBACA1f,EAAA6c,iBAAA,EACA7c,EAAA8S,cAAAvU,KAAAyB,EAAA0f,cAAAnhB,IACAyB,EAAAyM,cAAA,WACAoL,YAAAhV,EACA0c,OAAAvf,EAAA8S,cACA0M,OAAAxf,EAAA0f,cACAtM,SAAApT,EAAAoT,aAEAwM,EAAA5f,EAAAoT,UAAAwG,OAAAgG,EAAA5f,EAAAoT,UAAAjQ,QAAAnD,EAAA8S,cAAAvU,IAAA,GACAqhB,EAAA5f,EAAAoT,UAAAwG,OAAAgG,EAAA5f,EAAAoT,UAAAjQ,QAAAnD,EAAA0f,cAAAnhB,IAAA,EAAAyB,EAAA8S,cAAAvU,IACAyB,EAAAwe,mBAGAxe,EAAA8S,kBAAA/S,GACAC,EAAA0f,kBAAA3f,GACAC,EAAA4E,MAAA,IAEA5E,EAAA2X,UAAA,SAAA9U,EAAAoY,GAEA,GADAjb,EAAA+f,oBAAAld,EAAA2c,QACAxf,EAAAyM,cAAA,aAAiDoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eACjDjR,EAAA8V,UAGA,IAAAjT,EAAAmd,SAAAhgB,EAAAmb,MAAA,CACA,GAAAK,GAAA3Y,EAAA4Y,YAAA5Y,EAAA6Y,OAYA,IAXA1b,EAAAuc,UAAAtB,GAAAjb,EAAAob,YAAAvY,GACA7C,EAAA+e,aACAhI,KAAA/W,EAAAgN,UAAAC,WACAgK,IAAAjX,EAAAgN,UAAAD,WAEA/M,EAAAwc,gBAAAxc,EAAAyX,UAAAzX,EAAAuc,UAAAxW,EAAA/F,EAAAuc,UAAAtW,GACAjG,EAAA+c,oBAAA/c,EAAAwc,gBAAAvR,SACAuQ,GAAA3Y,EAAA4Z,UAAA,yCACAvY,KAAAlE,EAAAwc,gBAAAnc,UAAAL,EAAAiR,YAAAjG,iBACAhL,EAAAkL,gBAEAlL,EAAAwc,gBAAAhR,OAAA,CAGA,QAAAxL,EAAAkc,YAAA/Y,QAAAnD,EAAAwc,gBAAAnc,SAeA,MAdAL,GAAA8e,WAAA9e,EAAAwc,gBAAAnc,QACAL,EAAA2e,gBAAA3e,EAAAwc,gBAAAnc,QACAL,EAAAye,WAAA5b,GACA7C,EAAAE,WAAAwe,oBACA,oDAAAvb,QAAAnD,EAAA2e,mBACA3e,EAAAwV,qBACAzP,EAAA/F,EAAAuc,UAAAxW,EACAE,EAAAjG,EAAAuc,UAAAtW,GAEAjG,EAAA2W,OAAAsJ,sBAEAzH,SAAAC,KAAAC,iBAAA,YAAA1Y,EAAAye,YAAA,GACAjG,SAAAC,KAAAC,iBAAA,UAAA1Y,EAAAkf,gBAAA,QACAlf,EAAA6c,iBAAA,EAGA,aAAA7c,EAAAoT,SAKA,MAJApT,GAAAqc,WAAA,EACA,QAAArc,EAAAE,WAAAkS,eACApS,EAAA8c,UAAA9c,EAAAwc,gBAAAlS,SAAAkR,EAAA,SAEAxb,EAAA0X,UAAA7U,IAEA,8BAAAM,QAAAnD,EAAAoT,YACApT,EAAAic,aAAAjc,EAAAmc,SACAnc,EAAAic,aAAA1O,QACAvN,EAAAie,uBAAAje,EAAAmM,MAAAkE,MAAArQ,EAAAic,aAAAxZ,KAAAzC,EAAAiI,WAEAjI,EAAAie,uBAAAje,EAAAmM,MAAAR,KAAA3L,EAAAic,aAAAxZ,KAAAzC,EAAAiI,YAAAjI,EAAA+C,MAAAmK,WAEAlN,EAAAge,sBAAAhe,EAAAmM,MAAAP,QAAA,kBAAA5L,EAAAic,aAAAzR,OAAAzH,MACA,aAAA/C,EAAAic,aAAAzR,OAAAxK,EAAAiI,YAAAjI,EAAAic,aAAA7V,MACAoS,SAAAC,KAAAC,iBAAA,YAAA1Y,EAAA+d,kBAAA,GACAvF,SAAAC,KAAAC,iBAAA,UAAA1Y,EAAAue,gBAAA,KAEA,qCAAApb,QAAAnD,EAAAoT,YACApT,EAAAic,aAAAjc,EAAAmc,SACA3D,SAAAC,KAAAC,iBAAA,YAAA1Y,EAAAof,aAAA,GACA5G,SAAAC,KAAAC,iBAAA,UAAA1Y,EAAA2f,iBAAA,OAGA3f,EAAAmZ,QAAA,SAAAtW,GACAqV,aAAAlY,EAAA8b,aACA9b,EAAAgc,qBAAA,EACAhc,EAAAqc,cAAAtc,GACAC,EAAAic,iBAAAlc,GACAC,EAAAwc,oBAAAzc,GACAC,EAAAyM,cAAA,WAA+CoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,gBAC/CjR,EAAA8V,UAAAjT,EAAA2c,SAAAxf,EAAA2W,UAGA3W,EAAAiR,iBAAAlR,KAAAC,EAAAiR,YAAAlC,MAGA/O,EAAAkb,aAAAlb,EAAAmb,QACAnb,EAAAuc,WAAAvc,EAAA+b,SAAA/b,EAAAuc,YACAvc,EAAAkgB,aAAAC,QAEAtd,EAAAkV,oBAEA/X,EAAAogB,QAAA,SAAAvd,GACA,GAAAtE,GACAwH,EAAA/F,EAAAsL,WAAAC,YACAtF,EAAAjG,EAAAsL,WAAAhB,SACAkR,EAAA3Y,EAAA4Y,YAAA5Y,EAAA6Y,QACA2E,EAAArgB,EAAAyC,KAAA+M,OAAA,EACA8Q,EAAAtgB,EAAAwR,mBAAAhC,OAAA,CACA,KAAAxP,EAAAyM,cAAA,WAA+CoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eAC/CjR,EAAA8V,SAAA,CAmDA,GAhDA9V,EAAA4a,KAAA5a,EAAAwM,YAAAgD,OAAA,EAAAxP,EAAAE,WAAA2a,kBACA7a,EAAAE,WAAA8R,aACAqO,GAAA,GAEA,IAAAxd,EAAA0d,SACA1d,EAAAkV,iBAGA,KAAAlV,EAAA0d,SACAvgB,EAAAkL,cACAlL,EAAA4E,MAAA,IAEa4W,GAAA,KAAA3Y,EAAA0d,QACbvgB,EAAAwgB,YAEa,KAAA3d,EAAA0d,QACbta,GAAA,EAEa,KAAApD,EAAA0d,QACbta,GAAA,EAEa,KAAApD,EAAA0d,SAAA1d,EAAA4Z,UAAA,IAAA5Z,EAAA0d,QACbxa,GAAA,EAEa,KAAAlD,EAAA0d,UAAA1d,EAAA4Z,UAAA,IAAA5Z,EAAA0d,QACbxa,GAAA,EAEa,KAAAlD,EAAA0d,SACbta,GAAAjG,EAAA4a,KACA/X,EAAAkV,kBAEa,KAAAlV,EAAA0d,SACbta,GAAAjG,EAAA4a,KACA/X,EAAAkV,kBAEa,KAAAlV,EAAA0d,SAAA/E,GAAA,KAAA3Y,EAAA0d,QACbta,EAAA,EAEa,KAAApD,EAAA0d,SAAA/E,GAAA,KAAA3Y,EAAA0d,QACbta,EAAAjG,EAAAyC,KAAA+M,OAAA,EAEagM,GAAA,KAAA3Y,EAAA0d,QACbxa,EAAAua,EAEa9E,GAAA,KAAA3Y,EAAA0d,UACbxa,EAAA,GAGA,KAAAlD,EAAA0d,QACA,MAAAvgB,GAAAoZ,YAAArT,EAAAE,EAGA,SAAApD,EAAA0d,QAAA,CAKA,GAJAvgB,EAAAkL,cACAlL,EAAAkL,WAAAoM,KAAAoD,IAAAzU,EAAA,OACAjG,EAAAkL,WAAAoM,KAAAoD,IAAAzU,EAAA,IAAA1B,KAAAwB,GACA/F,EAAAgd,gBAAAhd,EAAAsc,qBACA,QAAAtc,EAAAE,WAAAkS,cACA,IAAA7T,EAAAyB,EAAAgd,gBAAA/F,IAAsD1Y,GAAAyB,EAAAgd,gBAAAL,OAAkCpe,GAAA,EACxFyB,EAAA8c,UAAAve,EAAAid,EAAA,aAGAxb,GAAAid,eAAAld,GAAAyb,EAIA,OAFA3Y,GAAAkV,qBACA/X,GAAA4E,MAAA,GAGAmB,EAAA,IACAA,EAAA,GAEAE,EAAAoa,IACApa,EAAAoa,GAEApa,EAAA,IACAA,EAAA,GAEAF,EAAAua,IACAva,EAAAua,GAGAzd,EAAA4Z,WAAA,kBAAAtZ,QAAAN,EAAA0d,WACAvgB,EAAAkL,WAAAoM,KAAAoD,IAAAzU,EAAA,IAAAjG,EAAAkL,WAAAoM,KAAAoD,IAAAzU,EAAA,QACAjG,EAAAkL,WAAAoM,KAAAoD,IAAAzU,EAAA,IAAA1B,KAAAwB,GACA/F,EAAAgd,gBAAAhd,EAAAsc,qBACAtc,EAAAid,eAAAld,GAAAyb,GACAxb,EAAA4E,MAAA,IAEAmB,IAAA/F,EAAAsL,WAAAC,aAAAtF,IAAAjG,EAAAsL,WAAAhB,WACAtK,EAAAygB,eAAA1a,IAAA/F,EAAAsL,WAAAC,YAAAxF,MAAAhG,GAAAkG,IAAAjG,EAAAsL,WAAAhB,SAAArE,MAAAlG,IACAC,EAAA4d,cAAA7X,EAAAE,IACApD,EAAA4Z,UAAAzc,EAAAE,WAAAwgB,6BACAlF,IACAxb,EAAAkL,eAEAlL,EAAAkL,WAAAjF,GAAAjG,EAAAkL,WAAAjF,OACAjG,EAAAkL,WAAAjF,GAAA1B,KAAAwB,GACA/F,EAAAyM,cAAA,oBACA4Q,aAAArd,EAAAsd,kBACApS,WAAAlL,EAAAkL,WACA8R,gBAAAhd,EAAAgd,mBAGAhd,EAAA4E,MAAA,MAGA5E,EAAA2gB,MAAA,SAAA9d,GACA7C,EAAAyM,cAAA,SAA6CoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eAC7CjR,EAAA8V,WAGA9V,EAAAkgB,aAAAvb,MAAA,KAEA3E,EAAA4gB,SAAA,SAAA/d,GACA7C,EAAA8V,UAGA9V,EAAAyM,cAAA,YAAgDoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eAEhDjR,EAAA6gB,SAAA,SAAAhe,GACA7C,EAAAyM,cAAA,YAAgDoL,YAAAhV,EAAA6C,KAAA1F,EAAAiR,eAChDjR,EAAA8V,WAGA,cAAA9V,EAAAiR,YAAA5Q,SACA,qBAAAL,EAAAiR,YAAAlO,MACA/C,EAAA8gB,kBAAA9gB,EAAAiR,YAAAzG,OAAA3L,MACa,cAAAmB,EAAAiR,YAAA5Q,SACb,eAAAL,EAAAiR,YAAAlO,MACA/C,EAAA+gB,YACa,0BAAA5d,QAAAnD,EAAAiR,YAAAlO,QACb/C,EAAAoZ,YAAApZ,EAAAiR,YAAA1F,YAAAvL,EAAAiR,YAAA3G,YAGAtK,EAAAghB,YAAA,SAAAne,GACA,GAAArE,GACA0K,EACA+X,MAAAlhB,KAAA8C,EAAAoe,OAAApe,EAAAgV,YAAAoJ,OAAApe,EAAAoe,OACAC,MAAAnhB,KAAA8C,EAAAqe,OAAAre,EAAAgV,YAAAqJ,OAAAre,EAAAqe,OACAC,MAAAphB,KAAA8C,EAAAse,UAAAte,EAAAgV,YAAAsJ,UAAAte,EAAAse,SACAnL,KAGAA,EAAAoC,WAAA,WACApY,EAAAyM,cAAA,SAAiDoL,YAAAhV,MAGjDA,IAAAgV,aAAAhV,EACA7C,EAAAuY,oBAAA,EACA/Z,EAAAwB,EAAAgN,UAAAC,WACA/D,EAAAlJ,EAAAgN,UAAAD,UACA/M,EAAA8V,WAGA,IAAAqL,IAEAD,GAAA,IAEAlhB,EAAAgN,UAAAgM,SAAAiI,EAAAziB,EAAA0iB,EAAAhY,IAEAA,IAAAlJ,EAAAgN,UAAAD,WAAAvO,IAAAwB,EAAAgN,UAAAC,YACApK,EAAAkV,iBAEA/B,MAAAjW,KACa,KAEbC,EAAAohB,KAAA,SAAAve,GACA,IAAA7C,EAAAyM,cAAA,QAA4CoL,YAAAhV,KAC5C7C,EAAA8V,UAAAjT,EAAAwe,cAAA,CACA,GAAA1V,MAAA2V,EAAAthB,EAAAsd,iBACAgE,GAAA9R,OAAA,IACA8R,EAAAzgB,QAAA,SAAAwL,GACA,GAAAA,EAAA,CACA,GAAA5D,KACAzJ,QAAAmG,KAAAkH,GAAAxL,QAAA,SAAAuC,GACA,UAAAiJ,EAAAjJ,KACA,IAAAiJ,EAAAjJ,QACArD,KAAAsM,EAAAjJ,IACAiJ,EAAAjJ,GAAAM,QACA,MAAA+E,GAAAlE,KAAA,IAAA8H,EAAAjJ,GAAAM,QAAA,eAEA+E,GAAAlE,KAAA8H,EAAAjJ,MAEAqF,EAAA0M,KAAA,KACAxJ,EAAApH,KAAAkE,MAGA5F,EAAAwe,cAAAE,QAAA,aAAA5V,EAAAwJ,KAAA,OACAtS,EAAAkV,sBAKC3X,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,INi6CK,SAAU/B,EAAQD,EAASM,GOj2EjC,GAAAyB,GAAAC,CAEAD,UA+6BCE,MA/6BDD,EAAA,WACA,YACA,iBAAAE,EAAAwhB,GACAxhB,EAAA0L,QACAC,QACAC,YAEA5L,EAAA8V,UAAA,EACA9V,EAAAsL,YACAC,YAAA,EACAjB,SAAA,GAEAtK,EAAAyhB,YAAA,iBACAzhB,EAAA0hB,sBAAA,wCACA1hB,EAAA2hB,4BAAA,qCACA3hB,EAAAiI,SAAA,0BACAjI,EAAAiP,QAAAjP,EAAAiI,SACAjI,EAAAmH,eAAA,MACAnH,EAAAoP,iBACApP,EAAA4hB,WACA5hB,EAAAoJ,iBACApJ,EAAAgN,aACAhN,EAAAwM,eAOAxM,EAAAmM,OACAR,QACAC,WACAyE,UAEArQ,EAAA6hB,cAAA,WACA,UAEA7hB,EAAAkL,cACAlL,EAAAoL,UACApL,EAAAE,cACAF,EAAA+C,SACA/C,EAAA8L,cACA9L,EAAAwd,WACAxd,EAAA8hB,gBACA9hB,EAAAyZ,UACAzZ,EAAA+hB,IAAA,EACA/hB,EAAAgiB,WACAhiB,EAAA6R,eAAA,EACA7R,EAAA4R,eAAA,EACA5R,EAAAuQ,gBAAA,EACAvQ,EAAA0Q,gBAAA,EACA1Q,EAAA4O,cACA5O,EAAAgI,gBACAhI,EAAAkc,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEAlc,EAAA0V,OAAsB3P,EAAA,EAAAE,EAAA,GACtBjG,EAAAsd,gBAAA,SAAA2E,GACA,GAAArjB,MAAAgB,EAAAI,EAAAwR,mBAAAhT,EAAAwB,EAAAyC,KAAA+M,MAmBA,OAlBAxP,GAAAkL,WAAArK,QAAA,SAAAwL,EAAAuD,GACA,GAAAA,IAAApR,EAAA,CACA,OAAA6N,EAAAmD,OAEA,YADA5Q,EAAAgR,GAAA,KAGAhR,GAAAgR,MACAqS,EACAriB,EAAAiB,QAAA,SAAAyZ,GACA1b,EAAAgR,GAAA0K,EAAAzb,MAAAmB,EAAAyC,KAAAmN,GAAA0K,EAAAzb,QAGAwN,EAAAxL,QAAA,SAAAqhB,IACA,IAAAA,GAAAtiB,EAAAsiB,KACAtjB,EAAAgR,GAAAhQ,EAAAsiB,GAAArjB,MAAAmB,EAAAyC,KAAAmN,GAAAhQ,EAAAsiB,GAAArjB,YAIAD,GAEAoB,EAAAmiB,UAAA,SAAAC,EAAAC,EAAAC,GACAA,KAAA,CACA,IAAAvc,GAAAxH,IACA,KAAAwH,EAAAqc,EAAyBrc,GAAAsc,EAAWtc,GAAAuc,EACpC/jB,EAAAwH,IAEA,OAAAxH,IAEAyB,EAAAmR,uBAAA,WACA,MAAAnR,GAAAE,WAAAwS,kBACA1S,EAAAmM,MAAAR,MAAA,IAAA3L,EAAA+C,MAAAwf,uBADqD,GAGrDviB,EAAAoR,yBAAA,WACA,MAAApR,GAAAE,WAAA4P,eACA9P,EAAAmM,MAAAP,QAAAoC,YAAAhO,EAAA+C,MAAAiN,mBADkD,GAGlDhQ,EAAAwe,eAAA,WACAxe,EAAAE,WAAA2O,gBACA2T,aAAAC,QAAAziB,EAAAyhB,YAAA,IAAAzhB,EAAAE,WAAArB,KAAA8D,KAAAuC,WACAiH,OACAR,KAAA3L,EAAAmM,MAAAR,KACAC,QAAA5L,EAAAmM,MAAAP,SAEAF,QACAC,KAAA3L,EAAA0L,OAAAC,KACAC,QAAA5L,EAAA0L,OAAAE,SAEAqD,QAAAjP,EAAAiP,QACA9H,eAAAnH,EAAAmH,mBAGAnH,EAAA4b,UAAA,WACA,MAAA5b,GAAA2D,QAAA3D,EAAA0iB,YAEA1iB,EAAA2iB,mBAAA,WACA,GAAA/iB,GAAAI,EAAA4b,WACA5b,GAAA0L,OAAAE,QAAA5L,EAAAmiB,UAAA,EAAAviB,EAAA4P,OAAA,IAEAxP,EAAAuR,gBAAA,WACAvR,EAAA0L,OAAAC,KAAA3L,EAAAmiB,UAAA,EAAAniB,EAAAyC,KAAA+M,OAAA,IAEAxP,EAAAwR,iBAAA,WACA,MAAAxR,GAAA4b,YAAArZ,OAAA,SAAA2f,GAA2D,OAAAA,EAAA3H,UAE3Dva,EAAA4iB,kBAAA,SAAAvW,EAAA7B,GACA,GAAA5L,GAAA4L,EAAAqY,cAAA,EACA,mBAAAjkB,KACAA,IAAAwB,MAAAJ,EAAAU,MAAA8J,KAEA6B,EAAA7B,EAAA3L,MAAAD,GAEAoB,EAAA8iB,iBAAA,WACA9iB,EAAAiS,UACAjS,EAAAiS,OAAAjS,EAAAiI,UAAAjI,EAAA+hB,IACA/hB,EAAA+hB,KAAA,EACA/hB,EAAA4b,YAAA/a,QAAA,SAAA2J,GACAxK,EAAA4iB,kBAAA5iB,EAAAiS,OAAAzH,MAGAxK,EAAA+iB,kBAAA,SAAA3f,GAEA,IADA,GAAA/D,GAAA,EACAW,EAAA8hB,aAAA1e,IACA/D,GAAA,EACA+D,GAAA/D,CAEA,OAAA+D,IAEApD,EAAAuC,OAAA,SAAAwJ,GACA,GAAAF,GAAA7L,EAAA4hB,QAAA7V,EAKA,OAJAF,QAAA9L,KAAAgM,IACAvI,QAAAC,KAAA,mEAAAsI,GACAF,EAAA7L,EAAA4hB,QAAAzd,QAEA0H,GAEA7L,EAAAgjB,qBAAA,SAAAC,GACA,GAAA/Z,GAAAnD,EAAAvH,EAAAwB,EAAAyC,KAAA+M,MACA,KAAAzJ,EAAA,EAAuBA,EAAAvH,EAAOuH,GAAA,EAC9B,kBAAAhG,IAAAoD,QAAAnD,EAAAyC,KAAAsD,GAAAkd,IAEA,MADA/Z,SAAAlJ,GAAAyC,KAAAsD,GACA,WAAAmD,EAAA,SAAAA,CAGA,iBAEAlJ,EAAAkjB,eAAA,WACAlkB,OAAAmG,KAAAnF,EAAA4O,YAAA/N,QAAA,SAAAsiB,GACAnjB,EAAA4O,WAAAuU,GAAAve,UAGA5E,EAAAqe,iBAAA,WACArf,OAAAmG,KAAAnF,EAAA4O,YAAA/N,QAAA,SAAAsiB,GACAnjB,EAAA4O,WAAAuU,GAAAxO,YAGA3U,EAAAkd,eAAA,SAAAra,EAAAkD,EAAAE,EAAAuV,GACA,GAAA4H,GACA9S,EAAAtQ,EAAAoR,2BACAF,EAAAlR,EAAAmR,wBACApL,GAAA/F,EAAAoG,MAAApG,EAAAE,WAAAmjB,qBAAAtd,EAAA/F,EAAAoG,QACApG,EAAAgN,UAAAC,YAAAjN,EAAAE,WAAA+e,yBACAmE,GAAA,GAEAnd,EAAAjG,EAAAmG,OAAAnG,EAAAE,WAAAmjB,qBAAApd,EAAAjG,EAAAmG,SACAnG,EAAAgN,UAAAD,WAAA/M,EAAAE,WAAA+e,yBACAmE,GAAA,GAEArd,EAAA/F,EAAAE,WAAAmjB,oBAAA/S,EAAA,IACAtQ,EAAAgN,UAAAC,YAAAjN,EAAAE,WAAA+e,yBACAmE,GAAA,GAEAnd,EAAAjG,EAAAE,WAAAmjB,oBAAAnS,EAAA,IACAlR,EAAAgN,UAAAD,WAAA/M,EAAAE,WAAA+e,yBACAmE,GAAA,GAEAA,IAAA5H,GAAAxb,EAAAiR,cAAA,IAAAjR,EAAAiR,YAAA1F,cACAvL,EAAA8b,YAAA1D,WAAApY,EAAA0X,UAAA1X,EAAAE,WAAA8e,iBAAAnc,KAGA7C,EAAAsjB,uBAAA,WACAtjB,EAAAyC,KAAAzC,EAAAujB,aAAAhhB,OAAA,SAAA8J,GACA,YAGArM,EAAAwjB,eAAA,SAAA7kB,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAAiE,OAAA,yCAEA,IAAAlD,EAAA2C,OAAA,SAAAhE,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4B2Q,OAAA,EACnE,SAAA1M,OAAA,0BACAnE,EAAAE,KAAA,6CAEA,WAEAmB,EAAAyjB,YAAA,SAAAC,EAAAC,EAAAvgB,EAAAwgB,GACAF,EAAAtgB,OAAArD,KAAA4jB,EAAAvgB,GAAAwgB,EAAAD,EAAAvgB,IAEApD,EAAA6jB,cAAA,WACA7jB,EAAAC,SAAAC,WAAAW,QAAA,SAAAtC,GACAyB,EAAAyjB,YAAAzjB,EAAAE,WAAAF,EAAAQ,KAAAjC,EAAA,GAAAA,EAAA,OAGAyB,EAAA8jB,SAAA,WACA9jB,EAAAC,SAAAE,OAAAU,QAAA,SAAAtC,GACAyB,EAAAyjB,YAAAzjB,EAAA+C,MAAA/C,EAAAQ,KAAAuC,UAAkExE,EAAA,GAAAA,EAAA,OAGlEyB,EAAA+gB,SAAA,SAAAgD,GACA/jB,EAAAwR,mBAAA3Q,QAAA,SAAAqhB,GACAA,EAAArjB,OAAAklB,OAAAhkB,KAAAgkB,GACA/jB,EAAA8gB,kBAAAoB,EAAArjB,QAGAmB,EAAA8gB,kBAAA,eAEA9gB,EAAAyB,QAAA,YACAzB,EAAA8Q,aAAA9Q,EAAA2W,QAAA3W,EAAA2W,OAAAlS,YACAzE,EAAA2W,OAAAlS,WAAAuf,YAAAhkB,EAAA2W,QAEA3W,EAAAikB,YAAA3K,oBAAA,UAAAtZ,EAAAmZ,SAAA,GACAnZ,EAAAikB,YAAA3K,oBAAA,YAAAtZ,EAAA2X,WAAA,GACA3X,EAAAikB,YAAA3K,oBAAA,WAAAtZ,EAAA6gB,UAAA,GACA7gB,EAAAikB,YAAA3K,oBAAA,QAAAtZ,EAAAqZ,OAAA,GACArZ,EAAAikB,YAAA3K,oBAAA,YAAAtZ,EAAA0X,WACA1X,EAAAikB,YAAA3K,oBAAA,QAAAtZ,EAAAghB,aAAA,GACAhhB,EAAA2W,OAAA2C,oBAAA,cAAAtZ,EAAAkkB,aAAA,GACAlkB,EAAA2W,OAAA2C,oBAAA,OAAAtZ,EAAAohB,MACAphB,EAAAkgB,aAAA5G,oBAAA,WAAAtZ,EAAA4gB,UAAA,GACA5gB,EAAAkgB,aAAA5G,oBAAA,QAAAtZ,EAAA2gB,OAAA,GACA3gB,EAAAkgB,aAAA5G,oBAAA,UAAAtZ,EAAAogB,SAAA,GACAlf,OAAAoY,oBAAA,SAAAtZ,EAAA2U,QACA3U,EAAAmkB,UAAAnkB,EAAAmkB,SAAAC,YACApkB,EAAAmkB,SAAAC,cAGApkB,EAAAqkB,oBAAA,WACA,GAAAzkB,EACAI,GAAAskB,gBACA,gBAAAtkB,GAAAskB,eAAA5Y,QACA,OAAA1L,EAAAskB,eAAA5Y,SACA1L,EAAAskB,eAAA5Y,OAAAC,KAAA6D,QAAAxP,EAAAyC,KAAA+M,SACAxP,EAAA0L,OAAAC,KAAA3L,EAAAskB,eAAA5Y,OAAAC,MAEA/L,EAAAI,EAAA4b,YACA5b,EAAAskB,eAAA5Y,OAAAE,QAAA4D,SAAA5P,EAAA4P,SACAxP,EAAA0L,OAAAE,QAAA5L,EAAAskB,eAAA5Y,OAAAE,SAEA5L,EAAAiP,YAAAlP,KAAAC,EAAAskB,eAAArV,QACAjP,EAAAiI,SAAAjI,EAAAskB,eAAArV,QACAjP,EAAAmH,mBAAApH,KAAAC,EAAAskB,eAAAnd,eACAnH,EAAAiI,SAAAjI,EAAAskB,eAAAnd,eACAnH,EAAAukB,gBAAAvkB,EAAAiP,UAAAjP,EAAAmH,gBACAnH,EAAA2S,MAAA3S,EAAAiP,QAAAjP,EAAAmH,kBAIAnH,EAAAwkB,cAAA,SAAAC,GACA,MAAAC,YAAAD,EAAA,KAEAzkB,EAAA2kB,UAAA,SAAAvhB,GACA,OAAAc,KAAAd,KACApD,EAAA+C,MAAAK,EAAA,UAAApD,EAAAwkB,cAAAxkB,EAAA+C,MAAAK,MAGApD,EAAA4kB,SAAA,SAAAC,GACA7kB,EAAAQ,KAAAqkB,IACA7lB,OAAAmG,KAAAnF,EAAAQ,KAAAqkB,IAAAhkB,QAAA,SAAAuC,GACApD,EAAA6kB,GAAAzhB,GAAApD,EAAAQ,KAAAqkB,GAAAzhB,MAGApD,EAAAc,KAAA,WACA,IAAAd,EAAAwE,YAAA,CACA,GAAAsgB,KAuJA,IAtJA9kB,EAAA6jB,gBACA7jB,EAAA8jB,WACA9jB,EAAA+kB,gBACA/kB,EAAAglB,SACAhlB,EAAA+L,KAAA,kBACA/L,EAAAwE,aAAA,EACAxE,EAAAwV,qBAAwCzP,EAAA,EAAAE,EAAA,GACxCjH,OAAAmG,KAAAnF,EAAA+C,OAAAlC,QAAAb,EAAA2kB,WACA3kB,EAAAU,KAAAqL,KAAA/L,EAAA+L,KACA/L,EAAAU,KAAAgY,iBAAA1Y,EAAA0Y,iBACA1Y,EAAAU,KAAA4Y,oBAAAtZ,EAAAsZ,oBACAtZ,EAAAU,KAAA+L,cAAAzM,EAAAyM,cACAzM,EAAAU,KAAAe,QAAAzB,EAAAyB,QACAzB,EAAAU,KAAAukB,SAAAjlB,EAAAilB,SACAjlB,EAAAU,KAAAkhB,QAAA5hB,EAAA4hB,QACA5hB,EAAAU,KAAA8c,QAAAxd,EAAAwd,QACAxd,EAAAU,KAAAqgB,SAAA/gB,EAAA+gB,SACA/gB,EAAAU,KAAA0Y,YAAApZ,EAAAoZ,YACApZ,EAAAU,KAAA6c,QAAAvd,EAAAud,QACAvd,EAAAU,KAAAkd,cAAA5d,EAAA4d,cACA5d,EAAAU,KAAA+f,eAAAzgB,EAAAygB,eACAzgB,EAAAU,KAAAwkB,eAAAllB,EAAAklB,eACAllB,EAAAU,KAAAykB,SAAAnlB,EAAAmlB,SACAnlB,EAAAU,KAAA0kB,QAAAplB,EAAAolB,QACAplB,EAAAU,KAAA2kB,qBAAArlB,EAAAqlB,qBACArlB,EAAAU,KAAA4kB,iBAAAtlB,EAAAslB,iBACAtlB,EAAAU,KAAAogB,kBAAA9gB,EAAA8gB,kBACA9gB,EAAAU,KAAA6kB,wBAAAvlB,EAAAulB,wBACAvlB,EAAAU,KAAA8kB,mBAAAxlB,EAAAwlB,mBACAxlB,EAAAU,KAAA+W,UAAAzX,EAAAyX,UACAzX,EAAAU,KAAA+kB,cAAAzlB,EAAAylB,cACAzlB,EAAAU,KAAAiS,MAAA3S,EAAA2S,MACA3S,EAAAU,KAAAkE,KAAA5E,EAAA4E,KACA5E,EAAAU,KAAAuc,WAAAjd,EAAAid,WACAjd,EAAAU,KAAAglB,YAAA1lB,EAAA0lB,YACA1lB,EAAAU,KAAAilB,kBAAA3lB,EAAA2lB,kBACA3lB,EAAAU,KAAA+c,UAAAzd,EAAAyd,UACAzd,EAAAU,KAAAoc,UAAA9c,EAAA8c,UACA9c,EAAAU,KAAAiN,WAAA3N,EAAA2N,WACA3N,EAAAU,KAAAod,WAAA9d,EAAA8d,WACA9d,EAAAU,KAAAklB,WAAA5lB,EAAA4lB,WACA5lB,EAAAU,KAAAmlB,aAAA7lB,EAAA6lB,aACA7lB,EAAAU,KAAAiW,OAAA3W,EAAA2W,OACA3W,EAAAU,KAAAL,QAAAL,EAAAqG,IACArG,EAAAU,KAAAolB,UAAA9lB,EAAA8lB,UACA9lB,EAAAU,KAAAqlB,UAAA/lB,EAAA+lB,UACA/lB,EAAAU,KAAAslB,OAAAhmB,EAAAgmB,OACAhmB,EAAAU,KAAAulB,aAAAjmB,EAAAimB,aACAjmB,EAAAU,KAAAwlB,aAAAlmB,EAAAkmB,aACAlmB,EAAAU,KAAAylB,UAAAnmB,EAAAmmB,UACAnmB,EAAAU,KAAA0lB,gBAAApmB,EAAAomB,gBACApmB,EAAAU,KAAA2lB,aAAArmB,EAAAqmB,aACArmB,EAAAU,KAAA4lB,eAAAtmB,EAAAsmB,eACAtmB,EAAAU,KAAA6lB,kBAAAvmB,EAAAumB,kBACAvmB,EAAAU,KAAA8lB,gBAAAxmB,EAAAwmB,gBACAxmB,EAAAU,KAAAiU,OAAA3U,EAAA2U,OACA3U,EAAAU,KAAAid,aAAA3d,EAAA2d,aACA3d,EAAAU,KAAAoc,UAAA9c,EAAA8c,UACA9c,EAAAU,KAAA8f,UAAAxgB,EAAAwgB,UACAxgB,EAAAU,KAAAwiB,eAAAljB,EAAAkjB,eACAljB,EAAAU,KAAA+lB,cAAAzmB,EAAAymB,cACAzmB,EAAAU,KAAAgmB,uBAAA1mB,EAAA0mB,uBACA1mB,EAAAU,KAAAimB,eAAA3mB,EAAA2mB,eACA3mB,EAAAU,KAAA0gB,KAAAphB,EAAAohB,KACApiB,OAAAmG,KAAAnF,EAAA+C,OAAAlC,QAAA,SAAAuC,GAEA0hB,EAAA1hB,OAAArD,GACAf,OAAAC,eAAA6lB,EAAA1hB,GACAhE,IAAA,WACA,MAAAY,GAAA+C,MAAAK,IAEAsB,IAAA,SAAAC,GACA3E,EAAA2kB,UAAAhgB,GACA3E,EAAA+C,MAAAK,GAAAuB,EACA3E,EAAA4E,MAAA,GACA5E,EAAAyM,cAAA,gBAA4D5N,KAAAuE,EAAAuB,eAI5D3F,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA4mB,cAGA5nB,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAsL,cASAtM,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAA8V,YAGA9W,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAA0lB,IAEApgB,IAAA,SAAAC,GACA3F,OAAAmG,KAAAR,GAAA9D,QAAA,SAAAuC,GACApD,EAAA2kB,UAAAhgB,GACA3E,EAAA+C,MAAAK,GAAAuB,EAAAvB,KAEApD,EAAA4E,MAAA,GACA5E,EAAAyM,cAAA,gBAAwD5N,KAAA,QAAA8F,aAGxD3F,OAAAC,eAAAe,EAAAU,KAAA,cAA4DiE,WAC5D3F,OAAAmG,KAAAnF,EAAAE,YAAAW,QAAA,SAAAuC,GACApE,OAAAC,eAAAe,EAAAU,KAAAR,WAAAkD,GACAhE,IAAA,WACA,MAAAY,GAAAE,WAAAkD,IAEAsB,IAAA,SAAAC,GACA3E,EAAAE,WAAAkD,GAAAuB,EACA3E,EAAA4E,MAAA,GACA5E,EAAAyM,cAAA,oBAAgE5N,KAAAuE,EAAAuB,QAAAvB,UAIhEpD,EAAA4hB,QAAAzd,OAAA,SAAAQ,EAAAkiB,GACAliB,EAAAmiB,OAAAniB,EACA,IAAAoiB,GACAC,EAAA,cACAC,EAAAD,EAAAE,KAAAL,GACAM,EAAAF,IAAA,GAAA5jB,UAAA,MACA+jB,EAAAD,EAAA3X,MAEA,IADAxP,EAAAqnB,uBAAAtnB,GACA,MAAA8mB,EAAAxjB,UAAA,MAAA4jB,EAAA,CACA,IACAF,EAAA,GAAAO,QAAAT,EAAAxjB,UAAA,EAAAwjB,EAAArX,QAAA4X,EAAA,IAAAD,GACqB,MAAAtkB,GAErB,YADA7C,EAAAqnB,mBAAAxkB,GAGA,MAAAkkB,GAAA7iB,KAAAS,GAEA,QAAAA,EAAAwK,WACA,IADAxK,EAAAwK,WAAAoY,oBACApkB,QAAA0jB,EAAAU,sBAEAvnB,EAAA4hB,QAAA/d,OAAA,SAAAc,EAAAkiB,GACA,OAAAA,GACAliB,IAAAkiB,GAEA7mB,EAAAE,WAAArB,MAAAmB,EAAAE,WAAA2O,eAAA,CAEA,GADA7O,EAAAskB,eAAA9B,aAAAgF,QAAAxnB,EAAAyhB,YAAA,IAAAzhB,EAAAE,WAAArB,MACAmB,EAAAskB,eACA,IACAtkB,EAAAskB,eAAA3hB,KAAAC,MAAA5C,EAAAskB,gBACqB,MAAAzhB,GACrBW,QAAAC,KAAA,0CAAAZ,GACA7C,EAAAskB,mBAAAvkB,GAGAC,EAAAskB,gBACA,gBAAAtkB,GAAAskB,eAAAnY,OACA,OAAAnM,EAAAskB,eAAAnY,QACAnM,EAAAmM,MAAAR,KAAA3L,EAAAskB,eAAAnY,MAAAR,KACA3L,EAAAmM,MAAAP,QAAA5L,EAAAskB,eAAAnY,MAAAP,SACA,0BAAA/K,QAAA,SAAAtC,GACAyB,EAAAmM,MAAA5N,KACAyB,EAAAmM,MAAA5N,UAqBA,OAfA,kCAAAsC,QAAAb,EAAA4kB,UACA5kB,EAAAQ,KAAAiC,OACAzC,EAAAU,KAAA+B,KAAAzC,EAAAQ,KAAAiC,MAEAzC,EAAAyC,OACAzC,EAAAU,KAAA+B,SAEAzC,EAAAQ,KAAAmD,SACA3D,EAAAU,KAAAiD,OAAA3D,EAAAQ,KAAAmD,QAEA3D,EAAA8Q,YACAC,sBAAA,WAAmD/Q,EAAA2U,QAAA,KAEnD3U,EAAA2U,QAAA,GAEA3U,IAQAA,EAAAU,KAAA+mB,KAAA,SAAA5kB,GACA7C,EAAA8V,UAAA,GAQA9V,EAAAU,KAAAyf,MAAA,WACAngB,EAAA8V,UAAA,EACA9V,EAAAkgB,aAAAC,SAEAnhB,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAAyE,WAAA0B,QAEAzB,IAAA,SAAAC,GACA3E,EAAAyE,WAAA0B,OAAAxB,EACA3E,EAAA2U,QAAA,MAGA3V,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAyE,WAAA2B,OAEA1B,IAAA,SAAAC,GACA3E,EAAAyE,WAAA2B,MAAAzB,EACA3E,EAAA2U,QAAA,MAGA3V,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAgI,gBAGAhJ,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAJ,QAAAmG,KAAAnF,EAAA4O,YAAAsG,IAAA,SAAAxH,GACA,MAAA1N,GAAA4O,WAAAlB,QAIA1O,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA8Q,eAGA9R,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAyE,YAEAC,IAAA,SAAAC,GACA,IAAA3E,EAAA8Q,YACA,SAAA4W,WAAA,yDAEA1nB,GAAAyE,WAAAE,KAGA3F,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAyE,cAGAzF,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAyE,WAAAqI,cAGA9N,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAAyE,WAAAoI,aAGA7N,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAgN,UAAAgH,gBAGAhV,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAAgN,UAAAsH,eAGAtV,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAAgN,UAAAD,WAEArI,IAAA,SAAAC,GACA3E,EAAAgN,UAAAD,UAAApI,KAGA3F,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAgN,UAAAC,YAEAvI,IAAA,SAAAC,GACA3E,EAAAgN,UAAAC,WAAAtI,KAGA3F,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAmM,SAGAnN,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAmb,SAGAnc,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAkgB,gBAGAlhB,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAAiR,eAGAjS,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAiO,gBAGAjP,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAAwM,eAGAxN,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAkL,cAGAlM,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAAoT,YAGApU,OAAAC,eAAAe,EAAAU,KAAA,WACAtB,IAAA,WACA,MAAAY,GAAAgiB,WAGAhiB,EAAAU,KAAAoL,WAAA9L,EAAA8L,WACA9L,EAAA2nB,iBAAA,SAAAllB,EAAAmlB,GACA,GAAArpB,GAAAK,EAAA8b,EAAAmN,CACA,WAAAplB,GAAA,KAAAA,OAAA1C,KAAA0C,EACA,MAAAmlB,MAUA,IARA,gBAAAnlB,IACA,gBAAAA,IACA,iBAAAA,KACAA,IAAyBqlB,EAAArlB,KAEzB1B,MAAAgnB,QAAAtlB,IAAA,gBAAAA,KACAA,QAEA1B,MAAAgnB,QAAAtlB,EAAA,qBAAAA,GAAA,WAAAA,EAAA,IACA1B,MAAAgnB,QAAAtlB,IAAA,IAAAA,EAAA+M,OACA,MAAAoY,GAAAnlB,EAEA,sBAAAA,GAWA,aAVAlE,EAAAkE,EAAArC,MAAAJ,EAAAU,MAAA,SAAA9B,GACAipB,GACArkB,QAAAC,KAAA,mHAEAzD,EAAA2nB,iBAAA/oB,EAAAgpB,SAGAC,GAAA,EACA7nB,EAAA2nB,iBAAAppB,EAAAqpB,IAOA,IAHA7mB,MAAAgnB,QAAAtlB,IAAA,gBAAAA,KACAA,OAEA1B,MAAAgnB,QAAAtlB,GAmBA,MAlBA1B,OAAAgnB,QAAAtlB,EAAA,MAEAA,OAGAiY,EAAA,EACA9b,KACA6D,EAAA5B,QAAA,SAAAwL,GACAqO,EAAApD,KAAAoD,MAAArO,EAAAmD,UAGA/M,EAAA5B,QAAA,SAAAwL,EAAAuD,GACA,GAAA7J,EAEA,KADAnH,EAAAgR,MACA7J,EAAA,EAA+BA,EAAA2U,EAAS3U,GAAA,EACxCnH,EAAAgR,GAAA7J,GAAAsG,EAAAtG,KAGA6hB,EAAAhpB,EAEA,UAAAkE,OAAA,mGAEA9D,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA6X,IAAAjX,EAAA6R,eACA+K,MAAA5c,EAAAwQ,iBACAmM,OAAA3c,EAAA8R,kBACAiF,KAAA/W,EAAAuQ,oBAIAvR,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA6X,IAAAjX,EAAA4R,eACAgL,MAAA5c,EAAAyQ,iBACAkM,OAAA3c,EAAA+R,kBACAgF,KAAA/W,EAAA0Q,oBAIA1R,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,MAAAY,GAAAsc,wBAGAtd,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAsd,iBAAA,MAGAte,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAsd,qBAGAte,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAwR,mBAAA0D,IAAA,SAAAgN,GACA,MAAAA,QAIAljB,OAAAC,eAAAe,EAAAU,KAAA,OACAtB,IAAA,WACA,MAAAY,GAAAqG,OAGArH,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAA4b,aAEAlX,IAAA,SAAAC,GACA,IAAA5D,MAAAgnB,QAAApjB,IAAA,gBAAAA,GAAA,GACA,SAAA7B,OAAA,sCAEA,QAAA/C,KAAA4E,EAAA,GAAA9F,KACA,SAAAiE,OAAA,sEAEA9C,GAAA2D,OAAAgB,EAAAuQ,IAAA,SAAAoF,EAAA1K,GAQA,MAPA0K,GAAAlU,MAAAkU,EAAAlU,OAAApG,EAAA+C,MAAAuJ,YACAgO,EAAAta,EAAAiI,UAAAjI,EAAA+iB,kBAAAzI,EAAAzb,MACAyb,EAAA/X,OAAA+X,EAAA/X,QAAAvC,EAAAuC,OAAA+X,EAAAvO,MACAuO,EAAAvO,KAAAuO,EAAAvO,MAAA,SACAuO,EAAA1K,QACA0K,EAAA/O,YAAAqE,EACA0K,EAAAhQ,UAAA,EACAgQ,IAEAta,EAAA0iB,eAAA3iB,GACAC,EAAA8iB,mBACA9iB,EAAA2iB,qBACA3iB,EAAAqkB,sBACArkB,EAAA2U,QAAA,GACA3U,EAAAyM,cAAA,iBAAqD9I,OAAA3D,EAAA2D,YAGrD3E,OAAAC,eAAAe,EAAAU,KAAA,QACAtB,IAAA,WACA,MAAAY,GAAAyC,KAAAyS,IAAA,SAAA7I,GAEA,aADAA,GAAArM,EAAAiI,UACAoE,KAGA3H,IAAA,SAAAC,GACA3E,EAAA2nB,iBAAAhjB,EAAA,SAAA/F,GACAoB,EAAAujB,aAAA3kB,EAAAsW,IAAA,SAAA7I,GAGA,MAFAA,GAAArM,EAAAiI,UAAAjI,EAAA+hB,IACA/hB,EAAA+hB,KAAA,EACA1V,IAEArM,EAAAgiB,WAEAhiB,EAAAyC,KAAAzC,EAAAujB,aACAvjB,EAAA2D,SACA3D,EAAA0iB,WAAA1iB,EAAA2lB,qBAEA3lB,EAAA2D,QAAA,IAAA3D,EAAAyC,KAAA+M,SACAxP,EAAA0iB,aAA4C7jB,KAAA,KAC5CmB,EAAA0iB,WAAA,GAAA1iB,EAAAiI,UAAAjI,EAAA+iB,kBAAA,KAEA/iB,EAAA0iB,aAAA1iB,EAAA2D,SACA3D,EAAA2iB,qBACA3iB,EAAAqkB,sBACArkB,EAAAyM,cAAA,iBAA6D9I,OAAA3D,EAAA0iB,cAE7D1iB,EAAA8iB,mBACA9iB,EAAAE,WAAA8nB,mBAAAhoB,EAAAyC,KAAA+M,OAAA,OACAzP,KAAAC,EAAAskB,gBACAtkB,EAAA+gB,WAEA/gB,EAAA8gB,kBAAA,iBACA9gB,EAAA2U,UAAA3U,EAAA8Q,aAA8D9Q,EAAA4E,MAAA,GAC9D5E,EAAAuR,kBACAvR,EAAAqkB,sBACArkB,EAAAyM,cAAA,eAAuDhK,KAAAzC,EAAAyC,YAIvDzC,EAAA+kB,cAAA,WASA,QAAAkD,GAAAtjB,EAAAujB,GACA,GAAAC,MAAAxjB,GACA,SAAA7B,OAAA,mCAEA6B,GAAA,IACAA,EAAA,GAEAA,EAAAqP,IACArP,EAAAqP,GAEAA,EAAA,IACArP,EAAA,GAEAoI,EAAApI,EACAujB,GACAloB,EAAA+a,SAGA,QAAAqN,GAAAzjB,EAAAujB,GACA,GAAAC,MAAAxjB,GACA,SAAA7B,OAAA,oCAEA6B,GAAA,IACAA,EAAA,GAEAA,EAAA2P,IACA3P,EAAA2P,GAEAA,EAAA,IACA3P,EAAA,GAEAsI,EAAAtI,EACAujB,GACAloB,EAAA+a,SAzCA,GAAAsN,GAAA,EACAC,EAAA,EACAvb,EAAA,EACAE,EAAA,EACA+G,EAAA,EACAM,EAAA,EACAP,EAAA,GACAM,EAAA,EAqCArU,GAAAgN,UAAAmC,SAAA,WACA,mBAAyBmF,EACzB,eAAAN,EACA,aAAA/G,EACA,YAAAF,EAAA,KAEA/M,EAAAgN,UAAAgM,SAAA,SAAAjT,EAAAE,GACAmiB,EAAAriB,GAAA,GACAkiB,EAAAhiB,IAEAjH,OAAAC,eAAAe,EAAAgN,UAAA,mBACA5N,IAAA,WACA,MAAA2U,IAEArP,IAAA,SAAAC,GACAoP,EAAApP,KAGA3F,OAAAC,eAAAe,EAAAgN,UAAA,kBACA5N,IAAA,WACA,MAAAiV,IAEA3P,IAAA,SAAAC,GACA0P,EAAA1P,KAGA3F,OAAAC,eAAAe,EAAAgN,UAAA,UACA5N,IAAA,WACA,MAAAipB,IAEA3jB,IAAA,SAAAC,GACAqP,EAAArP,IACAoI,EAAA,GAEAsb,EAAA1jB,KAGA3F,OAAAC,eAAAe,EAAAgN,UAAA,SACA5N,IAAA,WACA,MAAAkpB,IAEA5jB,IAAA,SAAAC,GACA2jB,EAAA3jB,KAGA3F,OAAAC,eAAAe,EAAAgN,UAAA,aACA5N,IAAA,WACA,MAAA2N,IAEArI,IAAAujB,IAEAjpB,OAAAC,eAAAe,EAAAgN,UAAA,cACA5N,IAAA,WACA,MAAA6N,IAEAvI,IAAA0jB,IAEAppB,OAAAC,eAAAe,EAAAgN,UAAA,gBACA5N,IAAA,WACA,MAAA4U,IAEAtP,IAAA,SAAAC,GACAoI,EAAApI,IACAoI,EAAAuK,KAAAoD,IAAA/V,EAAA,IAEAqP,EAAAqU,IACAtb,EAAA,GAEAiH,EAAArP,KAGA3F,OAAAC,eAAAe,EAAAgN,UAAA,eACA5N,IAAA,WACA,MAAAkV,IAEA5P,IAAA,SAAAC,GACAsI,EAAAtI,IACAsI,EAAAqK,KAAAoD,IAAA/V,EAAA,IAEA2P,EAAA3P,QAMCvE,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IPy2EK,SAAU/B,EAAQD,EAASM,GQ1xGjC,GAAAyB,GAAAC,CAEAD,UAyeCE,MAzeDD,EAAA,WACA,YACA,iBAAAE,GAEA,QAAAuoB,GAAAnc,EAAAnD,EAAAuf,EAAAC,GASA,QAAAC,KACAF,EAAA3nB,QAAA,SAAAyB,GAGA,QAAAqmB,GAAA9lB,GACAA,EAAA+lB,gBAAAC,GACAvmB,EAAA4Y,YAAA2N,YAAAhmB,EAAA+lB,eACAE,IAAAjmB,EAAA+lB,eACAG,IAAAlmB,EAAA+lB,gBAEAtmB,EAAA4Y,YAAAzZ,UACAunB,EAAApP,OAAAoP,EAAA7lB,QAAAb,EAAA4Y,aAAA,GACA5Y,EAAA4Y,gBAAAnb,GACAgpB,EAAAzP,oBAAA,WAAAqP,GACAE,EAAAvP,oBAAA,WAAAqP,GACAI,EAAAE,aAAA,mBACAF,EAAAE,aAAA,gBAEA,QAAAC,GAAAV,GAEA,SAAAO,EAAAI,aAAA,YACA,MAAAJ,EAAAI,aAAA,eADA,CAIA,GAAAC,GAAAL,EAAAnS,uBACAwS,IACArS,KAAAqS,EAAArS,KAAA/W,EAAA+C,MAAAsmB,2BAAAR,EAAA1b,YACA8J,IAAAmS,EAAAnS,IAAAjX,EAAA+C,MAAAumB,0BACA3M,OAAAyM,EAAAzM,OACAC,MAAAwM,EAAAxM,OAEAta,EAAA4Y,YAAAqN,EAAAnc,EAAAgd,EAAAZ,EAAA9nB,GACAqoB,EAAAE,aAAA,mBACAF,EAAArQ,iBAAA,WAAAiQ,GACAE,EAAAnQ,iBAAA,WAAAiQ,GACAK,EAAAzkB,KAAAjC,EAAA4Y,cAEA,QAAAqO,KACA,GAAAhrB,EACA,UAAAwqB,EAAAI,aAAA,gBAIA,GADAJ,EAAAE,aAAA,eACA,kBAAA3mB,GAAAkmB,MAOA,gBAHAzoB,MAHAxB,EAAA+D,EAAAkmB,MAAApoB,MAAAM,GAAA,SAAA8nB,GACAU,EAAAV,QAEAznB,MAAAgnB,QAAAxpB,IACA2qB,EAAA3qB,GAIA2qB,GAAA5mB,EAAAkmB,QAlDA,GACAM,GADAC,EAAAvQ,SAAAgR,cAAA,QAoDA,SAAAlnB,GACA,QAAAmnB,GAAAC,GACA,UAAAA,EAAA,CACA,qBAAAA,GACA,MAAAD,GAAAC,EAAAtd,GAEA,oBAAAsd,GAEA,WADAX,GAAAY,YAAAD,EAGA1pB,GAAA4pB,kBAAAb,EAAA,qCACAA,EAAArQ,iBAAA,uBACA1Y,EAAA4pB,kBAAAb,EAAA,6CAEAA,EAAArQ,iBAAA,sBACA1Y,EAAA4pB,kBAAAb,EAAA,uCAEAA,EAAAljB,UAAA6jB,GAGAD,EAAAnnB,EAAAsL,OACAtL,EAAAymB,wBACAzmB,EAAAkmB,OAAAlmB,EAAAkmB,MAAAhZ,OAAA,qBAAAlN,GAAAkmB,SACAM,EAAAtQ,SAAAgR,cAAA,OACAxpB,EAAA4pB,kBAAAd,EAAA,uCACAA,EAAAjjB,UAAA7F,EAAA+C,MAAA8mB,0BACAd,EAAAY,YAAAb,GACAC,EAAArQ,iBAAA,YAAA6Q,GACAR,EAAArQ,iBAAA,sBACAqQ,EAAAE,aAAA,kBAGA3mB,EAAA+W,OACA0P,EAAArQ,iBAAA,iBAAAtM,GACA9J,EAAA+W,MAAAjZ,MAAAJ,GAAAoM,OAIA9J,GACAumB,EAAAc,YAAAZ,KAGA,QAAAe,GAAAnQ,GACA6O,EAAA7O,GAAAoP,qBAAAtc,cAAA,GAAAsd,OAAA,UAEA,QAAAC,KACAnB,EAAA9b,UAAA,EACA/M,EAAAoa,cAAAuP,YAAAM,GACiBA,EAAAxlB,YACjBwlB,EAAAxlB,WAAAuf,YAAAiG,GAEApB,EAAA9b,WAAA8b,EAAA7U,aAAA6U,EAAAzb,cAAA8c,EAAAzlB,WACAylB,EAAAzlB,WAAAuf,YAAAkG,GACiBrB,EAAA7U,aAAA6U,EAAAzb,aAAA,KACjByb,EAAA9b,WAAA8b,EAAA7U,aAAA6U,EAAAzb,eACApN,EAAAoa,cAAAuP,YAAAO,GAGA,QAAAC,GAAApe,GACA,eAAA7C,KACA,GAAA2G,GAAA7P,EAAAE,WAAAkqB,wBACA,QAAAre,GAAA,IAAA8c,EAAA9b,WACA,SAAAhB,GAAA8c,EAAA9b,YAAA8b,EAAA7U,eACA6U,EAAA9b,WAAA,OAAAhB,GAAA8D,IACAwa,EAAAjS,WAAAlP,EAAAlJ,EAAAE,WAAAoqB,yBAAAve,KAGA,QAAAwe,GAAAxe,GACA,kBACAmM,aAAAmS,IAnIA,GAMA3T,GANAmS,EAAArQ,SAAAgR,cAAA,OACAS,EAAAzR,SAAAgR,cAAA,OACAU,EAAA1R,SAAAgR,cAAA,OACAR,KACAwB,GAAA,EACA9pB,IAEA,KAAAK,MAAAgnB,QAAAS,GAAwC,SAAA1lB,OAAA,sCA4OxC,OAzCApC,GAAAiN,WAAA3N,EAAAU,KACAA,EAAA+nB,oBACA/nB,EAAAmoB,YAtEA,WACA,GAAA4B,MACA7qB,EAAAI,EAAA0qB,aAAA1qB,EAAA2W,OACA+R,KACA1oB,EAAA4pB,kBAAAf,EAAA,gCACA4B,EAAA1kB,EAAAkD,EAAA8N,KAAAnX,EAAAmX,KACA0T,EAAAxkB,EAAAgD,EAAAgO,IAAArX,EAAAqX,IACAwT,EAAAtkB,OAAA,EACAwkB,GAAA,EACA9B,EAAA9lB,MAAA6nB,SAAA,WACAX,EAAAlnB,MAAA8nB,MAAA7qB,EAAA+C,MAAA+nB,sBACAZ,EAAAnnB,MAAA8nB,MAAA7qB,EAAA+C,MAAA+nB,uBACAb,EAAAC,GAAArpB,QAAA,SAAAkqB,GACAA,EAAAhoB,MAAAioB,UAAA,SACAD,EAAAhoB,MAAA6nB,SAAA,WACAG,EAAAhoB,MAAAkoB,OAAAN,EAAA,IAEA9B,EAAA9lB,MAAAkoB,OAAAN,EACAlC,KAAAyC,gBACArC,EAAA9lB,MAAAooB,UAAAjqB,OAAAkqB,YAAAX,EAAAxkB,EAAAjG,EAAA+C,MAAAsoB,yBAAA,KACAxC,EAAA9lB,MAAAuoB,SAAAriB,EAAA7C,MAAA,KACAqkB,EAAAxkB,GAAAgD,EAAA9C,QAEA0iB,EAAA9lB,MAAAgU,KAAA0T,EAAA1kB,EAAA,KACA8iB,EAAA9lB,MAAAkU,IAAAwT,EAAAxkB,EAAA,KACA4iB,EAAAnQ,iBAAA,SAAAsR,GACAnB,EAAAnQ,iBAAA,iBAAA7V,GACA7C,EAAA8V,WACA+S,EAAA9b,WAAAlK,EAAAqe,OACA2H,EAAA5b,YAAApK,EAAAoe,QAEA+I,MAEAC,EAAApkB,UAAA7F,EAAA+C,MAAAwoB,uBACArB,EAAArkB,UAAA7F,EAAA+C,MAAAyoB,yBACA3C,EAAAc,YAAAM,GACAzR,SAAAC,KAAAkR,YAAAO,GACA1R,SAAAC,KAAAkR,YAAAd,GACAnS,EAAAmS,EAAAjS,0BACAF,EAAAiG,OAAAzb,OAAAkqB,cAAA3C,KAAAyC,gBACAT,EAAAxkB,EAAA/E,OAAAkqB,YAAAvC,EAAAzb,aACAqd,EAAAxkB,EAAA,IAAoCwkB,EAAAxkB,EAAA,GACpC4iB,EAAAzb,aAAAlM,OAAAkqB,cACAvC,EAAA9lB,MAAAoD,OAAAjF,OAAAkqB,YAAAprB,EAAA+C,MAAA0oB,wBAAA,OAGA/U,EAAAkG,MAAA1b,OAAAwqB,aAEAjB,EAAA1kB,EADA0iB,EACAA,EAAAI,UAAA/b,WAAA+b,EAAA1b,YAEAjM,OAAAwqB,WAAA7C,EAAA1b,aAGA0b,EAAA9lB,MAAAgU,KAAA0T,EAAA1kB,EAAA,KACA8iB,EAAA9lB,MAAAkU,IAAAwT,EAAAxkB,EAAA,KACAyQ,EAAAmS,EAAAjS,wBACAqT,EAAAlnB,MAAAkU,IAAAP,EAAAO,IAAA,KACAiT,EAAAnnB,MAAAkU,IAAAP,EAAAO,IAAAP,EAAAvQ,OAAA+jB,EAAA9c,aAAA,KACA6c,EAAAlnB,MAAAgU,KAAAL,EAAAK,KAAA,KACAmT,EAAAnnB,MAAAgU,KAAAL,EAAAK,KAAA,KACAmT,EAAAnnB,MAAAqD,MAAAyiB,EAAA1b,YAAA,KACA8c,EAAAlnB,MAAAqD,MAAAyiB,EAAA1b,YAAA,KACA+c,EAAAxR,iBAAA,YAAAyR,EAAA,SACAD,EAAAxR,iBAAA,WAAA6R,EAAA,SACAN,EAAAvR,iBAAA,YAAAyR,EAAA,OACAF,EAAAvR,iBAAA,WAAA6R,EAAA,OACAP,OAMAtpB,EAAAopB,aACAppB,EAAAgW,OACAhW,EAAA8nB,QACA9nB,EAAAupB,UACAvpB,EAAAwpB,YACAxpB,EAAAe,QAAA,WACAyW,aAAAmS,GACArB,EAAAnoB,QAAA,SAAAlC,GACAA,EAAA8C,aAEAyoB,EAAAD,EAAApB,GAAAhoB,QAAA,SAAAkqB,GACAA,EAAAtmB,YAAwCsmB,EAAAtmB,WAAAuf,YAAA+G,MAGxC/rB,OAAAC,eAAAyB,EAAA,iBACAtB,IAAA,WACA,MAAAorB,IAEA9lB,IAAA,SAAAC,GACA,mBAAAA,IAAAwjB,MAAAxjB,IAAAgnB,SAAAhnB,IACA,SAAA7B,OAAA,qDAEA0nB,GAAA7lB,EACA6lB,EAAAhC,EAAAhZ,OAAA,IACAgb,EAAAhC,EAAAhZ,OAAA,GAEAgb,EAAA,IACAA,EAAA,GAEAhC,EAAA3nB,QAAA,SAAAyB,EAAAsN,GACA,GAAAA,IAAA4a,EACA,MAAAxqB,GAAA4pB,kBAAAtnB,EAAAymB,qBAAA,0CAEA/oB,GAAA4pB,kBAAAtnB,EAAAymB,qBAAA,0CAIAroB,EAEA,QAAAkrB,GAAA/oB,GAQA,QAAAgpB,KACAC,EAAA/oB,MAAAgpB,WAAA/rB,EAAA+C,MAAAipB,6BACAF,EAAA/oB,MAAA8nB,MAAA7qB,EAAA+C,MAAAkpB,wBACAjsB,EAAAqnB,qBACAyE,EAAA/oB,MAAAgpB,WAAA/rB,EAAA+C,MAAAmpB,qCACAJ,EAAA/oB,MAAA8nB,MAAA7qB,EAAA+C,MAAAopB,iCAGA,QAAAC,KACAC,KACArsB,EAAAyC,KAAAF,OAAA,SAAA3D,EAAAL,GAAkD,MAAAA,GAAAyB,EAAAE,WAAAosB,uBAAmDzrB,QAAA,SAAAwL,GACrG,GAAA1H,GAAA0H,EAAAxJ,EAAA6C,KAAA8E,OAAA3L,KACAwtB,GAAA1nB,KACA0nB,EAAA1nB,IACAiJ,MAAA5N,EAAA8L,WAAAjJ,EAAA6C,KAAA8E,OAAAuB,MAAA,WAAgFrG,MAAQf,WACxF0U,MAAA,SAAAxW,GACAipB,EAAAnnB,QACA9B,EAAAiV,kBACAgU,EAAArf,cAAA,GAAAsd,OAAA,UACA/pB,EAAAusB,2BAKAF,EAAArtB,OAAAmG,KAAAknB,GAAAnX,IAAA,SAAA9R,GACA,MAAAipB,GAAAjpB,KAGA,QAAAopB,GAAApgB,GACAA,IAAA,oBAAAjJ,QAAAiJ,EAAAmU,WACA6L,IACAK,EAAAX,EAAAlV,wBACA8V,IACAA,EAAAjrB,UACAirB,MAAA3sB,IAEA2sB,EAAAnE,EAAA1lB,GACAkU,KAAA0V,EAAA1V,KACAE,IAAAwV,EAAAxV,IACA2F,MAAA6P,EAAA7P,MACAD,OAAA8P,EAAA9P,OACAxW,OAAAsmB,EAAAtmB,OACAC,MAAAqmB,EAAArmB,OACiBimB,GAAsBnB,eAAA,IACvCwB,EAAAlC,cAAA,GAnDA,GAKA6B,GACAI,EANAE,EAAAnU,SAAAgR,cAAA,OACAoD,EAAApU,SAAAgR,cAAA,OACAqD,EAAArU,SAAAgR,cAAA,UACAsC,EAAAtT,SAAAgR,cAAA,SACAnqB,EAAAwD,EAAA6C,MAAA7C,EAAA6C,KAAA8E,OAAA3H,EAAA6C,KAAA8E,OAAAoD,OAAA/K,EAAA6C,KAAA8E,OAAA3L,KAAA,EAiDAmB,GAAA4pB,kBAAAgD,EAAA,sCACA5sB,EAAA4pB,kBAAAiD,EAAA,8CACA7sB,EAAA4pB,kBAAAkC,EAAA,6CACAD,IACAC,EAAAgB,QAAA9sB,EAAAusB,oBACAT,EAAApT,iBAAA,mBAAA7V,GAEA,KAAAA,EAAA0d,UACAmM,EAAAlC,eAAA,GAGA,KAAA3nB,EAAA0d,UACAmM,EAAAlC,eAAA,GAGA,KAAA3nB,EAAA0d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACAxqB,EAAAwlB,sBAGA,IAAA3iB,EAAA0d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACA3nB,EAAAkV,kBAGA,KAAAlV,EAAA0d,SACAvgB,EAAAwlB,uBAGAsG,EAAApT,iBAAA,mBACA1Y,EAAAyd,UAAA5a,EAAA6C,KAAA8E,OAAA3L,KAAAitB,EAAAnnB,SAEAmnB,EAAApT,iBAAA,QAAA8T,IACA,2CAAA3rB,QAAA,SAAAksB,GACAjB,EAAApT,iBAAAqU,EAAAlB,KAEAC,EAAAnnB,MAAA9B,EAAA6C,KAAA8E,OAAAxK,EAAAoP,cAAAvM,EAAA6C,KAAA8E,OAAA3L,OAAA,MACA+tB,EAAA/mB,UAAA7F,EAAAE,WAAA8sB,iBAAAtpB,QAAA,MAAArE,GACAwtB,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAA1sB,GAAAusB,qBAEAC,MAEAK,EAAAhnB,UAAA7F,EAAA+C,MAAAkqB,wBACAN,EAAAjU,iBAAA,iBAAA7V,GACA,MAAAA,GAAAiV,oBAEA6U,EAAAhD,YAAAiD,GACAD,EAAAhD,YAAAmC,GACAa,EAAAhD,YAAAkD,GACAhqB,EAAA2lB,MAAAjkB,MACAqJ,MAAA+e,IAEA3tB,OAAAmG,KAAAnF,EAAAoP,eAAAI,QACAxQ,OAAAmG,KAAAnF,EAAAoP,eAAAvO,QAAA,SAAAqsB,GACA,GAAA3kB,GAAAvI,EAAAukB,gBAAA2I,EACArqB,GAAA2lB,MAAAjkB,MACAqJ,MAAA5N,EAAAE,WAAAitB,uBAAAzpB,QAAA,MAAA6E,EAAAqF,OAAArF,EAAA1J,MACAwa,MAAA,SAAAxW,GACAA,EAAAkV,iBACA/X,EAAAyd,UAAAyP,EAAA,IACAltB,EAAAkgB,aAAAC,aAMA,QAAAiN,GAAAvqB,GACA,GAAAwqB,KAAAxqB,EAAA6C,KAAA4nB,cAAAzqB,EAAA6C,KAAA4H,iBACAzK,EAAA6C,KAAA6nB,aAAA1qB,EAAA6C,KAAAoF,UAAAjI,EAAA6C,KAAAqF,cACAlI,EAAA6C,KAAA8E,MACAxK,GAAAE,WAAAstB,YAAAH,GACAzB,EAAA/oB,GAEA7C,EAAAE,WAAAutB,UACAztB,EAAAkL,WAAA8J,OAAA,SAAArV,EAAA8I,GACA,MAAA9I,GAAA8I,EAAA+G,QACqB,MACrB3M,EAAA2lB,MAAAjkB,MACAqJ,MAAA5N,EAAAE,WAAAwtB,SACArU,MAAA,WACAb,SAAAmV,YAAA,QACA3tB,EAAAwlB,qBACAxlB,EAAAkgB,aAAAC,WAIAngB,EAAAE,WAAA2O,gBAAA7O,EAAAE,WAAA0tB,0BACA5uB,OAAAmG,KAAAnF,EAAAmM,MAAAR,MAAA6D,OAAA,GACAxQ,OAAAmG,KAAAnF,EAAAmM,MAAAP,SAAA4D,OAAA,IACA3M,EAAA2lB,MAAAjkB,MACAqJ,MAAA5N,EAAAE,WAAA2tB,wBACAxU,MAAA,SAAAxW,GACAA,EAAAkV,iBACA/X,EAAAmM,MAAAR,QACA3L,EAAAmM,MAAAP,WACA5L,EAAAuR,kBACAvR,EAAA2iB,qBACA3iB,EAAAskB,mBAAAvkB,GACAC,EAAAyM,cAAA,gBAA4DH,YAAAtM,EAAA+C,MAAAuJ,cAC5DtM,EAAAyM,cAAA,aAAyDS,WAAAlN,EAAA+C,MAAAmK,aACzDlN,EAAAwe,iBACAxe,EAAA2U,QAAA,GACA3U,EAAAwlB,qBACAxlB,EAAAkgB,aAAAC,WAIAngB,EAAAE,WAAA4tB,cAAA9tB,EAAAE,WAAA6tB,mBAAAV,IACAxqB,EAAA2lB,MAAAjkB,MACAqJ,MAAA5N,EAAAE,WAAA8tB,yBAAAtqB,QAAA,KAAAb,EAAA6C,KAAA8E,OAAAoD,OAAA/K,EAAA6C,KAAA8E,OAAA3L,MACAwa,MAAA,SAAAjN,GACAA,EAAA2L,iBACA/X,EAAA2S,MAAA9P,EAAA6C,KAAA8E,OAAA3L,KAAA,OACAmB,EAAAkgB,aAAAC,WAGAtd,EAAA2lB,MAAAjkB,MACAqJ,MAAA5N,EAAAE,WAAA+tB,0BAAAvqB,QAAA,KAAAb,EAAA6C,KAAA8E,OAAAoD,OAAA/K,EAAA6C,KAAA8E,OAAA3L,MACAwa,MAAA,SAAAjN,GACAA,EAAA2L,iBACA/X,EAAA2S,MAAA9P,EAAA6C,KAAA8E,OAAA3L,KAAA,QACAmB,EAAAwlB,qBACAxlB,EAAAkgB,aAAAC,YAzaA,GAAAkK,GAAAqC,EAAA/B,EAAA,CA8aA3qB,GAAAusB,oBAAA,WACAG,IACAA,EAAAjrB,UACAirB,MAAA3sB,KAGAC,EAAAwlB,mBAAA,WACAhN,SAAAc,oBAAA,QAAAtZ,EAAAwlB,oBACAmF,EAAA,EACA3qB,EAAAusB,sBACAvsB,EAAAkb,aACAlb,EAAAkb,YAAAzZ,UAEAzB,EAAAkb,gBAAAnb,IAEAC,EAAAkuB,iBAAA,SAAArrB,EAAAoY,GAIA,QAAAkT,KACApd,sBAAA,WACAyH,SAAAE,iBAAA,QAAA1Y,EAAAwlB,oBACAhN,SAAAc,oBAAA,UAAA6U,KANA,GAAAnuB,EAAA8V,UAAAjT,EAAA2c,SAAAxf,EAAA2W,OAAA,CASA,GAAA6R,MACAvf,EAAAgS,GAAAjb,EAAAob,YAAAvY,GAAA,GACAuJ,GACAyL,YAAAhV,EACA6C,KAAA1F,EAAAyX,UAAAxO,EAAAlD,EAAAkD,EAAAhD,GACAuiB,QAEApc,GAAA1G,KAAA8F,QACA4hB,EAAAhhB,GAEApM,EAAAyM,cAAA,cAAAL,IAGAA,EAAA1G,KAAA8F,SACAxL,EAAAkb,aACAlb,EAAAwlB,qBAEAxlB,EAAAkb,YAAAqN,EAAAnc,GACA2K,KAAA9N,EAAAlD,EAAAkD,EAAAyN,KAAAK,KAAA/W,EAAA+C,MAAAqrB,sBAAApuB,EAAAgG,iBACAiR,IAAAhO,EAAAhD,EAAAgD,EAAAyN,KAAAO,IAAAjX,EAAA+C,MAAAsrB,qBAAAruB,EAAAkG,gBACA0W,MAAAxQ,EAAA1G,KAAAU,MAAAgG,EAAA1G,KAAAK,EAAAkD,EAAAyN,KAAAK,KACA4F,OAAAvQ,EAAA1G,KAAAS,OAAAiG,EAAA1G,KAAAO,EAAAgD,EAAAyN,KAAAO,IACA9Q,OAAAiG,EAAA1G,KAAAS,OACAC,MAAAgG,EAAA1G,KAAAU,OACiBoiB,GACjBhQ,SAAAE,iBAAA,UAAAyV,GACAtrB,EAAAkV,sBAKC3X,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IRkyGK,SAAU/B,EAAQD,EAASM,GS7wHjC,GAAAyB,GAAAC,CAEAD,UA0fCE,MA1fDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAomB,gBAAA,SAAAkI,GACA,GAAAC,GAAAvuB,EAAA4qB,SAAA5qB,EAAAyE,YACA+pB,EAAAxuB,EAAA4qB,SAAA0D,GACA1uB,EAAAI,EAAA0qB,aAAA1qB,EAAA2W,QACA8X,GACA1oB,EAAA,EACAE,EAAA,EACAsC,EAAA,EACAD,EAAA,GAEAomB,GACA3oB,GAAA4oB,IACA1oB,GAAA0oB,IACApmB,EAAAomB,IACArmB,EAAAqmB,KAEAzd,EAAAlR,EAAAmR,yBACAb,EAAAtQ,EAAAoR,0BASA,OARAmd,GAAAtX,KAAArX,EAAAqX,IACAsX,EAAAxX,MAAAnX,EAAAmX,KACAyX,EAAAvX,KAAArX,EAAAqX,IACAuX,EAAAzX,MAAAnX,EAAAmX,KACA0X,EAAAlmB,EAAAgmB,EAAAtX,IAAAsX,EAAApoB,OAAAmoB,EAAAzhB,UAAA7M,EAAA+C,MAAA6N,eACA6d,EAAAnmB,EAAAimB,EAAAxX,KAAAwX,EAAAnoB,MAAAkoB,EAAAxhB,WAAA9M,EAAA+C,MAAA6N,eACA6d,EAAA1oB,EAAAwoB,EAAAxX,MAAA,EAAAyX,EAAAzX,KAAAzG,EACAme,EAAAxoB,EAAAsoB,EAAAtX,KAAA,EAAAuX,EAAAvX,IAAA/F,GAEAnL,EAAA0oB,EAAA1oB,EAAA2oB,EAAA3oB,EAAA0oB,EAAA1oB,EAAA2oB,EAAA3oB,EACAE,EAAAwoB,EAAAxoB,EAAAyoB,EAAAzoB,EAAAwoB,EAAAxoB,EAAAyoB,EAAAzoB,EACAsC,EAAAkmB,EAAAlmB,EAAAmmB,EAAAnmB,EAAAkmB,EAAAlmB,EAAAmmB,EAAAnmB,EACAD,EAAAmmB,EAAAnmB,EAAAomB,EAAApmB,EAAAmmB,EAAAnmB,EAAAomB,EAAApmB,IAGAtI,EAAA0lB,YAAA,SAAA4I,GACA,GAAAG,GAAAzuB,EAAAomB,gBAAAkI,EACAG,GAAAnmB,EAAA,IAAiCmmB,EAAAnmB,EAAA,GACjCmmB,EAAAlmB,EAAA,IAAiCkmB,EAAAlmB,EAAA,GACjC+lB,EAAAvrB,MAAA0L,KAAA,QACAggB,EAAAxoB,EAAA,MACAwoB,EAAAnmB,EAAA,MACAmmB,EAAAlmB,EAAA,MACAkmB,EAAA1oB,EAAA,OAcA/F,EAAA0qB,aAAA,SAAA7nB,GAEA,IADA,GAAAkD,GAAA,EAAAE,EAAA,EACApD,EAAA4B,YAAA,oBAAA5B,EAAA+rB,UACA,yBAAA/rB,EAAA+J,UACA,yBAAA/J,EAAA+J,WACA7G,GAAAlD,EAAAoK,WACAhH,GAAApD,EAAAkK,WAEAlK,IAAA4B,UAEA,QAAoBsS,KAAAhR,EAAAkR,IAAAhR,IAEpBjG,EAAA8a,gBAAA,WACA,GAAA9a,EAAAmb,MAAA,CACA,GAAAlS,GAAAjJ,EAAA2W,OAAAC,wBACAhX,EAAAI,EAAA0qB,aAAA1qB,EAAA2W,QACAkY,EAAA,EAAA7uB,EAAA+C,MAAAwJ,gBACA7G,EAAA1F,EAAA8uB,sBAAA9uB,EAAAmb,MAAA4T,SAAAxjB,YAAAvL,EAAAmb,MAAA4T,SAAAzkB,YAC4BvE,GAAA,IAAAE,GAAA,IAAAE,OAAA,EAAAC,MAAA,EAC5BpG,GAAAmb,MAAApY,MAAAgU,KAAA9N,EAAA8N,KAAArR,EAAAK,EAAA/F,EAAA+C,MAAAwJ,gBAAAvM,EAAAgG,iBAAApG,EAAAmX,KAAA,KACA/W,EAAAmb,MAAApY,MAAAkU,IAAAhO,EAAAgO,IAAAvR,EAAAO,EAAA4oB,EAAA7uB,EAAAkG,gBAAAtG,EAAAqX,IAAA,KACAjX,EAAAmb,MAAApY,MAAAoD,OAAAT,EAAAS,OAAA0oB,EAAA,OACA7uB,EAAAmb,MAAApY,MAAAqD,MAAAV,EAAAU,MAAAyoB,EAAA7uB,EAAA+C,MAAAisB,gBAAA,KACAhvB,EAAA0lB,YAAA1lB,EAAAmb,SAGAnb,EAAA4qB,SAAA,SAAA/nB,EAAAosB,GAEA,IADA,GAAA1mB,GAAAD,EAAAvC,EAAA,EAAAE,EAAA,EAAArG,EAAAiD,EACAA,EAAAwK,cAAA,oBAAAxK,EAAA+rB,UACA7oB,GAAAlD,EAAAiK,WACA7G,GAAApD,EAAAgK,UACAtE,EAAA1F,EAAAuK,aACA9E,EAAAzF,EAAAsK,YACAtK,IAAAwK,YAEA,OAAA4hB,IACwBlY,KAAAhR,EAAAkR,IAAAhR,EAAAE,OAAAoC,EAAAnC,MAAAkC,IAExBzF,EAAAjD,EACAA,EAAAI,EAAA0qB,aAAA7nB,IACoBkU,KAAAhR,EAAAnG,EAAAmX,KAAAE,IAAAhR,EAAArG,EAAAqX,IAAA9Q,OAAAoC,EAAAnC,MAAAkC,KAEpBtI,EAAAob,YAAA,SAAAvY,GACA,GAAA6T,GAAA1W,EAAA2W,OAAAC,wBACA3N,GACAlD,EAAAlD,EAAAiU,QAAAJ,EAAAK,KACA9Q,EAAApD,EAAAmU,QAAAN,EAAAO,IAMA,OAJAjX,GAAA8Q,cACA7H,EAAAlD,GAAA/F,EAAAgG,iBACAiD,EAAAhD,GAAAjG,EAAAkG,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACAyQ,SAUA1W,EAAAud,QAAA,SAAA2R,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAAxpB,GAAA1F,EAAAmb,MAAA4T,SACA9oB,EAAAP,EAAA4E,QAIA,IAAAtK,EAAAyM,cAAA,iBACA/G,OACA0pB,SAAApvB,EAAAmb,MAAAxW,MACA0qB,SAAA3pB,EAAAf,MACAuqB,MAAAC,EACAhU,MAAAnb,EAAAmb,QACqB,QACrB,IAAAnb,EAAAmb,MAAAxW,QAAAe,EAAAf,QAAAuqB,EAAA,CAIA,GAHAlvB,EAAAgiB,QAAA/b,GAAAjG,EAAAgiB,QAAA/b,OACAjG,EAAAgiB,QAAA/b,GAAAP,EAAA8E,OAAA3L,MAAAmB,EAAAmb,MAAAxW,MACAe,EAAAjD,KAAAiD,EAAA8E,OAAA3L,MAAAmB,EAAAmb,MAAAxW,MACAsB,IAAAjG,EAAAyC,KAAA+M,OAAA,CACA,GAAAxP,EAAAyM,cAAA,UACA9H,MAAA3E,EAAAmb,MAAAxW,MACAke,aAAAnd,EAAAf,MACA2qB,QAAAJ,EACAxpB,OACAyV,MAAAnb,EAAAmb,QAC6B,QAC7Bnb,GAAA+hB,KAAA,EACA/hB,EAAAgmB,OAAAtgB,EAAAjD,MACAzC,EAAA8iB,mBAEA9iB,EAAA4E,MAAA,GAWA,MATA4T,UAAAC,KAAAuL,YAAAhkB,EAAAmb,OACAnb,EAAAkgB,aAAAC,QACAngB,EAAAyM,cAAA,WACA/G,OACAf,MAAA3E,EAAAmb,MAAAxW,MACA2qB,QAAAJ,EACA/T,MAAAnb,EAAAmb,QAEAnb,EAAAmb,UAAApb,IACA,GAUAC,EAAAoZ,YAAA,SAAArT,EAAAE,GACA,GAAAjG,EAAAE,WAAAqvB,SAAA,CACA,GAEAC,GAGAC,EACAC,EANAhqB,EAAA1F,EAAA8uB,sBAAA/oB,EAAAE,GACArG,EAAAI,EAAAwR,mBAGAme,EAAAjqB,EAAA8E,OAAA,IAGA,IAAAxK,EAAAyM,cAAA,mBAAuD/G,SAAe,QACtE1F,GAAAygB,eAAA1a,EAAAE,GACAjG,EAAA4d,cAAA7X,EAAAE,GAEAjG,EAAAmb,MADAwU,EACAnX,SAAAgR,cAAA,UAEAhR,SAAAgR,cAAAxpB,EAAAE,WAAA0vB,UACA,oBAEAlqB,EAAA1F,EAAA8uB,sBAAA/oB,EAAAE,GACA0pB,IAEA,kBAAAA,GACAH,EAAAG,EAAAvvB,MAAAJ,EAAAU,OAAuDgF,UACtC3E,MAAAgnB,QAAA4H,KACjBH,EAAAG,GAEAH,EAAA3uB,QAAA,SAAAgC,GACA,GACAS,GACAsK,EAFArP,EAAAia,SAAAgR,cAAA,SAGAzoB,OAAAgnB,QAAAllB,IACAS,EAAAT,EAAA,GACA+K,EAAA/K,EAAA,KAEAS,EAAAT,EACA+K,EAAA/K,GAEAS,IAAAoC,EAAAf,QAA6C+qB,GAAA,GAC7CnxB,EAAAoG,MAAArB,EACA/E,EAAAsH,UAAA+H,EACA5N,EAAAmb,MAAAwO,YAAAprB,KAEAmxB,IACAD,EAAAjX,SAAAgR,cAAA,UACAiG,EAAA9qB,MAAAe,EAAAf,MACA8qB,EAAA5pB,UAAAH,EAAAf,MACA3E,EAAAmb,MAAAwO,YAAA8F,IAEAzvB,EAAAmb,MAAAzC,iBAAA,oBACA1Y,EAAAud,UACAvd,EAAA4E,MAAA,MAGA4T,SAAAC,KAAAkR,YAAA3pB,EAAAmb,OACAnb,EAAA4pB,kBAAA5pB,EAAAmb,MAAA,8BACAnb,EAAAmb,MAAApY,MAAA6nB,SAAA,WACA5qB,EAAAmb,MAAA4T,SAAArpB,EACA1F,EAAA8a,kBACA9a,EAAAmb,MAAApY,MAAAkoB,OAAA,IACAjrB,EAAAmb,MAAAxW,MAAAe,EAAAf,MACA3E,EAAAmb,MAAAgF,QACAngB,EAAAmb,MAAAzC,iBAAA,QAAA1Y,EAAA8X,iBACA9X,EAAAmb,MAAAzC,iBAAA,WAAA1Y,EAAA8X,iBACA9X,EAAAmb,MAAAzC,iBAAA,UAAA1Y,EAAA8X,iBACA9X,EAAAmb,MAAAzC,iBAAA,YAAA1Y,EAAA8X,iBACA9X,EAAAmb,MAAAzC,iBAAA,mBAAA7V,GACA,GAAAgtB,GAAAnqB,EAAA6F,YACAukB,EAAApqB,EAAA4E,QAEA,SAAAzH,EAAA0d,QACAvgB,EAAAud,SAAA,GACAvd,EAAA4E,MAAA,OAEiB,SAAA/B,EAAA0d,WACjBvgB,EAAAE,WAAA0vB,WACA5vB,EAAAE,WAAA0vB,WAAA/sB,EAAA4Z,UACAzc,EAAAud,UACAvd,EAAA4E,MAAA,OACiB,QAAA/B,EAAA0d,QAAA,CAEjB,GADA1d,EAAAkV,kBACA/X,EAAAud,UACA,MAEA1a,GAAA4Z,SACAoT,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAAjwB,EAAA4P,OAAA,EACAsgB,GAAA,GAEAD,EAAAjwB,EAAA4P,OAAA,IACAqgB,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAA9vB,EAAAyC,KAAA+M,OAAA,GAEAsgB,EAAA9vB,EAAAyC,KAAA+M,OAAA,IACAsgB,EAAA,GAEA9vB,EAAAygB,eAAAoP,EAAAC,GACA9vB,EAAAoZ,YAAAyW,EAAAC,MAGA9vB,EAAAyM,cAAA,aAA6C/G,OAAAyV,MAAAnb,EAAAmb,UAE7Cnb,EAAA4pB,kBAAA,SAAAmB,EAAAgF,GACA,GAAAC,IACAC,6CACA9pB,OAAA,OACA+pB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAA/rB,EAAA+C,MAAAipB,6BACAnB,MAAA7qB,EAAA+C,MAAAkpB,wBACAoE,OAAArwB,EAAA+C,MAAAutB,yBACAC,aAAAvwB,EAAA+C,MAAAytB,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAA6tB,6BACAC,SAAA7wB,EAAA+C,MAAA+tB,4BAEAC,8CACA5qB,OAAA,OACA+pB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAA/rB,EAAA+C,MAAAiuB,sBACAnG,MAAA7qB,EAAA+C,MAAAkuB,iBACAZ,OAAArwB,EAAA+C,MAAAmuB,0BACAX,aAAAvwB,EAAA+C,MAAAouB,gCACAV,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAAquB,kCACAP,SAAA7wB,EAAA+C,MAAAsuB,iCAEAC,uCACAC,SAAA,QACA1G,MAAA7qB,EAAA+C,MAAAyuB,2BACAX,SAAA7wB,EAAA+C,MAAA0uB,8BACAd,WAAA3wB,EAAA+C,MAAA2uB,sBACAxB,cAAA,UAEAyB,gCACAhB,WAAA3wB,EAAA+C,MAAA2uB,sBACAb,SAAA7wB,EAAA+C,MAAA6uB,oBACA7F,WAAA/rB,EAAA+C,MAAAiuB,sBACAnG,MAAA7qB,EAAA+C,MAAAkuB,iBACAZ,OAAArwB,EAAA+C,MAAA8uB,kBACAzB,QAAApwB,EAAA+C,MAAA+uB,mBACAvB,aAAAvwB,EAAA+C,MAAAgvB,wBACAC,QAAAhyB,EAAA+C,MAAAkvB,mBACArH,SAAA,WACAK,OAAA,EACAiH,SAAA,UAEAC,qCACApG,WAAA/rB,EAAA+C,MAAAiuB,sBACAnG,MAAA7qB,EAAA+C,MAAAkuB,kBAEAmB,2CACArG,WAAA/rB,EAAA+C,MAAAsvB,2BACAxH,MAAA7qB,EAAA+C,MAAAuvB,uBAEAC,0BACA3H,SAAA,WACAK,OAAA,MAEAuH,mBACA5H,SAAA,WACAmB,WAAA/rB,EAAA+C,MAAA4O,gBACAsZ,OAAA,IACAwH,UAAA,cACArC,QAAA,KAEAsC,iCACA9H,SAAA,QACA3T,IAAA,OACAF,KAAA,OACAsZ,OAAA,OACA2B,QAAA,IACA5V,OAAA,UACAhW,MAAA,MACAD,OAAA,MACAsqB,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAA2uB,sBACAb,SAAA7wB,EAAA+C,MAAA6uB,qBAEAe,8BACAF,UAAA,cACAG,QAAA,OACAC,OAAA,IACAzC,QAAA,SAAApwB,EAAA+C,MAAA+vB,oBAAA,KACArC,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAAgwB,mBACAlC,SAAA7wB,EAAA+C,MAAAiwB,iBACAC,UAAAjzB,EAAA+C,MAAAmwB,kBACA7C,OAAArwB,EAAA+C,MAAAowB,eACAtI,MAAA7qB,EAAA+C,MAAAqwB,cACArH,WAAA/rB,EAAA+C,MAAAswB,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACAjD,aAAA,KAEAkD,qCACAhD,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAA2uB,sBACAb,SAAA7wB,EAAA+C,MAAA6uB,oBACA/G,MAAA,UACAkB,WAAA,UACA8G,OAAA7yB,EAAA+C,MAAA2wB,sBACAnD,aAAAvwB,EAAA+C,MAAA4wB,4BACAzD,cAAA,UAEA0D,2CACA7H,WAAA/rB,EAAA+C,MAAAsvB,2BACAxH,MAAA7qB,EAAA+C,MAAAuvB,uBAEAuB,sCACAhB,OAAA7yB,EAAA+C,MAAA+wB,uBACAC,QAAA/zB,EAAA+C,MAAAixB,wBACA1I,SAAAtrB,EAAA+C,MAAAkxB,yBACAC,SAAAl0B,EAAA+C,MAAAoxB,0BAEAC,gCACA3D,WAAA,SACAC,WAAA,SACAC,WAAA3wB,EAAA+C,MAAA2uB,sBACAb,SAAA7wB,EAAA+C,MAAA6uB,oBACA7F,WAAA/rB,EAAA+C,MAAAiuB,sBACAnG,MAAA7qB,EAAA+C,MAAAkuB,iBACAZ,OAAArwB,EAAA+C,MAAA8uB,kBACAzB,QAAApwB,EAAA+C,MAAA+uB,mBACAvB,aAAAvwB,EAAA+C,MAAAgvB,wBACAC,QAAAhyB,EAAA+C,MAAAkvB,mBACAC,SAAA,SACAmC,WAAA,UAEAC,yCACAvI,WAAA/rB,EAAA+C,MAAAwxB,mCAGAvE,GAAAD,IACA/wB,OAAAmG,KAAA6qB,EAAAD,IAAA7a,IAAA,SAAAnT,GACAgpB,EAAAhoB,MAAAhB,GAAAiuB,EAAAD,GAAAhuB,MAKA/B,EAAAilB,SAAA,SAAA5lB,GACAW,EAAAyE,WAAApF,GAAAmZ,SAAAgR,cAAA,UACAxpB,EAAAyE,YAAA,8BAAAP,KAAAlE,EAAAyE,WAAAmI,WACA5M,EAAA8Q,aAAA,EACA9Q,EAAA2N,WAAA3N,EAAAyE,WAAAkJ,WACA3N,EAAAqG,IAAArG,EAAA2N,WAAAtN,QACAL,EAAA2W,OAAA3W,EAAA2N,WAAAgJ,OACA3W,EAAAkgB,aAAAlgB,EAAA2N,WAAAuS,aACAlgB,EAAAikB,YAAAjkB,EAAA2W,SAEA3W,EAAAkgB,aAAA1H,SAAAgR,cAAA,SACAxpB,EAAAkgB,aAAAsU,OAAAx0B,EAAAU,KAAA+mB,KACAznB,EAAA4pB,kBAAA5pB,EAAAkgB,aAAA,iCACAlgB,EAAA8Q,aAAA,EACA9Q,EAAAoa,cAAApa,EAAAyE,WACAzE,EAAAyE,WAAAzE,EAAAoa,cACApa,EAAAka,eAAA,YAAAhW,KAAAlE,EAAAoa,cAAAqa,SACAz0B,EAAAS,aACAT,EAAAoa,cAAApa,EAAAyE,WAAAiwB,cACA10B,EAAA2W,OAAA6B,SAAAgR,cAAA,UACAxpB,EAAAyE,WAAAklB,YAAA3pB,EAAA2W,QACA3W,EAAAyE,WAAAklB,YAAA3pB,EAAAkgB,eACiBlgB,EAAAka,gBACjBla,EAAA2W,OAAA3W,EAAAoa,cACApa,EAAAoa,cAAAuP,YAAA3pB,EAAAkgB,gBAEAlgB,EAAA2W,OAAA6B,SAAAgR,cAAA,UACAxpB,EAAAoa,cAAAuP,YAAA3pB,EAAA2W,QACA3W,EAAAoa,cAAAuP,YAAA3pB,EAAAkgB,eAEAlgB,EAAAqG,IAAArG,EAAA2W,OAAAge,WAAA,MACA30B,EAAAqG,IAAAuuB,aAAA,aACA50B,EAAAikB,YAAAjkB,EAAA2W,QAEA3W,EAAAkgB,aAAAxH,iBAAA,gBAAA7V,GACAA,EAAA2c,SAAAxf,EAAA2W,SACA3W,EAAA8V,UAAA,KAGA5U,OAAAwX,iBAAA,SAAA1Y,EAAA2U,QACAzT,OAAA2zB,mBACA70B,EAAAmkB,SAAA,GAAAjjB,QAAA2zB,iBAAA,SAAAC,GACAA,EAAAj0B,QAAA,SAAAk0B,GACA/0B,EAAA2U,QAAA,QAGA3U,EAAA2W,OAAAlS,YAAA5D,QAAA,SAAAkqB,GACAA,GACA/qB,EAAAmkB,SAAA6Q,QAAAjK,GAA+C7qB,YAAA,OAG/CF,EAAAikB,YAAAvL,iBAAA,SAAA1Y,EAAA2U,QAAA,GACA3U,EAAAikB,YAAAvL,iBAAA,aAAA1Y,EAAA4X,YAAA,GACA5X,EAAAikB,YAAAvL,iBAAA,UAAA1Y,EAAAmZ,SAAA,GACAnZ,EAAAikB,YAAAvL,iBAAA,YAAA1Y,EAAA2X,WAAA,GACA3X,EAAAikB,YAAAvL,iBAAA,WAAA1Y,EAAA6gB,UAAA,GACA7gB,EAAAikB,YAAAvL,iBAAA,QAAA1Y,EAAAqZ,OAAA,GACArZ,EAAAikB,YAAAvL,iBAAA,YAAA1Y,EAAA0X,WACA1X,EAAAikB,YAAAvL,iBAAA,QAAA1Y,EAAAghB,aAAA,GACAhhB,EAAA2W,OAAA+B,iBAAA,cAAA1Y,EAAAkuB,kBAAA,IACAluB,EAAA8Q,YAAA9Q,EAAA2N,WAAA6K,UAAAE,iBAAA,OAAA1Y,EAAAohB,MACAphB,EAAAkgB,aAAAxH,iBAAA,WAAA1Y,EAAA4gB,UAAA,GACA5gB,EAAAkgB,aAAAxH,iBAAA,QAAA1Y,EAAA2gB,OAAA,GACA3gB,EAAAkgB,aAAAxH,iBAAA,UAAA1Y,EAAAogB,SAAA,IAEApgB,EAAAglB,OAAA,WACAhlB,EAAAQ,KAAAiE,YAAAzE,EAAAQ,KAAAiE,WAAAwwB,mBACA/2B,KAAAuC,YACAT,EAAAma,wBAAAna,EAAAQ,KAAAiE,WAAAiwB,cAEA10B,EAAAma,wBAAAna,EAAAQ,KAAAiE,WAEAzE,EAAA4mB,WAAA5mB,EAAAQ,KAAAiE,WAAAwwB,mBACAj1B,EAAAQ,KAAAiE,WAAAzE,EAAA4mB,YAEA5mB,EAAAilB,SAAAjlB,EAAAQ,KAAAiE,eAGCrE,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,ITqxHK,SAAU/B,EAAQD,EAASM,GUjxIjC,GAAAyB,GAAAC,CAEAD,UA09BCE,MA19BDD,EAAA,WACA,YACA,iBAAAE,GAUAA,EAAA2mB,eAAA,SAAAtnB,GAKA,IAJA,GAAA61B,GAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAt1B,EAAA,GACAP,GAAA,GACAO,EAAAknB,OAAAwO,aAAAj2B,EAAAg2B,EAAAH,GAAAt1B,EACAP,EAAAiY,KAAAie,MAAAl2B,EAAAg2B,GAAA,CAEA,OAAAz1B,IAYAI,EAAAimB,aAAA,SAAAtnB,EAAAiR,GACA,GAAAhQ,GAAAI,EAAA4b,WACA,IAAAhc,EAAA4P,OAAAI,EACA,SAAA9M,OAAA,4CAEA9C,GAAAwjB,eAAA7kB,EAAAiB,GACAA,EAAAga,OAAAhK,EAAA,EAAAjR,GACAqB,EAAAyC,KAAA5B,QAAA,SAAAwL,GACArM,EAAA4iB,kBAAAvW,EAAA1N,KAEAqB,EAAAU,KAAAiD,OAAA/D,GAUAI,EAAAkmB,aAAA,SAAAtW,GACA,GAAAhQ,GAAAI,EAAA4b,WAEA5b,GAAAyC,KAAA5B,QAAA,SAAAwL,SACAA,GAAAzM,EAAAgQ,GAAA/Q,QAEAe,EAAAga,OAAAhK,EAAA,GACA5P,EAAAU,KAAAiD,OAAA/D,GAWAI,EAAAmmB,UAAA,SAAAxnB,GACA,GAAAiB,GAAAI,EAAA4b,WACA5b,GAAAwjB,eAAA7kB,EAAAiB,GACAA,EAAA2E,KAAA5F,GACAqB,EAAAyC,KAAA5B,QAAA,SAAAwL,GACArM,EAAA4iB,kBAAAvW,EAAA1N,KAEAqB,EAAAU,KAAAiD,OAAA/D,GASAI,EAAA+lB,UAAA,SAAAnW,GACA5P,EAAAujB,aAAA3J,OAAAhK,EAAA,GACA5P,EAAAyd,YACAzd,EAAA2U,QAAA,IAUA3U,EAAA8lB,UAAA,SAAAlnB,EAAAgR,GACA,GAAA5P,EAAAujB,aAAA/T,OAAAI,EACA,SAAA9M,OAAA,6CAEA9C,GAAAujB,aAAA3J,OAAAhK,EAAA,EAAAhR,GACAoB,EAAA4b,YAAA/a,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAA4iB,kBAAA5iB,EAAAujB,aAAA3T,GAAAjR,KAGAqB,EAAAyd,YACAzd,EAAA2U,QAAA,IASA3U,EAAAgmB,OAAA,SAAApnB,GACAoB,EAAAujB,aAAAhf,KAAA3F,GACAoB,EAAA4b,YAAA/a,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAA4iB,kBAAA5iB,EAAAujB,aAAAvjB,EAAAujB,aAAA/T,OAAA,GAAA7Q,KAGAqB,EAAAyd,YACAzd,EAAA2U,QAAA,IAUA3U,EAAAqmB,aAAA,SAAA/b,EAAAnE,GACAnG,EAAAmM,MAAAR,KAAA3L,EAAAyC,KAAA6H,GAAAtK,EAAAiI,WAAA9B,EACAnG,EAAA4E,MAAA,IAUA5E,EAAAsmB,eAAA,SAAAkP,EAAApvB,GACA,GAAAxG,GAAAI,EAAA4b,WACA5b,GAAAmM,MAAAP,QAAAhM,EAAA41B,GAAAx1B,EAAAiI,WAAA7B,EACApG,EAAA4E,MAAA,IASA5E,EAAAumB,kBAAA,WACAvmB,EAAAmM,MAAAP,WACA5L,EAAA4E,MAAA,IASA5E,EAAAwmB,gBAAA,WACAxmB,EAAAmM,MAAAR,QACA3L,EAAA4E,MAAA,IAUA5E,EAAAyd,UAAA,SAAAnD,EAAA3V,GACA,QAAA8wB,KACAz1B,EAAAsjB,yBACAtkB,OAAAmG,KAAAnF,EAAAoP,eAAAvO,QAAA,SAAA0B,GACA,GAAAiI,GAAAxK,EAAAukB,gBAAAjK,EACA9P,KAGAxK,EAAA6hB,cAAArX,EAAAjI,QAAAvC,EAAAuC,OAAA+X,EAAAvO,MAAA,UACA/L,EAAAyC,KAAAzC,EAAAyC,KAAAF,OAAA,SAAA8J,GACA,MAAArM,GAAA6hB,cAAAxV,EAAA9J,GAAAvC,EAAAoP,cAAA7M,SAGAvC,EAAA2U,SACA3U,EAAA4E,MAAA,GAEA,OAAA7E,KAAAua,OAAAva,KAAA4E,EAEA,MADA3E,GAAAoP,iBACAqmB,KAEAnb,GAAA,KAAA3V,OAAA5E,KAAA4E,EAGA3E,EAAAoP,cAAAkL,GAAA3V,QAFA3E,GAAAoP,cAAAkL,GAIAmb,KASAz1B,EAAAslB,iBAAA,SAAAhb,GACA,GAAA2M,GAAA,EAAAlR,EAAA,EAAAvH,EAAAwB,EAAAyC,KAAA+M,OACAuK,EAAA,EAAA/Z,EAAA+C,MAAAwJ,eAIA,IAHAvM,EAAAE,WAAA8R,aACAxT,GAAA,GAEA8L,EAAA9L,EACA,SAAAsE,OAAA,uBAEA,MAAAiD,EAAAuE,GACA2M,IAAAjX,EAAAmM,MAAAR,KAAA3L,EAAAyC,KAAAsD,GAAA/F,EAAAiI,YAAAjI,EAAA+C,MAAAmK,YAAA6M,EACAhU,GAAA,CAGA,OAAAkR,IAAAjX,EAAAmM,MAAAR,KAAA3L,EAAAyC,KAAA6H,GAAAtK,EAAAiI,YAAAjI,EAAA+C,MAAAmK,aASAlN,EAAAqlB,qBAAA,SAAA9Z,GACA,GAAAwL,GAAA,EAAA9Q,EAAA,EAAArG,EAAAI,EAAA4b,WACA,IAAArQ,EADA3L,EAAA4P,OAAA,EAEA,SAAA1M,OAAA,0BAEA,MAAAmD,EAAAsF,GACAwL,GAAA/W,EAAAmM,MAAAP,QAAAhM,EAAAqG,GAAAjG,EAAAiI,YAAArI,EAAAqG,GAAAG,MACAH,GAAA,CAEA,OAAA8Q,IAUA/W,EAAAmlB,SAAA,SAAApf,EAAAE,OACAlG,KAAAgG,IACA/F,EAAAgN,UAAAC,WAAAjN,EAAAqlB,qBAAAtf,QAEAhG,KAAAkG,IACAjG,EAAAgN,UAAAD,UAAA/M,EAAAslB,iBAAArf,KAUAjG,EAAAolB,QAAA,SAAAnf,GACAjG,EAAAmlB,SAAA,EAAAlf,IAUAjG,EAAAygB,eAAA,SAAA1a,EAAAE,GAQiB,IAPjBjG,EAAAiO,aAAA1L,OAAA,SAAAmD,GACA,OAAAA,EAAA4E,WAAArE,OAAAlG,KAAAkG,KACAP,EAAA6F,cAAAxF,OAAAhG,KAAAgG,IACAL,EAAAK,EAAA,GACAL,EAAAO,EAAA,GACAP,EAAAK,EAAAL,EAAAU,MAAApG,EAAAoG,OACAV,EAAAO,EAAAP,EAAAS,OAAAnG,EAAAmG,SACiBqJ,QACjBxP,EAAAmlB,SAAApf,EAAAE,IAWAjG,EAAA4d,cAAA,SAAA7X,EAAAE,GACAjG,EAAAsL,YACAhB,SAAArE,EACAsF,YAAAxF,IASA/F,EAAAwgB,UAAA,WACAxgB,EAAAid,YACAhG,IAAA,EACAF,KAAA,EACA6F,MAAA5c,EAAAwR,mBAAAhC,OAAA,EACAmN,OAAA3c,EAAAyC,KAAA+M,OAAA,KAUAxP,EAAA01B,iBAAA,SAAAnqB,GACA,GAAAoqB,IAAA,CAMA,OALA31B,GAAAyC,KAAA5B,QAAA,SAAAwL,EAAA/B,GACAtK,EAAAkL,WAAAZ,KAAA,IAAAtK,EAAAkL,WAAAZ,GAAAnH,QAAAnD,EAAA0L,OAAAE,QAAAL,MACAoqB,GAAA,KAGAA,GAYA31B,EAAA2d,aAAA,SAAApS,EAAAiQ,EAAAoa,EAAAC,GAEA,QAAAC,GAAAv3B,GACAyB,EAAAyC,KAAA5B,QAAA,SAAAwL,EAAA/B,GACAtK,EAAAkL,WAAAZ,GAAAtK,EAAAkL,WAAAZ,QACA,IAAAtK,EAAAkL,WAAAZ,GAAAnH,QAAA5E,IACAyB,EAAAkL,WAAAZ,GAAA/F,KAAAhG,KALA,GAAAqB,GAAAiD,EAAAkD,CAiBA,IAAA6vB,EAAA,CACA,IAAA51B,EAAAsL,WAAuC,MAGvC,KAFA1L,EAAA0X,KAAAoF,IAAA1c,EAAAsL,WAAAC,eACA1I,EAAAyU,KAAAoD,IAAA1a,EAAAsL,WAAAC,eACAxF,EAAAnG,EAA2BiD,EAAAkD,EAAOA,GAAA,EAClC+vB,EAAA/vB,GAGAyV,GAAAoa,IACA51B,EAAAkL,cACAlL,EAAAsL,WAAAC,cACAvL,EAAAsL,WAAAhB,SAAAtK,EAAA6R,gBAEA2J,GAAAxb,EAAA01B,iBAAAnqB,GArBA,SAAAhN,GACAyB,EAAAyC,KAAA5B,QAAA,SAAAwL,EAAA/B,GACAtK,EAAAkL,WAAAZ,GAAAtK,EAAAkL,WAAAZ,QACA,IAAAtK,EAAAkL,WAAAZ,GAAAnH,QAAA5E,IACAyB,EAAAkL,WAAAZ,GAAAsP,OAAA5Z,EAAAkL,WAAAZ,GAAAnH,QAAA5E,GAAA,MAkBAgN,GAEAuqB,EAAAvqB,GAEAsqB,GACA71B,EAAAyM,cAAA,oBACA4Q,aAAArd,EAAAsd,kBACApS,WAAAlL,EAAAkL,WACA8R,gBAAAhd,EAAAsc,wBAaAtc,EAAA8c,UAAA,SAAAxS,EAAAkR,EAAAoa,EAAAC,GAEA,QAAA7P,GAAA+P,GACA/1B,EAAAkL,WAAA6qB,MACA/1B,EAAAkL,WAAA6qB,GAAAxxB,MAAA,GACA3E,EAAAiB,QAAA,SAAAqhB,GACAliB,EAAAkL,WAAA6qB,GAAAxxB,KAAA2d,EAAAtS,SALA,GAAA7J,GAAAiwB,EAAAjJ,EAAAntB,EAAAI,EAAA4b,WAQA,UAAA5b,EAAA+c,wBAAAhd,KAAAC,EAAAi2B,aACAj2B,EAAAkL,WAAAZ,IAAAtK,EAAAkL,WAAAZ,GAAAkF,OAAA,IAAA5P,EAAA4P,QACAgM,EAEA,YADAxb,EAAAkL,WAAAZ,MAKA,SAAAtK,EAAA+c,wBAAAhd,KAAAC,EAAAi2B,WACA,GAAAL,OAAA71B,KAAAC,EAAAi2B,WAAA,CACA,IAAAj2B,EAAAsL,WAA2C,MAG3C,KAFA0qB,EAAA1e,KAAAoF,IAAA1c,EAAAsL,WAAAhB,YACAyiB,EAAAzV,KAAAoD,IAAA1a,EAAAsL,WAAAhB,YACAvE,EAAAiwB,EAAgCjJ,GAAAhnB,EAASA,GAAA,EACzCigB,EAAAjgB,OAGAigB,GAAA1b,EAGAurB,IACA71B,EAAAyM,cAAA,oBACA4Q,aAAArd,EAAAsd,kBACApS,WAAAlL,EAAAkL,WACA8R,gBAAAhd,EAAAgd,mBAUAhd,EAAA6lB,aAAA,SAAAvb,GACA,GAAA4rB,GAAAl2B,EAAAyC,KAAA6H,GAAAtK,EAAAiI,SACAjI,GAAAyM,cAAA,gBACA0pB,UAAAn2B,EAAA4O,WAAAsnB,GACAzzB,KAAAzC,EAAAyC,KAAA6H,GACAA,aAEAtK,EAAAgI,aAAAkuB,GAAAzO,OACAznB,EAAAgI,aAAAkuB,GAAAz0B,gBACAzB,GAAAgI,aAAAkuB,SACAl2B,GAAAmM,MAAAkE,MAAA6lB,SACAl2B,GAAA4O,WAAAsnB,GACAl2B,EAAAyM,cAAA,aACAS,WAAAlN,EAAA+C,MAAAmK,aAEAlN,EAAA2U,QAAA,GACA3U,EAAA4E,MAAA,IASA5E,EAAA4lB,WAAA,SAAAtb,GACA,GAIAqG,GAJAO,EAAAlR,EAAAmR,yBACAb,EAAAtQ,EAAAmM,MAAAP,QAAAoC,YAAAhO,EAAA+C,MAAAiN,mBACAkmB,EAAAl2B,EAAAyC,KAAA6H,GAAAtK,EAAAiI,UACAM,EAAAvI,EAAAmM,MAAAkE,MAAA6lB,IAAAl2B,EAAA+C,MAAAqzB,cAEAp2B,GAAA4O,WAAAsnB,KACAvlB,EAAA3Q,EAAAY,YACAkU,MAAA9U,EAAAE,WAAA4U,MACAjW,KAAAmB,EAAAE,WAAA2O,eACA7O,EAAAE,WAAArB,KAAA,OAAAq3B,MAAAn2B,GACA0E,YACAkJ,WAAA3N,EAAAU,KACAkM,SAAA,uBACAQ,aAAA7E,EACA4E,YAAAnN,EAAAoG,MAAAkK,EACA9F,QAAiCpE,MAAApG,EAAAoG,MAAAkK,GACjCxD,WAAAwD,EACAzD,UAAAqE,EACA7D,aAAArN,EAAAU,KAAA+D,WACAA,WAAAzE,EAAAU,KAAA+D,WACA1B,MAAA,OACAN,KAAAzC,EAAAyC,KAAA6H,MAGAtK,EAAA4O,WAAAsnB,GAAAvlB,GAEAA,EAAA3Q,EAAA4O,WAAAsnB,GACAvlB,EAAA3B,SAAA,EACAhP,EAAAyM,cAAA,cACAkE,WACAlO,KAAAzC,EAAAyC,KAAA6H,GACAA,aAEAtK,EAAAgI,aAAAkuB,GAAAvlB,EACA3Q,EAAAmM,MAAAkE,MAAA6lB,GAAA3tB,EACAvI,EAAAyM,cAAA,aAA6CtG,OAAAnG,EAAA+C,MAAAmK,aAC7ClN,EAAA2U,QAAA,IASA3U,EAAA8d,WAAA,SAAAxT,GAEA,GADAtK,EAAAgI,aAAAhI,EAAAyC,KAAA6H,GAAAtK,EAAAiI,WAEA,MAAAjI,GAAA6lB,aAAAvb,EAEAtK,GAAA4lB,WAAAtb,IAWAtK,EAAAukB,gBAAA,SAAA1lB,GACA,GAAAkH,GAAAxH,EAAAyB,EAAA4b,WACA,KAAA7V,EAAA,EAAuBA,EAAAxH,EAAAiR,OAAczJ,GAAA,EACrC,GAAAxH,EAAAwH,GAAAlH,SACA,MAAAN,GAAAwH,IAYA/F,EAAA8gB,kBAAA,SAAAjiB,EAAAuL,GACApK,EAAAmM,MAAAP,QAAA,eAAA/M,IAAAmB,EAAAukB,gBAAA1lB,GAAAmB,EAAAiI,WACAjI,EAAAulB,wBAAA1mB,GACAuL,IACApK,EAAA2U,SACA3U,EAAA4E,MAAA,KAqBA5E,EAAAylB,cAAA,SAAA/f,EAAA4E,GAEA,OAAAvK,KAAAuK,EACA,MAAAtK,GAAAiO,aAAA1L,OAAA,SAAA5D,GACA,MAAAA,GAAA4M,cAAA7F,GAAA/G,EAAA2L,eACiBkF,OAAA,CAEjB,IAAAzJ,GAAAvH,EAAAwB,EAAAiO,aAAAuB,MACA,KAAAzJ,EAAA,EAAuBA,EAAAvH,EAAOuH,GAAA,EAC9B,GAAAL,EAAAK,IAAA/F,EAAAiO,aAAAlI,MAAAL,EAAAO,IAAAjG,EAAAiO,aAAAlI,GAAAE,EACA,QAGA,WAaAjG,EAAA2S,MAAA,SAAAsQ,EAAAoT,EAAAC,EAAAC,GACA,GAAA1qB,GACAlN,EAAAqB,EAAA4b,YAAArZ,OAAA,SAAA2f,GACA,MAAAA,GAAArjB,OAAAokB,GAGA,IADAjjB,EAAAiP,QAAAgU,EACA,IAAAtkB,EAAA6Q,OACA,SAAA1M,OAAA,oCAEA+I,GAAAyqB,GAAAt2B,EAAAwd,QAAA7e,EAAA,GAAAoN,MACAF,OAAA9L,KAAApB,EAAA,GAAAoN,MACAvI,QAAAC,KAAA,qDAAA9E,EAAA,GAAAoN,MAEA/L,EAAAyC,KAAAzC,EAAAyC,KAAA+zB,KAAA,kBAAA3qB,KAAAoX,EAAAoT,GAAAr2B,EAAAwd,QAAArZ,QACAnE,EAAAyM,cAAA,eAA+C5N,KAAAokB,EAAAoT,cAC/Cr2B,EAAA4E,MAAA,GACA2xB,GACAv2B,EAAAwe,kBAEAxe,EAAA+b,SAAA,SAAAlZ,GACA,QAAAA,EAAAkD,EAAA,GACAlD,EAAAkD,EAAA/F,EAAAoG,OACAvD,EAAAoD,EAAA,GACApD,EAAAoD,EAAAjG,EAAAmG,SAaAnG,EAAAy2B,gBAAA,SAAAlrB,GACA,MAAAvL,GAAAiO,aAAA1L,OAAA,SAAA5D,GACA,MAAAA,GAAA4M,kBACaiE,OAAA,GAUbxP,EAAA02B,aAAA,SAAApsB,GACA,MAAAtK,GAAAiO,aAAA1L,OAAA,SAAA5D,GACA,MAAAA,GAAA2L,eACakF,OAAA,GAWbxP,EAAA8uB,sBAAA,SAAA/oB,EAAAE,GACA,MAAAjG,GAAAiO,aAAA1L,OAAA,SAAA5D,GACA,MAAAA,GAAA4M,cAAAxF,GAAApH,EAAA2L,WAAArE,IACa,IAWbjG,EAAAyX,UAAA,SAAA1R,EAAAE,EAAA0wB,GACA,GAAAp4B,GAAAmH,EAAAkxB,EAAAD,EAAA32B,EAAAE,WAAA22B,gBAAA,EAAAr4B,EAAAwB,EAAAiO,aAAAuB,MACA,IAAAxP,EAAAiO,cAAAjO,EAAAiO,aAAAuB,OAAA,CAEA,GADAxP,EAAA8V,UAAA,IACA7P,EAAAjG,EAAAmG,QACAF,EAAA,GACAF,EAAA/F,EAAAoG,OACAL,EAAA,GAEA,MADA/F,GAAA8V,UAAA,GAEAC,YAAA,UACA1V,QAAA,UAGA,KAAA9B,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAQ9B,GAPAmH,EAAA1F,EAAAiO,aAAA1P,GACAo4B,GAAA,gCAAAzyB,KAAAwB,EAAA3C,SACA2C,EAAAK,GAAA6wB,EACAlxB,EAAAO,GAAA2wB,EACAlxB,EAAAS,QAAAywB,EACAlxB,EAAAU,OAAAwwB,GAEAlxB,EAAAK,EAAA/F,EAAA+C,MAAAwJ,gBAAAxG,GACAL,EAAAK,EAAAL,EAAAU,MAAApG,EAAA+C,MAAAwJ,gBAAAxG,GACAL,EAAAO,EAAAjG,EAAA+C,MAAAwJ,gBAAAtG,GACAP,EAAAO,EAAAP,EAAAS,OAAAnG,EAAA+C,MAAAwJ,gBAAAtG,EACA,kCAAA/B,KAAAwB,EAAA3C,QACA2C,EAAAqQ,YAAA,sBACArQ,EAAArF,QAAA,sBACAqF,EAAA6nB,aAAA,EACA7nB,EAAAoxB,qBAAA,EACA7wB,EAAAjG,EAAAgN,UAAA0H,IAAA9O,EAAAK,EAAAjG,EAAAgN,UAAA+G,iBACArO,EAAAqQ,YAAA,yBACArQ,EAAArF,QAAA,0BACyB4F,EAAAjG,EAAAgN,UAAA0H,IAAA9O,EAAAK,IACzBP,EAAAqQ,YAAA,sBACArQ,EAAArF,QAAA,uBAEAL,EAAA2W,OAAA5T,MAAAqZ,OAAA,UACA1W,GAEA,8BAAAxB,KAAAwB,EAAA3C,QACA2C,EAAAqQ,YAAA,wBACArQ,EAAArF,QAAA,wBACAqF,EAAA6nB,aAAA,EACA7nB,EAAAqxB,uBAAA,EACAhxB,EAAA/F,EAAAgN,UAAA0H,IAAAnM,EAAAxC,EAAA/F,EAAAgN,UAAAqH,gBACA3O,EAAAqQ,YAAA,0BACArQ,EAAArF,QAAA,2BACyB0F,EAAA/F,EAAAgN,UAAA0H,IAAAnM,EAAAxC,IACzBL,EAAAqQ,YAAA,yBACArQ,EAAArF,QAAA,0BAEAL,EAAA2W,OAAA5T,MAAAqZ,OAAA,UACA1W,GAEAA,EAAAK,EAAAL,EAAAU,MAAA,GAAApG,EAAAE,WAAA82B,iBAAAjxB,GACAL,EAAAK,EAAAL,EAAAU,MAAA,GAAApG,EAAAE,WAAA82B,iBAAAjxB,GACA/F,EAAAE,WAAA+2B,oBACAj3B,EAAAE,WAAAg3B,2BAAA,SAAAxxB,EAAA3C,OACA,SAAA2C,EAAA3C,SACA/C,EAAAE,WAAAi3B,uBACA,mCAAAh0B,QAAAuC,EAAA3C,SACA,mCAAAI,QAAAuC,EAAA3C,SACA2C,EAAArF,QAAA,YACAqF,EAAAqQ,YAAA,YACArQ,GAEAA,EAAAO,EAAAP,EAAAS,OAAA,GAAAnG,EAAAE,WAAA82B,iBAAA/wB,GACAP,EAAAO,EAAAP,EAAAS,OAAA,GAAAnG,EAAAE,WAAA82B,iBAAA/wB,GACAjG,EAAAE,WAAAk3B,iBACAp3B,EAAAE,WAAAm3B,wBAAA,SAAA3xB,EAAA3C,OACA,SAAA2C,EAAA3C,QACA,qBAAA2C,EAAA3C,OACA2C,EAAArF,QAAA,YACAqF,EAAAqQ,YAAA,YACArQ,GAEA,qBAAAA,EAAA3C,OACA2C,EAAArF,QAAA,OACAqF,EAAAqQ,YAAA,iBACArQ,GAEA,kBAAAA,EAAA3C,OACA2C,EAAArF,QAAA,OACAqF,EAAAqQ,YAAA,cACArQ,GAEAA,EAAA8F,QACAxL,EAAA8V,UAAA,EACApQ,EAAAqQ,YAAA,YACArQ,EAAArF,QAAA,YACAqF,GAEA,cAAAA,EAAA3C,OACA/C,EAAA8V,UAAA,EACApQ,EAAAqQ,YAAA,OACArQ,EAAArF,QAAA,OACAqF,IAEAA,EAAAqQ,YAAA,OACArQ,EAAArF,QAAA,OACAqF,EAKA,OAFA1F,GAAA8V,UAAA,EACA9V,EAAA2W,OAAA5T,MAAAqZ,OAAA,WAEArG,YAAA,aACA1V,QAAA,aACA0C,MAAA,aACAuqB,cAAA,KAUAttB,EAAAsc,mBAAA,WACA,GAAA8F,IAAuBrc,EAAA4oB,IAAA1oB,EAAA0oB,KACvBtM,GAAwBtc,GAAA4oB,IAAA1oB,GAAA0oB,IAYxB,OAXA3uB,GAAAyC,KAAA5B,QAAA,SAAAwL,EAAA/B,GACA,GAAAgtB,GAAAC,CACAv3B,GAAAkL,WAAAZ,IAAAtK,EAAAkL,WAAAZ,GAAAkF,SACA4S,EAAAnc,EAAAqE,EAAA8X,EAAAnc,EAAAqE,EAAA8X,EAAAnc,EACAoc,EAAApc,EAAAqE,EAAA+X,EAAApc,EAAAqE,EAAA+X,EAAApc,EACAqxB,EAAAhgB,KAAAoD,IAAAta,MAAA,KAAAJ,EAAAkL,WAAAZ,IACAitB,EAAAjgB,KAAAoF,IAAAtc,MAAA,KAAAJ,EAAAkL,WAAAZ,IACA8X,EAAArc,EAAAwxB,EAAAnV,EAAArc,EAAAwxB,EAAAnV,EAAArc,EACAsc,EAAAtc,EAAAuxB,EAAAjV,EAAAtc,EAAAuxB,EAAAjV,EAAAtc,MAIAkR,IAAAmL,EAAAnc,EACA8Q,KAAAqL,EAAArc,EACA4W,OAAA0F,EAAApc,EACA2W,MAAAyF,EAAAtc,IAWA/F,EAAA2lB,kBAAA,WACA,MAAA3mB,QAAAmG,KAAAnF,EAAAyC,KAAA,KAAgD+0B,IAAA,KAAQtiB,IAAA,SAAA9R,EAAAwM,GACxD,GAAA7D,GAAA/L,EAAAgjB,qBAAA5f,GACA7E,GACAM,KAAAuE,EACAwK,MAAAua,MAAApkB,SAAAX,EAAA,KAAAA,EAAApD,EAAA2mB,eAAAvjB,GAAAlB,cACAkE,MAAApG,EAAA+C,MAAAuJ,YACAsD,QACA7D,OACAxJ,OAAAvC,EAAAuC,OAAAwJ,GAMA,OAJA3I,KAAApD,EAAAiI,WACA1J,EAAAgc,QAAA,GAEAhc,EAAAyB,EAAAiI,UAAAjI,EAAA+iB,kBAAA3f,GACA7E,KAWAyB,EAAAklB,eAAA,WACAllB,EAAAgiB,YASAhiB,EAAAid,WAAA,SAAAwa,EAAAjc,GACAxb,EAAAgd,gBAAAya,GAAAz3B,EAAAgd,eACA,IAAAjX,GAAAE,EAAArG,EAAAI,EAAA4b,WAIA,IAHAJ,IACAxb,EAAAkL,eAEAlL,EAAAgd,gBAAA/F,KAAA,GACAjX,EAAAgd,gBAAAL,OAAA3c,EAAAyC,KAAA+M,QACAxP,EAAAgd,gBAAAjG,MAAA,GACA/W,EAAAgd,gBAAAJ,MAAAhd,EAAA4P,OACA,SAAA1M,OAAA,4BAEA,KAAAiD,EAAA/F,EAAAgd,gBAAA/F,IAA8ClR,GAAA/F,EAAAgd,gBAAAL,OAAkC5W,GAAA,EAEhF,IADA/F,EAAAkL,WAAAnF,MACAE,EAAAjG,EAAAgd,gBAAAjG,KAAmD9Q,GAAAjG,EAAAgd,gBAAAJ,MAAiC3W,GAAA,GACpF,IAAAjG,EAAAkL,WAAAnF,GAAA5C,QAAA8C,IACAjG,EAAAkL,WAAAnF,GAAAxB,KAAA0B,EAIAjG,GAAAyM,cAAA,oBACA4Q,aAAArd,EAAAsd,kBACApS,WAAAlL,EAAAkL,WACA8R,gBAAAhd,EAAAgd,mBAWAhd,EAAAulB,wBAAA,SAAA1mB,GACA,GAAAH,IAAAiwB,GACA,sBAAA9vB,GACAmB,EAAAqG,IAAA6I,KAAAlP,EAAA+C,MAAA20B,kBACA13B,EAAAqG,IAAAgD,aAAArJ,EAAAyC,KAAA+M,QAAAxP,EAAAE,WAAA8R,WAAA,MAAA7C,YAAA/I,MACApG,EAAA+C,MAAA40B,gBAAA33B,EAAA+C,MAAA60B,0BACA53B,EAAA+C,MAAA80B,0BACA73B,EAAA+C,MAAA+0B,0BACA93B,EAAAE,WAAAwO,KAAA1O,EAAA+C,MAAAmF,eACAlI,EAAA+C,MAAA+E,oBAAA9H,EAAA+C,MAAAqF,qBAAA,KAEApI,EAAA4b,YAAA/a,QAAA,SAAAqhB,GACA,GAAAA,EAAArjB,SAAA,CACAmB,EAAAqG,IAAA6I,KAAAlP,EAAA+C,MAAAg1B,oBACA,IAAA7uB,GAAAlJ,EAAAqG,IAAAgD,YAAA6Y,EAAAtU,OAAAsU,EAAArjB,MAAAuH,MACApG,EAAA+C,MAAAi1B,uBACAh4B,EAAA+C,MAAAk1B,qBACAv5B,GAAAwK,EAAAxK,EAAAwK,EAAAxK,KAEAsB,EAAAyC,KAAA5B,QAAA,SAAAwL,GACArM,EAAAqG,IAAA6I,KAAAlP,EAAA+C,MAAAm1B,QACA,IAAAhvB,GAAAlJ,EAAAqG,IAAAgD,YAAAgD,EAAAxN,IAAAuH,MACApG,EAAA+C,MAAAo1B,iBACAn4B,EAAA+C,MAAAisB,gBAAAhvB,EAAA+C,MAAAq1B,qBACA15B,GAAAwK,EAAAxK,EAAAwK,EAAAxK,IAEAA,IAQAsB,EAAAuS,eAAA,WACA,MAAAvS,GAAAwR,mBAAAwD,OAAA,SAAAqjB,EAAA7tB,GACA,MAAA6tB,GAAA7tB,EAAApE,OACa,IAEbpG,EAAA8L,WAAA3H,OAAA,SAAAtB,GACA,WAAA9C,KAAA8C,EAAA6C,KAAAf,MAAA9B,EAAA6C,KAAAf,MAAA,IAEA3E,EAAA8L,WAAAiE,cAAA/P,EAAA8L,WAAA3H,OACAnE,EAAA8L,WAAAwsB,WAAAt4B,EAAA8L,WAAA3H,OACAnE,EAAA8L,WAAAjI,OAAA7D,EAAA8L,WAAA3H,OACAnE,EAAA8L,WAAAysB,IAAAv4B,EAAA8L,WAAA3H,OACAnE,EAAA8L,WAAAvG,KAAAvF,EAAA8L,WAAA3H,OACAnE,EAAAwd,QAAArZ,OAAA,SAAA8e,EAAAoT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAAxmB,EAAAnH,GACA,WAAA3I,KAAA8P,EAAAoT,IAAA,OAAApT,EAAAoT,GACA,MAEAljB,KAAA2I,EAAAua,IAAA,OAAAva,EAAAua,GACA,EAEAuV,EACA3oB,EAAAoT,GAAAwV,cACA5oB,EAAAoT,GAAAwV,cAAA/vB,EAAAua,IADuD,EAGvDva,EAAAua,GAAAwV,cACA/vB,EAAAua,GAAAwV,cAAA5oB,EAAAoT,IADmD,IAInDjjB,EAAAwd,QAAA3Z,OAAA,SAAAof,EAAAoT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAAxmB,EAAAnH,GACA,MAAA8vB,GACA3oB,EAAAoT,GAAAva,EAAAua,GAEAva,EAAAua,GAAApT,EAAAoT,KAGAjjB,EAAAwd,QAAAkb,KAAA,SAAAzV,EAAAoT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAAxmB,EAAAnH,GACA,MAAA8vB,GACA,GAAAG,MAAA9oB,EAAAoT,IAAA2V,UACA,GAAAD,MAAAjwB,EAAAua,IAAA2V,UAEA,GAAAD,MAAAjwB,EAAAua,IAAA2V,UACA,GAAAD,MAAA9oB,EAAAoT,IAAA2V,cAICx4B,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '-cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            style: function (fullStyleString) {\n                var s = {};\n                fullStyleString.split(';').forEach(function (sd) {\n                    if (!sd) { return; }\n                    var i = sd.indexOf(':'),\n                        key = sd.substring(0, i),\n                        val = sd.substring(i + 1),\n                        idef = getDefaultItem('styles', key);\n                    if (idef === undefined) {\n                        console.warn('Unrecognized style directive', key);\n                        return;\n                    }\n                    s[idef[0]] = typeMap[typeof idef[1]](val.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''));\n                });\n                return s;\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum) {\n                return parseInt(strNum, 10);\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['style', 'data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            s = intf.init();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, j, s, intf = this;\n            if (attrName === 'style') {\n                j = typeMap.style(newVal);\n                s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n                Object.keys(j).forEach(function (key) {\n                    s[key] = j[key];\n                });\n                intf.args.style = s;\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            // trim incoming values\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    } else {\n                        self.height = self.parentDOMNode.offsetHeight;\n                        self.width = self.parentDOMNode.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDataGrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDataGrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f0bd03201f0ad99c6d55","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '-cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            style: function (fullStyleString) {\n                var s = {};\n                fullStyleString.split(';').forEach(function (sd) {\n                    if (!sd) { return; }\n                    var i = sd.indexOf(':'),\n                        key = sd.substring(0, i),\n                        val = sd.substring(i + 1),\n                        idef = getDefaultItem('styles', key);\n                    if (idef === undefined) {\n                        console.warn('Unrecognized style directive', key);\n                        return;\n                    }\n                    s[idef[0]] = typeMap[typeof idef[1]](val.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''));\n                });\n                return s;\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum) {\n                return parseInt(strNum, 10);\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['style', 'data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            s = intf.init();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, j, s, intf = this;\n            if (attrName === 'style') {\n                j = typeMap.style(newVal);\n                s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n                Object.keys(j).forEach(function (key) {\n                    s[key] = j[key];\n                });\n                intf.args.style = s;\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            // trim incoming values\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    } else {\n                        self.height = self.parentDOMNode.offsetHeight;\n                        self.width = self.parentDOMNode.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDataGrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDataGrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}