{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 5754cd31a10fa11fb6f5","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","style","width","height","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","requestAnimationFrame","resize","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","canvas","querySelectorAll","el","getRatio","devicePixelRatio","ctx","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","ratio","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","reloadStoredValues","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","blur","TypeError","currentCursor","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAiRCE,MAjRDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function getRatio() {\n            return (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1);\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                ratio = getRatio(),\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            if (self.intf.tagName === 'SECTION') {\n                // required for non custom tag browsers\n                self.intf.style.height = '100%';\n                self.intf.style.width = '100%';\n            }\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5754cd31a10fa11fb6f5","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function getRatio() {\n            return (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1);\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                ratio = getRatio(),\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            if (self.intf.tagName === 'SECTION') {\n                // required for non custom tag browsers\n                self.intf.style.height = '100%';\n                self.intf.style.width = '100%';\n            }\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}