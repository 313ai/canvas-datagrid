{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 94c22255e48dbf5303c0","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","originText","stepLength","direction","substr","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","active","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","horizontalBoxVisible","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","verticalBoxVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","checkScrollBoxVisibility","dataWidth","overflowX","dataHeight","overflowY","setScrollBoxSize","setCanvasSize","dims","cellBorder","dim","appliedInlineStyles","parentNodeStyle","isComponet","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","sb","startingBounds","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","Number","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","substring","sel","cellData","colIndex","cName","getVisibleSchema","yi","getNextVisibleColumnIndex","visibleColumnIndex","getVisibleColumnIndexOf","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","headers","useHtml","hVal","join","addCellValue","trRow","textRow","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","sSorted","setData","touchMove","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchScrollTimeout","rw","t1","t2","changedTouches","getTouchPos","touchDeadZone","touchContextTimeout","touchZoomSensitivity","touchZoomMin","touchZoomMax","zoomAltered","selectionScrollZone","calculatePPS","touchScrollStart","stopAnimation","animationFrames","touchSelecting","startingCell","touchSelect","touchMoving","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchingCell","editCell","touchstart","disposeContextMenu","touchStartEvent","touchStart1","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","handleType","bounds","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","message","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","getVisibleCellByIndex","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","de","ri","st","dragObject","childGrid","trArgs","treeGridHeight","sortFunction","dontSetStorageData","sort","xi","maxRowLength","minXi","lastSourceIndex","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAkTCE,MAlTQD,EAAA,WACT,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0D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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 94c22255e48dbf5303c0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}