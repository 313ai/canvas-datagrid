{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 9d545ec73eca41b7c0ba","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","rowIndex","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","hidden","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","getSchema","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","debug","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","pop","perf","reduce","toFixed","perfDelta","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","useHtml","hVal","join","addCellValue","trRow","textRow","tableRows","textRows","headers","sData","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","log","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UA8RCE,MA9RDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4B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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = self.getSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight + columnHeaderCellBorder;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder - (self.scrollBox.verticalBarVisible ? sbw : 0);\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight + columnHeaderCellBorder) / dataHeight;\n            self.scrollBox.scrollBoxHeight = (self.scrollBox.height - columnHeaderCellHeight + columnHeaderCellBorder)\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index +0 was checked prior to loop start in \"go too far\"\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    console.log('nx', nx, 'ny', ny);\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            return self.scrollCache.y[rowIndex] - (self.attributes.showColumnHeaders ? self.getColumnHeaderCellHeight() : 0);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9d545ec73eca41b7c0ba","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = self.getSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight + columnHeaderCellBorder;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder - (self.scrollBox.verticalBarVisible ? sbw : 0);\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight + columnHeaderCellBorder) / dataHeight;\n            self.scrollBox.scrollBoxHeight = (self.scrollBox.height - columnHeaderCellHeight + columnHeaderCellBorder)\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index +0 was checked prior to loop start in \"go too far\"\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    console.log('nx', nx, 'ny', ny);\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            return self.scrollCache.y[rowIndex] - (self.attributes.showColumnHeaders ? self.getColumnHeaderCellHeight() : 0);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}