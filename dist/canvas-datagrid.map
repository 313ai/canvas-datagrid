{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 2ec09bb664e74f551097","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","keys","arg","resize","key","set","value","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","mode","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","columnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","indexOf","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","ev","row","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","requestAnimationFrame","borderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","backgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","debug","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","canvas","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","getDomRoot","shadowRoot","host","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","editCell","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","shadowRootParentElement","attachShadow","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,8BACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                function getDomRoot() { return self.shadowRoot ? self.shadowRoot.host : self.parentNode; }\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        if (key === 'width') {\n                            return getDomRoot().style.width;\n                        }\n                        if (key === 'height') {\n                            return getDomRoot().style.height;\n                        }\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        if (key === 'width') {\n                            getDomRoot().style.width = value;\n                            self.resize();\n                        } else if (key === 'height') {\n                            getDomRoot().style.height = value;\n                            self.resize();\n                        } else {\n                            self.parseStyleValue(value);\n                            self.style[key] = value;\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - borderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0',\n                    width: '100%',\n                    height: '100%'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2ec09bb664e74f551097","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                function getDomRoot() { return self.shadowRoot ? self.shadowRoot.host : self.parentNode; }\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        if (key === 'width') {\n                            return getDomRoot().style.width;\n                        }\n                        if (key === 'height') {\n                            return getDomRoot().style.height;\n                        }\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        if (key === 'width') {\n                            getDomRoot().style.width = value;\n                            self.resize();\n                        } else if (key === 'height') {\n                            getDomRoot().style.height = value;\n                            self.resize();\n                        } else {\n                            self.parseStyleValue(value);\n                            self.style[key] = value;\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - borderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0',\n                    width: '100%',\n                    height: '100%'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}