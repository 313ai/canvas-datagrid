{"version":3,"sources":["webpack://canvasDatagrid/webpack/universalModuleDefinition","webpack://canvasDatagrid/webpack/bootstrap","webpack://canvasDatagrid/./lib/defaults.js","webpack://canvasDatagrid/./lib/publicMethods.js","webpack://canvasDatagrid/./lib/dom.js","webpack://canvasDatagrid/./lib/contextMenu.js","webpack://canvasDatagrid/./lib/intf.js","webpack://canvasDatagrid/./lib/touch.js","webpack://canvasDatagrid/./lib/events.js","webpack://canvasDatagrid/./lib/draw.js","webpack://canvasDatagrid/./lib/component.js","webpack://canvasDatagrid/./lib/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","integerToAlpha","ordA","charCodeAt","len","String","fromCharCode","Math","floor","insertColumn","index","getSchema","length","Error","validateColumn","splice","data","forEach","row","applyDefaultValue","intf","schema","deleteColumn","addColumn","push","deleteRow","originalData","setFilter","resize","insertRow","addRow","setRowHeight","rowIndex","height","sizes","rows","draw","setColumnWidth","colIndex","width","columns","resetColumnWidths","resetRowHeights","column","applyFilter","refreshFromOrigialData","keys","columnFilters","filter","header","getHeaderByName","currentFilter","type","findRowScrollTop","scrollCache","y","RangeError","findColumnScrollLeft","columnIndex","max","x","getColummnWidth","orders","gotoCell","offsetX","offsetY","cell","targetX","targetY","sbw","scrollBox","verticalBarVisible","style","scrollBarWidth","sbh","horizontalBarVisible","scrollTo","requestAnimationFrame","getVisibleCellByIndex","scrollLeft","scrollTop","gotoRow","scrollIntoView","visibleCells","setActiveCell","activeCell","selectNone","dontDraw","selections","dispatchEvent","selectedData","getSelectedData","selectionBounds","selectAll","selectArea","top","left","right","getVisibleSchema","bottom","isColumnSelected","colIsSelected","indexOf","forEachSelectedCell","fn","expandToRow","col","selectColumn","ctrl","shift","supressEvent","e","addCol","min","scrollIndexTop","removeCol","getSelectionBounds","selectRow","st","en","ri","hidden","dragAddToSelection","dragObject","collapseTree","childGrid","childGrids","openChildren","blur","dispose","trees","cellHeight","expandTree","treeGrid","trArgs","args","treeGridAttributes","columnHeaderCellHeight","getColumnHeaderCellHeight","rowHeaderCellWidth","cornerCell","h","treeGridHeight","debug","saveAppearance","parentNode","parentGrid","nodeType","offsetHeight","offsetWidth","offsetLeft","offsetTop","offsetParent","createGrid","visible","toggleTree","fitColumnToValues","internal","canvas","findColumnMaxTextLength","minColumnWidth","isCellVisible","order","columnName","direction","sortFunction","dontSetStorageData","f","orderBy","sorters","console","warn","sort","string","setStorageData","isInGrid","moveSelection","sel","moveTo","xi","yi","cidx","isColumnVisible","isRowVisible","getCellAt","useTouchScrollZones","getBorder","entitiy","borderResizeZone","border","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","cursorGrab","yBorderBehavior","hasFocus","dragContext","context","test","cellBorderWidth","isScrollBar","isVerticalScrollBar","box","v","scrollBoxHeight","cursor","isHorizontalScrollBar","scrollBoxWidth","selectionBorder","allowColumnResize","allowColumnResizeFromCell","isNormal","allowRowHeaderResize","isRowHeader","isCorner","isColumnHeader","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","allowRowReordering","isGrid","isBackground","low","Infinity","high","maxCol","minCol","getSchemaFromData"," ","map","getBestGuessDataType","title","isNaN","parseInt","toUpperCase","storedSettings","visibility","clearChangeLog","changes","bounds","ev","ctx","font","rowHeaderCellFont","measureText","showNewRow","toString","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","tree","treeArrowWidth","treeArrowMarginLeft","treeArrowMarginRight","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellPaddingLeft","cellAutoResizePadding","getHeaderWidth","reduce","total","cellWidth","getRowHeight","scale","formatters","rowHeaderCell","headerCell","number","int","html","asc","a","b","localeCompare","date","Date","getTime","getClippingRect","ele","boundingRect","position","eleRect","scrollOffset","clipRect","w","parentRect","getRowHeaderCellWidth","clipElement","clip","scrollingElement","document","nodeName","resizeEditInput","input","editCell","pos","getBoundingClientRect","bm","gridBorderCollapse","borderWidth","mobile","mobileEditInputHeight","canvasOffsetLeft","canvasOffsetTop","ignoreScrollOffset","getLayerPos","rect","clientX","clientY","isChildGrid","endEdit","abort","newValue","oldValue","defaultValue","aborted","createNewRowData","parentDOMNode","removeChild","focus","beginEditAt","editable","adjacentCells","enumItems","enu","option","valueInEnum","getAdjacentCells","createElement","multiLine","Array","isArray","val","innerHTML","appendChild","addEventListener","createInlineStyle","zIndex","editCellZIndex","fontSize","editCellFontSize","stopPropagation","nx","ny","keyCode","shiftKey","preventDefault","last","first","el","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","color","contextFilterInputColor","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","minWidth","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","appendTo","setDom","controlInput","eventParent","onblur","parentIsCanvas","tagName","getContext","textBaseline","parentNodeStyle","setAttribute","target","touchstart","mouseup","mousedown","dblclick","click","mousemove","scrollWheel","contextmenuEvent","copy","cut","paste","keypress","keyup","keydown","zIndexTop","hoverScrollTimeout","autoCompleteContext","applyContextItemStyle","contextItemContainer","createContextMenu","items","parentContextMenu","container","upArrow","downArrow","children","selectedIndex","checkArrowVisibility","scrollHeight","startHoverScroll","contextHoverScrollAmount","setTimeout","contextHoverScrollRateMs","endHoverScroll","clearTimeout","loc","contextMenuZIndex","item","childMenuArrow","removeChildContext","relatedTarget","contextMenu","contains","removeEventListener","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","addItem","contextMenuArrowColor","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","deltaY","deltaX","contextMenuArrowUpHTML","contextMenuArrowDownHTML","body","contextMenuWindowMargin","innerWidth","init","clickIndex","idx","Event","set","isFinite","createFilterContextMenuItems","autoCompleteItems","iRect","filterContainer","filterLabel","filterAutoCompleteButton","filterInput","checkRegExpErrorState","invalidFilterRegEx","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","createAutoCompleteContext","count","maxAutoCompleteItems","disposeAutocomplete","fillAutoComplete","onclick","disposeContextMenu","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","overridePos","contextPosition","NativeEvent","isNormalCell","isColumnHeaderCellCap","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","createRowOrders","createColumnOrders","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","addDefaultContextMenuItem","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","createDiposeEvent","ctor","fillArray","appliedInlineStyles","cellGridAttributes","visibleRowHeights","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","orderDirection","filters","frozenRow","frozenColumn","ellipsisCache","visibleRows","hovers","parsers","schemaHashes","events","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","scrollModes","componentL1Events","eventNames","mouse","orderedIndex","showColumnHeaders","showRowHeaders","localStorage","setItem","JSON","stringify","tempSchema","newRow","getSchemaNameHash","drawChildGrids","gridKey","resizeChildGrids","autoScrollZone","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","scrollRepeatRate","setDefaults","obj1","obj2","def","setAttributes","setStyle","autosize","colName","contextmenu","observer","disconnect","tryLoadStoredSettings","reloadStoredValues","getDomRoot","shadowRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","split","initProp","propName","getStyleProperty","styleKeys","setStyleProperty","supressDrawAndEvent","isDim","dehyphenateProperty","getItem","parse","initialized","publicStyleKeyIntf","initScrollBox","ie","navigator","userAgent","edge","webKit","moz","cursorGrabing","cursorGrabbing","pointerLockPosition","assertPxColor","clearPxColorAssertions","hyphenateProperty","addStyleKeyIfNoneExists","DOMStyles","getComputedStyle","concat","valueObject","filterFor","filterRegExp","pattern","exec","flags","substring","flagLength","RegExp","toLocaleUpperCase","applyComponentStyle","innerText","textContent","TypeError","gridId","currentCursor","find","isComponent","scrollWidth","dragMode","eventName","scrollIndexRight","scrollIndexBottom","scrollPixelRight","scrollPixelBottom","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","sHeight","sWidth","setScrollTop","preventScrollEvent","scroll","setScrollLeft","toFixed","widthBoxRatio","heightBoxRatio","supressDrawEvent","touchScrollTimeout","scrollAnimation","touchDelta","touchAnimateTo","animationFrames","getTouchPos","touchIndex","touches","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","xPPST","touchSigmaTimed","yPPST","performance","now","calculatePPS","xPPS","touchSigma","yPPS","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","abs","touchDeadZone","touchingCell","changedTouches","touchStart","startingCell","touchContextTimeout","touchStartEvent","zoomAltered","touchLength","touchStart1","touchScrollStart","touchContextMenuTimeMs","setInterval","isHeader","columnHeaderClickBehavior","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","selectionMode","ch","rw","rScrollZone","lScrollZone","bScrollZone","tScrollZone","t1","t2","touchPosition","touchPosition1","zoomDeltaStart","startScale","scaleDelta","touchZoomSensitivity","touchZoomMin","touchZoomMax","touchDuration","touchScroll","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","wheeling","unshift","sfn","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderWidth","ratio","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","dataHeight","dataWidth","accumulator","va","setCanvasSize","setScrollBoxSize","scrollBarBoxMinSize","scrollBarBoxWidth","entities","horizontalBar","horizontalBox","verticalBar","verticalBox","corner","bar","page","pageUpDownOverlap","dim","dragBounds","sBounds","delta","ctrlKey","metaKey","persistantSelectionMode","previousCell","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","dragItem","selecting","reorderObject","dragStart","dragStartObject","ignoreNextClick","grid","checkSelectionChange","treeArrowClickRadius","treeArrowHeight","treeArrowMarginTop","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minRowHeight","resizeScrollZone","sortColumnIndex","rowOpen","globalRowResize","stopDragResize","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","source","reorderDeadZone","reorderTarget","dragOffset","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","moveOffset","stopDragMove","movingSelection","freezeMove","freezeMarkerPosition","stopFreezeMove","startFreezeMove","lastMouseDownTarget","button","move","freeze","selected","requestPointerLock","dragging","cols","selectionFollowsActiveCell","deltaMode","touchHaltAnimation","pasteItem","clipData","mimeType","rowData","importingRow","existingRow","colKey","cellData","cName","normalizeRowData","clipboardData","dti","getAsString","tableRows","textRows","sData","trRow","textRow","fCopyCell","addCellValue","join","addHeaders","setData","htmlSafe","useHtml","hVal","perfCounters","cachedImagesDrawn","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","step","drawHtml","img","formattedValue","cacheKey","htmlImageCache","complete","drawImage","Image","onload","loaded","drawOnAllImagesLoaded","src","btoa","radiusRect","radius","beginPath","lineTo","quadraticCurveTo","fillRect","strokeRect","fillText","text","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","fillHandle","selectionHandleType","arc","PI","fill","fillCircle","strokeHandle","stroke","strokeCircle","addBorderLine","checkScrollHeight","cx","cy","rowHeight","rd","aCell","bc","selectionBorders","moveBorders","selectionHandles","rowHeaders","u","save","fillStyle","gridBackgroundColor","ln","drawRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","drawFrozenRows","g","snapToRow","drawCell","restore","drawRows","cl","lineWidth","activeCellOverlayBorderWidth","strokeStyle","activeCellOverlayBorderColor","drawActiveCell","columnHeaderCell","nonFrozenHeaderWidth","drawHeaderColumnRange","start","end","rArgs","rhIndex","rowOrderIndex","drawRowHeader","isColumnHeaderCell","endCap","drawHeaders","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","drawFrozenMarkers","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawSelectionBorders","allowMovingSelection","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","hw","selectionHandleSize","tr","br","tl","bl","addselectionHandle","az","touchSelectHandleZone","ax","ay","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","sortRowIndex","drawReorderMarkers","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","scrollBarBorderColor","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","drawScrollBars","gridBorderWidth","gridBorderColor","showPerformance","pop","debugFont","perf","perfDelta","frozenColumnsWidth","getFrozenColumnsWidth","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","touchPPST","size","touch","debugBackgroundColor","debugColor","drawDebug","pw","px","py","ph","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","dpl","perfArr","arrIndex","useAbs","drawPerfLine","debugPerfChartTextColor","drawPerfLines","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","headerIndex","columnOrderIndex","cellStyle","hovered","active","rawValue","activeHeader","orderByArrowSize","treeArrowSize","fontHeight","horizontalAlignment","verticalAlignment","paddingLeft","paddingTop","paddingRight","paddingBottom","cellWhiteSpace","cellLineHeight","lineSpacing","cellLineSpacing","calculatedLineHeight","paddedWidth","paddedHeight","userHeight","userWidth","cellHeightWithChildGrid","cellWidthWithChildGrid","mt","mr","ml","aw","ah","treeArrowColor","treeArrowBorderColor","drawTreeArrow","showRowNumbers","component","cellGridHeight","columnHeaderOrderByArrowMarginTop","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginRight","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","drawOrderByArrow","orderByArrowWidth","filterTextPrefix","splitChar","lines","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","textHeight","wrap","et","ellipsisText","line","cHeight","measure","wrapText","vPos","hPos","idx_ord","drawText","selectionBorderTop","selectionBorderRight","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createHandlesOverlayArray","treeHeight","rowSansTreeHeight","__WEBPACK_AMD_DEFINE_ARRAY__","typeMap","getDefaultItem","base","toLowerCase","nextLetterCap","char","cust","supressChangeAndDrawEvents","cStyle","defs","computedStyle","getPropertyValue","strData","strSchema","strNum","boolean","strBool","str","getObservableAttributes","attrs","attr","disconnectedCallback","this","connected","connectedCallback","observe","adoptedCallback","attributeChangedCallback","attrName","oldVal","newVal","tfn","eval","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","addedNodes","characterData","childList","subtree","querySelectorAll","slice","arguments","Grid","createShadowRoot","attachShadow","HTMLElement","customElements","observedAttributes","canvasDatagrid","require","tKeys","argKey","tKey","sKey"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,OAkTCC,KAhTDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAA9C,SAAAC,EAAAD,QAAAwC,oBClTD,IAAAA,OAgqCCC,KA9pCDD,EAAA,WACA,aACA,gBAAAE,GAQAA,EAAAK,eAAA,SAAAd,GAKA,IAJA,IAAAe,EAAA,IAAAC,WAAA,GAEAC,EADA,IAAAD,WAAA,GACAD,EAAA,EACAT,EAAA,GACAN,GAAA,GACAM,EAAAY,OAAAC,aAAAnB,EAAAiB,EAAAF,GAAAT,EACAN,EAAAoB,KAAAC,MAAArB,EAAAiB,GAAA,EAEA,OAAAX,GAWAG,EAAAa,aAAA,SAAA1C,EAAA2C,GACA,IAAAjB,EAAAG,EAAAe,YACA,GAAAlB,EAAAmB,OAAAF,EACA,UAAAG,MAAA,6CAEAjB,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAAsB,OAAAL,EAAA,EAAA3C,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,EAAAwB,KAAAC,OAAA5B,GAUA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            self.parentDOMNode.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        self.canvas.style[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n"],"sourceRoot":""}