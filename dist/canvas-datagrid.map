{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap c6c3a0a3167e6147c4a5","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","keys","arg","resize","key","set","value","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","yPPS","xPPS","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","touchDelta","touchAnimateTo","touchSigma","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","body","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","cHeight","cWidth","fn","events","sfn","idx","splice","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","selectAll","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","substring","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","isArray","eventName","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","color","contextMenuArrowColor","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","isColumnVisible","isRowVisible","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAwOCE,MAxODD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,kBACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,OAAQD,QAASM,qBG/TjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oB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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.touchPPS = '{\"top\": ' + self.yPPS + ', \"left\": ' + self.xPPS + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t)) * 1000;\n            self.yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t)) * 1000;\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now()\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 1);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = self.xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cHeight = self.height - rowHeaderCellHeight - self.style.scrollBarWidth,\n                cWidth = self.width - columnHeaderCellWidth - self.style.scrollBarWidth;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = (self.scrollBox.scrollHeight) * ((d.y - rowHeaderCellHeight) / cHeight);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = (self.scrollBox.scrollWidth) * ((d.x - columnHeaderCellWidth) / cWidth);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c6c3a0a3167e6147c4a5","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.touchPPS = '{\"top\": ' + self.yPPS + ', \"left\": ' + self.xPPS + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t)) * 1000;\n            self.yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t)) * 1000;\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now()\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 1);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = self.xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cHeight = self.height - rowHeaderCellHeight - self.style.scrollBarWidth,\n                cWidth = self.width - columnHeaderCellWidth - self.style.scrollBarWidth;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = (self.scrollBox.scrollHeight) * ((d.y - rowHeaderCellHeight) / cHeight);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = (self.scrollBox.scrollWidth) * ((d.x - columnHeaderCellWidth) / cWidth);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}