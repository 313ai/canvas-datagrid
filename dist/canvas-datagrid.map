{"version":3,"sources":["webpack://canvasDatagrid/webpack/universalModuleDefinition","webpack://canvasDatagrid/webpack/bootstrap","webpack://canvasDatagrid/./lib/defaults.js","webpack://canvasDatagrid/./lib/publicMethods.js","webpack://canvasDatagrid/./lib/dom.js","webpack://canvasDatagrid/./lib/contextMenu.js","webpack://canvasDatagrid/./lib/intf.js","webpack://canvasDatagrid/./lib/touch.js","webpack://canvasDatagrid/./lib/events.js","webpack://canvasDatagrid/./lib/draw.js","webpack://canvasDatagrid/./lib/component.js","webpack://canvasDatagrid/./lib/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","integerToAlpha","ordA","charCodeAt","len","String","fromCharCode","Math","floor","insertColumn","index","getSchema","length","Error","validateColumn","splice","data","forEach","row","applyDefaultValue","intf","schema","deleteColumn","addColumn","push","deleteRow","originalData","setFilter","resize","insertRow","addRow","setRowHeight","rowIndex","height","sizes","rows","draw","setColumnWidth","colIndex","width","columns","resetColumnWidths","resetRowHeights","column","applyFilter","refreshFromOrigialData","keys","columnFilters","filter","header","getHeaderByName","currentFilter","type","findRowScrollTop","scrollCache","y","RangeError","findColumnScrollLeft","columnIndex","max","x","getColummnWidth","orders","gotoCell","offsetX","offsetY","cell","targetX","targetY","sbw","scrollBox","verticalBarVisible","style","scrollBarWidth","sbh","horizontalBarVisible","scrollTo","requestAnimationFrame","getVisibleCellByIndex","scrollLeft","scrollTop","gotoRow","scrollIntoView","visibleCells","setActiveCell","activeCell","selectNone","dontDraw","selections","dispatchEvent","selectedData","getSelectedData","selectionBounds","selectAll","selectArea","top","left","right","getVisibleSchema","bottom","isColumnSelected","colIsSelected","indexOf","forEachSelectedCell","fn","expandToRow","col","selectColumn","ctrl","shift","supressEvent","e","addCol","min","scrollIndexTop","removeCol","getSelectionBounds","selectRow","st","en","ri","hidden","dragAddToSelection","dragObject","collapseTree","childGrid","childGrids","openChildren","blur","dispose","trees","cellHeight","expandTree","treeGrid","trArgs","args","treeGridAttributes","columnHeaderCellHeight","getColumnHeaderCellHeight","rowHeaderCellWidth","cornerCell","h","treeGridHeight","debug","saveAppearance","parentNode","parentGrid","nodeType","offsetHeight","offsetWidth","offsetLeft","offsetTop","offsetParent","createGrid","visible","toggleTree","fitColumnToValues","internal","canvas","findColumnMaxTextLength","minColumnWidth","isCellVisible","order","columnName","direction","sortFunction","dontSetStorageData","f","orderBy","sorters","console","warn","sort","string","setStorageData","isInGrid","moveSelection","sel","moveTo","xi","yi","cidx","isColumnVisible","isRowVisible","getCellAt","useTouchScrollZones","getBorder","entitiy","borderResizeZone","border","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","cursorGrab","yBorderBehavior","hasFocus","dragContext","context","test","cellBorderWidth","isScrollBar","isVerticalScrollBar","box","v","scrollBoxHeight","cursor","isHorizontalScrollBar","scrollBoxWidth","selectionBorder","allowColumnResize","allowColumnResizeFromCell","isNormal","allowRowHeaderResize","isRowHeader","isCorner","isColumnHeader","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","allowRowReordering","isGrid","isBackground","low","Infinity","high","maxCol","minCol","getSchemaFromData"," ","map","getBestGuessDataType","title","isNaN","parseInt","toUpperCase","storedSettings","visibility","clearChangeLog","changes","bounds","ev","ctx","font","rowHeaderCellFont","measureText","showNewRow","toString","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","tree","treeArrowWidth","treeArrowMarginLeft","treeArrowMarginRight","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellPaddingLeft","cellAutoResizePadding","getHeaderWidth","reduce","total","cellWidth","getRowHeight","scale","formatters","rowHeaderCell","headerCell","number","int","html","asc","a","b","localeCompare","date","Date","getTime","getClippingRect","ele","boundingRect","position","eleRect","scrollOffset","clipRect","w","parentRect","getRowHeaderCellWidth","clipElement","clip","scrollingElement","document","nodeName","resizeEditInput","input","editCell","pos","getBoundingClientRect","bm","gridBorderCollapse","borderWidth","mobile","mobileEditInputHeight","canvasOffsetLeft","canvasOffsetTop","ignoreScrollOffset","getLayerPos","rect","clientX","clientY","isChildGrid","endEdit","abort","newValue","oldValue","defaultValue","aborted","createNewRowData","body","removeChild","focus","beginEditAt","editable","adjacentCells","enumItems","enu","option","valueInEnum","getAdjacentCells","createElement","multiLine","Array","isArray","val","innerHTML","appendChild","addEventListener","createInlineStyle","zIndex","editCellZIndex","fontSize","editCellFontSize","stopPropagation","nx","ny","keyCode","shiftKey","preventDefault","last","first","el","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","color","contextFilterInputColor","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","minWidth","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","appendTo","setDom","controlInput","eventParent","onblur","parentDOMNode","parentIsCanvas","tagName","getContext","preserveDrawingBuffer","premultipliedAlpha","antialias","alpha","textBaseline","parentNodeStyle","setAttribute","target","touchstart","mouseup","mousedown","dblclick","click","mousemove","scrollWheel","contextmenuEvent","copy","cut","paste","keypress","keyup","keydown","zIndexTop","hoverScrollTimeout","autoCompleteContext","applyContextItemStyle","contextItemContainer","createContextMenu","items","parentContextMenu","container","upArrow","downArrow","children","selectedIndex","checkArrowVisibility","scrollHeight","startHoverScroll","contextHoverScrollAmount","setTimeout","contextHoverScrollRateMs","endHoverScroll","clearTimeout","loc","contextMenuZIndex","item","childMenuArrow","removeChildContext","relatedTarget","contextMenu","contains","removeEventListener","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","addItem","contextMenuArrowColor","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","deltaY","deltaX","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","init","clickIndex","idx","Event","set","isFinite","createFilterContextMenuItems","autoCompleteItems","iRect","filterContainer","filterLabel","filterAutoCompleteButton","filterInput","checkRegExpErrorState","invalidFilterRegEx","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","createAutoCompleteContext","count","maxAutoCompleteItems","disposeAutocomplete","fillAutoComplete","onclick","disposeContextMenu","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","overridePos","contextPosition","NativeEvent","isNormalCell","isColumnHeaderCellCap","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","createRowOrders","createColumnOrders","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","addDefaultContextMenuItem","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","createDiposeEvent","ctor","fillArray","cellGridAttributes","visibleRowHeights","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","orderDirection","filters","frozenRow","frozenColumn","ellipsisCache","visibleRows","hovers","parsers","schemaHashes","events","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","scrollModes","componentL1Events","eventNames","mouse","orderedIndex","showColumnHeaders","showRowHeaders","localStorage","setItem","JSON","stringify","tempSchema","newRow","getSchemaNameHash","drawChildGrids","gridKey","resizeChildGrids","autoScrollZone","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","scrollRepeatRate","setDefaults","obj1","obj2","def","setAttributes","setStyle","autosize","colName","contextmenu","observer","disconnect","tryLoadStoredSettings","reloadStoredValues","getDomRoot","shadowRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","split","initProp","propName","getStyleProperty","styleKeys","setStyleProperty","supressDrawAndEvent","isDim","dehyphenateProperty","getItem","parse","initialized","publicStyleKeyIntf","initScrollBox","ie","navigator","userAgent","edge","webKit","moz","cursorGrabing","cursorGrabbing","pointerLockPosition","assertPxColor","clearPxColorAssertions","hyphenateProperty","addStyleKeyIfNoneExists","DOMStyles","getComputedStyle","concat","valueObject","filterFor","filterRegExp","pattern","exec","flags","substring","flagLength","RegExp","toLocaleUpperCase","applyComponentStyle","innerText","textContent","TypeError","gridId","currentCursor","find","isComponent","scrollWidth","dragMode","eventName","scrollIndexRight","scrollIndexBottom","scrollPixelRight","scrollPixelBottom","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","sHeight","sWidth","setScrollTop","preventScrollEvent","scroll","setScrollLeft","toFixed","widthBoxRatio","heightBoxRatio","supressDrawEvent","touchScrollTimeout","scrollAnimation","touchDelta","touchAnimateTo","animationFrames","getTouchPos","touchIndex","touches","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","xPPST","touchSigmaTimed","yPPST","performance","now","calculatePPS","xPPS","touchSigma","yPPS","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","abs","touchDeadZone","touchingCell","changedTouches","touchStart","startingCell","touchContextTimeout","touchStartEvent","zoomAltered","touchLength","touchStart1","touchScrollStart","touchContextMenuTimeMs","setInterval","isHeader","columnHeaderClickBehavior","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","selectionMode","ch","rw","rScrollZone","lScrollZone","bScrollZone","tScrollZone","t1","t2","touchPosition","touchPosition1","zoomDeltaStart","startScale","scaleDelta","touchZoomSensitivity","touchZoomMin","touchZoomMax","touchDuration","touchScroll","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","wheeling","unshift","sfn","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderWidth","ratio","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","dataHeight","dataWidth","accumulator","va","setCanvasSize","setScrollBoxSize","scrollBarBoxMinSize","scrollBarBoxWidth","entities","horizontalBar","horizontalBox","verticalBar","verticalBox","corner","bar","page","pageUpDownOverlap","dim","dragBounds","sBounds","delta","ctrlKey","metaKey","persistantSelectionMode","previousCell","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","dragItem","selecting","reorderObject","dragStart","dragStartObject","ignoreNextClick","grid","checkSelectionChange","treeArrowClickRadius","treeArrowHeight","treeArrowMarginTop","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minRowHeight","resizeScrollZone","sortColumnIndex","rowOpen","globalRowResize","stopDragResize","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","source","reorderDeadZone","reorderTarget","dragOffset","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","moveOffset","stopDragMove","movingSelection","freezeMove","freezeMarkerPosition","stopFreezeMove","startFreezeMove","lastMouseDownTarget","button","move","freeze","selected","requestPointerLock","dragging","cols","selectionFollowsActiveCell","deltaMode","touchHaltAnimation","pasteItem","clipData","mimeType","rowData","importingRow","existingRow","colKey","cellData","cName","normalizeRowData","clipboardData","dti","getAsString","tableRows","textRows","sData","trRow","textRow","fCopyCell","addCellValue","join","addHeaders","setData","htmlSafe","useHtml","hVal","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","step","drawHtml","img","formattedValue","htmlImageCache","complete","drawImage","Image","onload","loaded","drawOnAllImagesLoaded","src","btoa","radiusRect","radius","beginPath","lineTo","quadraticCurveTo","fillRect","strokeRect","fillText","text","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","fillHandle","selectionHandleType","arc","PI","fill","fillCircle","strokeHandle","stroke","strokeCircle","addBorderLine","checkScrollHeight","cx","cy","rowHeight","rd","aCell","bc","selectionBorders","moveBorders","selectionHandles","rowHeaders","u","save","fillStyle","gridBackgroundColor","ln","drawRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","drawFrozenRows","g","snapToRow","drawCell","restore","drawRows","cl","lineWidth","activeCellOverlayBorderWidth","strokeStyle","activeCellOverlayBorderColor","drawActiveCell","columnHeaderCell","nonFrozenHeaderWidth","drawHeaderColumnRange","start","end","rArgs","rhIndex","rowOrderIndex","drawRowHeader","isColumnHeaderCell","endCap","drawHeaders","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","drawFrozenMarkers","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawSelectionBorders","allowMovingSelection","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","hw","selectionHandleSize","tr","br","tl","bl","addselectionHandle","az","touchSelectHandleZone","ax","ay","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","sortRowIndex","drawReorderMarkers","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","scrollBarBorderColor","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","drawScrollBars","gridBorderWidth","gridBorderColor","showPerformance","pop","debugFont","perf","perfDelta","frozenColumnsWidth","getFrozenColumnsWidth","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","touchPPST","size","touch","debugBackgroundColor","debugColor","drawDebug","pw","px","py","ph","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","dpl","perfArr","arrIndex","useAbs","drawPerfLine","debugPerfChartTextColor","drawPerfLines","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","headerIndex","columnOrderIndex","cellStyle","hovered","active","rawValue","activeHeader","orderByArrowSize","treeArrowSize","fontHeight","horizontalAlignment","verticalAlignment","paddingLeft","paddingTop","paddingRight","paddingBottom","cellWhiteSpace","cellLineHeight","lineSpacing","cellLineSpacing","calculatedLineHeight","paddedWidth","paddedHeight","userHeight","userWidth","cellHeightWithChildGrid","cellWidthWithChildGrid","mt","mr","ml","aw","ah","treeArrowColor","treeArrowBorderColor","drawTreeArrow","showRowNumbers","component","cellGridHeight","columnHeaderOrderByArrowMarginTop","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginRight","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","drawOrderByArrow","orderByArrowWidth","filterTextPrefix","splitChar","lines","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","textHeight","wrap","et","ellipsisText","line","cHeight","measure","wrapText","vPos","hPos","idx_ord","drawText","selectionBorderTop","selectionBorderRight","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createHandlesOverlayArray","treeHeight","rowSansTreeHeight","__WEBPACK_AMD_DEFINE_ARRAY__","typeMap","getDefaultItem","base","toLowerCase","nextLetterCap","char","cust","supressChangeAndDrawEvents","cStyle","defs","computedStyle","getPropertyValue","strData","strSchema","strNum","boolean","strBool","str","getObservableAttributes","attrs","attr","disconnectedCallback","this","connected","connectedCallback","observe","adoptedCallback","attributeChangedCallback","attrName","oldVal","newVal","tfn","eval","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","addedNodes","characterData","childList","subtree","querySelectorAll","slice","arguments","Grid","createShadowRoot","attachShadow","HTMLElement","customElements","observedAttributes","canvasDatagrid","require","tKeys","argKey","tKey","sKey"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,OAsTCC,KApTDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,aACA,iBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,0BACA,6BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCtTD,IAAAA,OAgqCCC,KA9pCDD,EAAA,WACA,aACA,gBAAAE,GAQAA,EAAAK,eAAA,SAAAd,GAKA,IAJA,IAAAe,EAAA,IAAAC,WAAA,GAEAC,EADA,IAAAD,WAAA,GACAD,EAAA,EACAT,EAAA,GACAN,GAAA,GACAM,EAAAY,OAAAC,aAAAnB,EAAAiB,EAAAF,GAAAT,EACAN,EAAAoB,KAAAC,MAAArB,EAAAiB,GAAA,EAEA,OAAAX,GAWAG,EAAAa,aAAA,SAAA1C,EAAA2C,GACA,IAAAjB,EAAAG,EAAAe,YACA,GAAAlB,EAAAmB,OAAAF,EACA,UAAAG,MAAA,6CAEAjB,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAAsB,OAAAL,EAAA,EAAA3C,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,E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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['alpha', false],\n                ['antialias', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['premultipliedAlpha', false],\n                ['preserveDrawingBuffer', true],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d', {\n                    preserveDrawingBuffer: self.attributes.preserveDrawingBuffer,\n                    premultipliedAlpha: self.attributes.premultipliedAlpha,\n                    antialias: self.attributes.antialias,\n                    alpha: self.attributes.alpha\n                });\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        /**\n         * Gets or sets the order of the rows.  This allows you to modify the appearance of the data without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the rows, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of rows.\n         */\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        /**\n         * Gets or sets the order of the columns.  This allows you to modify the appearance of the schema without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the columns, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of columns.\n         */\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < s.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n"],"sourceRoot":""}