{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 286996727750ba0b2017","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","rowIndex","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","substring","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","font","debugFont","debugColor","stringify","pw","idx","columnIndex","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setScrollBoxSize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","sel","cellData","colIndex","cName","getVisibleSchema","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","useHtml","hVal","join","addCellValue","trRow","textRow","tableRows","textRows","headers","sData","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","preserveDrawingBuffer","premultipliedAlpha","antialias","alpha","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAoTCE,MApTDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,aACA,iBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,0BACA,6BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['alpha', false],\n                ['antialias', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['premultipliedAlpha', false],\n                ['preserveDrawingBuffer', true],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        /**\n         * Gets or sets the order of the rows.  This allows you to modify the appearance of the data without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the rows, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of rows.\n         */\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        /**\n         * Gets or sets the order of the columns.  This allows you to modify the appearance of the schema without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the columns, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of columns.\n         */\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < s.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d', {\n                    preserveDrawingBuffer: self.attributes.preserveDrawingBuffer,\n                    premultipliedAlpha: self.attributes.premultipliedAlpha,\n                    antialias: self.attributes.antialias,\n                    alpha: self.attributes.alpha\n                });\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 286996727750ba0b2017","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['alpha', false],\n                ['antialias', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['premultipliedAlpha', false],\n                ['preserveDrawingBuffer', true],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        /**\n         * Gets or sets the order of the rows.  This allows you to modify the appearance of the data without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the rows, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of rows.\n         */\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        /**\n         * Gets or sets the order of the columns.  This allows you to modify the appearance of the schema without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the columns, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of columns.\n         */\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < s.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d', {\n                    preserveDrawingBuffer: self.attributes.preserveDrawingBuffer,\n                    premultipliedAlpha: self.attributes.premultipliedAlpha,\n                    antialias: self.attributes.antialias,\n                    alpha: self.attributes.alpha\n                });\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}