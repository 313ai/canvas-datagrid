{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 00436a8b64571cee5990","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","style","width","height","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","console","log","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","requestAnimationFrame","resize","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","canvas","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","reloadStoredValues","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","blur","TypeError","currentCursor","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            console.log('applyComponentStyle');\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 00436a8b64571cee5990","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('section');\n        }\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            console.log('applyComponentStyle');\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}