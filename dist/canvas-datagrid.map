{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap c5353877298a2346d8b0","webpack:///./lib/main.js","webpack:///./lib/defaults.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","context","defaults","hyphenateProperty","prop","cust","Array","forEach","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","Grid","args","self","isComponent","component","intf","eval","createGrid","init","getObservableAttributes","attrs","attributes","attr","push","connectedCallback","initialized","parentNode","key","set","value","draw","attributeChangedCallback","attrName","oldVal","newVal","j","typeMap","style","JSON","parse","stringify","keys","data","schema","slice","arguments","strData","e","Error","fullStyleString","split","sd","indexOf","substring","val","idef","console","warn","strSchema","number","strNum","parseInt","boolean","strBool","test","string","str","window","HTMLElement","create","customElements","observedAttributes","disconnectedCallback","dispose","canvasDatagrid","require","apply","styles","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","wheeling","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentIsCanvas","parentDOMNode","shadowRootParentElement","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","input","scrollOffset","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","clipElement","dontDraw","overridePos","contextMenu","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","schemaHashes","uId","changes","expandToRow","col","nodeName","position","ignoreScrollOffset","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","def","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","multiLine","option","valueInEnum","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","getContext","textBaseline","MutationObserver","mutations","mutation","observe","createShadowRoot","parentElement","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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A,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEAwD,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BAC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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val);\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    function connectedCallback() {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    }\n    function attributeChangedCallback(attrName, oldVal, newVal) {\n        var j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        intf.attributes[attrName] = typeMap[typeof getDefaultItem('attributes', attrName)[1]](newVal);\n        return;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = attributeChangedCallback;\n        Grid.prototype.connectedCallback = connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.shadowRoot.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                self.parentDOMNode.appendChild(downArrow);\n                self.parentDOMNode.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (enu) {\n                    // add enums\n                    if (typeof enu === 'function') {\n                        enumItems = enu.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(enu)) {\n                        enumItems = enu;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                self.parentDOMNode.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                self.shadowRootParentElement = self.args.parentNode.parentElement;\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.intf.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c5353877298a2346d8b0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val);\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    function connectedCallback() {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    }\n    function attributeChangedCallback(attrName, oldVal, newVal) {\n        var j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        intf.attributes[attrName] = typeMap[typeof getDefaultItem('attributes', attrName)[1]](newVal);\n        return;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = attributeChangedCallback;\n        Grid.prototype.connectedCallback = connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.shadowRoot.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                self.parentDOMNode.appendChild(downArrow);\n                self.parentDOMNode.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (enu) {\n                    // add enums\n                    if (typeof enu === 'function') {\n                        enumItems = enu.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(enu)) {\n                        enumItems = enu;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                self.parentDOMNode.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                self.shadowRootParentElement = self.args.parentNode.parentElement;\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.intf.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}