{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap fa1d419a03f7270fee66","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","keys","arg","resize","key","set","value","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","selectionTop","selectionLeft","selectionBottom","selectionRight","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","selectionHandles","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","mobile","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","debug","fillArray","pop","perf","reduce","min","toFixed","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","dpl","pw","ph","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","touchScrollTimeout","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","beginEditAt","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","getCellAt","touchingCell","input","endEdit","selectArea","bottom","right","touchstart","NativeEvent","disposeContextMenu","clearTimeout","touchContextTimeout","touchStartEvent","stopPropagation","preventDefault","touchScrollStart","setTimeout","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","getSchema","columnHeaderClickBehavior","touchEndEvents","body","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSelectionBounds","touchScroll","rScrollZone","selectionScrollIncrement","bScrollZone","tScrollZone","lScrollZone","scrollRepeatRate","touchPosition","rh","cw","selectionScrollZone","sbw","removeEventListener","dz","touchReleaseAcceleration","contextMenu","scrollAnimationPPSThreshold","fn","events","sfn","idx","splice","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","autoScrollZone","click","checkSelectionChange","selectionChanged","selectedData","getSelectedData","selectAll","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","mousedown","lastMouseDownTarget","button","requestPointerLock","mouseup","controlInput","focus","keydown","last","cols","keyCode","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","copy","clipboardData","sData","replace","join","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","navigator","userAgent","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","substring","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","map","TypeError","normalizeDataset","callback","syncFnInvoked","0","isArray","eventName","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","isColumnVisible","isRowVisible","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAsPCE,MAtPDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,uBACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,kCACA,kDACA,4CACA,6BACA,0BACA,iCACA,mCACA,wCACA,iCACA,oBACA,+BACA,uBACA,oCACA,oCACA,6BACA,oBACA,gBACA,qCACA,yBACA,6BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,kBACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,iDACA,wDACA,0BACA,mCACA,iCACA,oBAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,OAAQD,QAASM,qBG7UjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oB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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['showPerformance', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['hideColumnText', 'Hide %s'],\n                ['showColumnSelector', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 1000],\n                ['touchDeadZone', 3],\n                ['touchContextMenuTimeMs', 800],\n                ['touchScrollZone', 20],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['touchSelectHandleZone', 20],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleType', 'square'],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var selectionTop, selectionLeft, selectionBottom, selectionRight,\n                        cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                        && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                        ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                            selectionTop = true;\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                            selectionBottom = true;\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                            selectionLeft = true;\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                            selectionRight = true;\n                        }\n                        if (selectionTop && selectionRight) {\n                            selectionHandles.push([cell, 'tr']);\n                        }\n                        if (selectionBottom && selectionRight) {\n                            selectionHandles.push([cell, 'br']);\n                        }\n                        if (selectionTop && selectionLeft) {\n                            selectionHandles.push([cell, 'tl']);\n                        }\n                        if (selectionBottom && selectionLeft) {\n                            selectionHandles.push([cell, 'bl']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawselectionHandles() {\n                if (self.mobile) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = self.width - columnHeaderCellWidth - self.style.scrollBarWidth,\n                    ph = self.height - rowHeaderCellHeight - self.style.scrollBarWidth;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(perfArr, arrIndex, max, color, useAbs) {\n                    drawPerfLine(pw, ph, columnHeaderCellWidth, rowHeaderCellHeight, perfArr, arrIndex, max, color, useAbs);\n                }\n                [[scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'fuchsia'],\n                    [scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'green'],\n                    [perfCounters, undefined, 100, 'red'],\n                    [entityCount, undefined, 500, 'blue'],\n                    [touchPPSCounters, 0, 10000, 'orange', true],\n                    [touchPPSCounters, 1, 10000, 'purple', true]\n                    ].forEach(function (i) { dpl.apply(null, i); });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n                self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                fillText('Red = Draw time, Blue = Entities, Fuchsia/Green = Scroll, Orange/Purple = Touch PPS', columnHeaderCellWidth + 300, rowHeaderCellHeight);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '11px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                    fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                    self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                    fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawselectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling,\n            touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchStart = self.getTouchPos(e);\n            self.touchScrollStart = {\n                x: self.scrollBox.scrollLeft,\n                y: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.touchDelta = {\n                x: 0,\n                y: 0,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: self.touchScrollStart.t\n            };\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchContextTimeout = setTimeout(function () {\n                self.contextmenuEvent(e, self.touchStart);\n            }, self.attributes.touchContextMenuTimeMs);\n            self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n            self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.startingCell.isHeader) {\n                if (self.startingCell.isRowHeader) {\n                    self.selectArea({\n                        top: self.startingCell.rowIndex,\n                        bottom: self.startingCell.rowIndex,\n                        left: 0,\n                        right: self.getSchema().length - 1,\n                    });\n                    self.draw();\n                } else if (self.startingCell.isColumnHeader) {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === self.startingCell.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(self.startingCell.header.name, self.orderDirection);\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectArea({\n                            top: 0,\n                            bottom: self.data.length - 1,\n                            left: self.startingCell.columnIndex,\n                            right: self.startingCell.columnIndex,\n                        });\n                        self.draw();\n                    }\n                }\n                self.touchEndEvents(e);\n                return;\n            }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw();\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw();\n        };\n        self.touchmove = function (e) {\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            clearTimeout(self.touchContextTimeout);\n            self.touchPosition = self.getTouchPos(e);\n            var rh = self.getRowHeaderCellHeight(),\n                cw = self.getColumnHeaderCellWidth(),\n                rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone,\n                lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone,\n                bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone,\n                tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone,\n                sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw();\n        };\n        self.touchEndEvents = function (e) {\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.hideColumnText\n                        .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        e.cell.header.hidden = true;\n                        ev.preventDefault();\n                        self.stopPropagation(ev);\n                        self.disposeContextMenu();\n                        setTimeout(self.draw, 10);\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = cell.style;\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fa1d419a03f7270fee66","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['showPerformance', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['hideColumnText', 'Hide %s'],\n                ['showColumnSelector', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 1000],\n                ['touchDeadZone', 3],\n                ['touchContextMenuTimeMs', 800],\n                ['touchScrollZone', 20],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['touchSelectHandleZone', 20],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleType', 'square'],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var selectionTop, selectionLeft, selectionBottom, selectionRight,\n                        cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                        && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                        ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                            selectionTop = true;\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                            selectionBottom = true;\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                            selectionLeft = true;\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                            selectionRight = true;\n                        }\n                        if (selectionTop && selectionRight) {\n                            selectionHandles.push([cell, 'tr']);\n                        }\n                        if (selectionBottom && selectionRight) {\n                            selectionHandles.push([cell, 'br']);\n                        }\n                        if (selectionTop && selectionLeft) {\n                            selectionHandles.push([cell, 'tl']);\n                        }\n                        if (selectionBottom && selectionLeft) {\n                            selectionHandles.push([cell, 'bl']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawselectionHandles() {\n                if (self.mobile) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = self.width - columnHeaderCellWidth - self.style.scrollBarWidth,\n                    ph = self.height - rowHeaderCellHeight - self.style.scrollBarWidth;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(perfArr, arrIndex, max, color, useAbs) {\n                    drawPerfLine(pw, ph, columnHeaderCellWidth, rowHeaderCellHeight, perfArr, arrIndex, max, color, useAbs);\n                }\n                [[scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'fuchsia'],\n                    [scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'green'],\n                    [perfCounters, undefined, 100, 'red'],\n                    [entityCount, undefined, 500, 'blue'],\n                    [touchPPSCounters, 0, 10000, 'orange', true],\n                    [touchPPSCounters, 1, 10000, 'purple', true]\n                    ].forEach(function (i) { dpl.apply(null, i); });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n                self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                fillText('Red = Draw time, Blue = Entities, Fuchsia/Green = Scroll, Orange/Purple = Touch PPS', columnHeaderCellWidth + 300, rowHeaderCellHeight);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '11px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                    fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                    self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                    fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawselectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling,\n            touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchStart = self.getTouchPos(e);\n            self.touchScrollStart = {\n                x: self.scrollBox.scrollLeft,\n                y: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.touchDelta = {\n                x: 0,\n                y: 0,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: self.touchScrollStart.t\n            };\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: self.touchDelta.t\n            };\n            self.touchContextTimeout = setTimeout(function () {\n                self.contextmenuEvent(e, self.touchStart);\n            }, self.attributes.touchContextMenuTimeMs);\n            self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n            self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.startingCell.isHeader) {\n                if (self.startingCell.isRowHeader) {\n                    self.selectArea({\n                        top: self.startingCell.rowIndex,\n                        bottom: self.startingCell.rowIndex,\n                        left: 0,\n                        right: self.getSchema().length - 1,\n                    });\n                    self.draw();\n                } else if (self.startingCell.isColumnHeader) {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === self.startingCell.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(self.startingCell.header.name, self.orderDirection);\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectArea({\n                            top: 0,\n                            bottom: self.data.length - 1,\n                            left: self.startingCell.columnIndex,\n                            right: self.startingCell.columnIndex,\n                        });\n                        self.draw();\n                    }\n                }\n                self.touchEndEvents(e);\n                return;\n            }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw();\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw();\n        };\n        self.touchmove = function (e) {\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            clearTimeout(self.touchContextTimeout);\n            self.touchPosition = self.getTouchPos(e);\n            var rh = self.getRowHeaderCellHeight(),\n                cw = self.getColumnHeaderCellWidth(),\n                rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone,\n                lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone,\n                bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone,\n                tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone,\n                sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw();\n        };\n        self.touchEndEvents = function (e) {\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.hideColumnText\n                        .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        e.cell.header.hidden = true;\n                        ev.preventDefault();\n                        self.stopPropagation(ev);\n                        self.disposeContextMenu();\n                        setTimeout(self.draw, 10);\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = cell.style;\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}