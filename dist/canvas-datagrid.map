{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 5739c380303ab6d6ff75","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","typeMap","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","replace","requestAnimationFrame","resize","dispatchEvent","style","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","dim","parentNodeStyle","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","trows","sData","rt","join","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","low","high","step","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAyRCE,MAzRDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are probably wrong\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            dims = {\n                height: scrollHeight + columnHeaderCellHeight,\n                width: scrollWidth + rowHeaderCellWidth\n            };\n            if (!self.isChildGrid) {\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        //TODO: support min-max\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.horizontalBarVisible = scrollWidth - self.scrollBox.width > 1;\n            self.scrollBox.verticalBarVisible = scrollHeight - self.scrollBox.height > 1;\n            if (self.scrollBox.horizontalBarVisible) {\n                scrollHeight += sbw;\n                self.scrollBox.verticalBarVisible = scrollHeight - self.scrollBox.height > 1;\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                scrollWidth += sbw;\n                self.scrollBox.horizontalBarVisible = scrollWidth - self.scrollBox.width > 1;\n            }\n            self.scrollBox.scrollWidth = scrollWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = scrollHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredSettings();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5739c380303ab6d6ff75","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are probably wrong\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            dims = {\n                height: scrollHeight + columnHeaderCellHeight,\n                width: scrollWidth + rowHeaderCellWidth\n            };\n            if (!self.isChildGrid) {\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        //TODO: support min-max\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.horizontalBarVisible = scrollWidth - self.scrollBox.width > 1;\n            self.scrollBox.verticalBarVisible = scrollHeight - self.scrollBox.height > 1;\n            if (self.scrollBox.horizontalBarVisible) {\n                scrollHeight += sbw;\n                self.scrollBox.verticalBarVisible = scrollHeight - self.scrollBox.height > 1;\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                scrollWidth += sbw;\n                self.scrollBox.horizontalBarVisible = scrollWidth - self.scrollBox.width > 1;\n            }\n            self.scrollBox.scrollWidth = scrollWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = scrollHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredSettings();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}