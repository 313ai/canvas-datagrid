{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap fe7ecf8486b87518eaf6","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","resize","key","set","value","attrName","oldVal","newVal","tfn","observer","MutationObserver","mutations","mutation","attributeName","characterData","childList","subtree","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","schemaHashes","uId","changes","expandToRow","col","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","clipElement","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","substring","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","nodeName","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","isColumnVisible","isRowVisible","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAwOCE,MAxODD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,kBACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,OAAQD,QAASM,qBG/TjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,QAgDC2B,MA/CDD,8BAAA,QAAAO,SAAAC,WACA,YAGA,SAAAC,MAAAC,MACAA,aACA,IAAAR,QAgBA,OAfAA,MAAAS,gBAAAV,KAAAS,KAAAF,UACAN,KAAAU,KAAAV,KAAAS,YAAAE,KAAA,qDACAX,KAAAQ,UACAR,KAAAY,WAAA,SAAAJ,GAEA,MADAA,GAAAF,WAAA,EACA,GAAAC,MAAAC,IAEArC,QAAA0C,QAAA,SAAA9C,GACAA,EAAAiC,QAEAA,KAAAU,KAAAF,KAAAR,KAAAQ,KACAR,KAAAU,KAAAI,KAAAd,KAAAc,KACAd,KAAAS,aACAT,KAAAc,OAEAd,KAAAU,KApBAJ,qBACA,IAAAnC,SAAA4C,MAAAtB,UAAAuB,MAAAvC,KAAAwC,UA2CA,OAtBAC,QAAAC,cACAZ,KAAAd,UAAAT,OAAAoC,OAAAF,OAAAC,YAAA1B,YAGAyB,OAAAG,iBACAd,KAAAe,mBAAAhB,UAAAiB,0BACAhB,KAAAd,UAAA+B,qBAAA,WAA2DtD,KAAAuD,WAC3DlB,KAAAd,UAAAiC,yBAAApB,UAAAoB,yBACAnB,KAAAd,UAAAkC,kBAAArB,UAAAqB,kBACApB,KAAAd,UAAAmC,gBAAAtB,UAAAsB,gBACAV,OAAAG,eAAArD,OAAA,kBAAAuC,QAGAW,eAAAW,gBAAAX,OAAAY,UACAZ,OAAAW,eAAA,SAAArB,GAAiD,UAAAD,MAAAC,KAGjDzC,OAAAD,QAAA,SAAA0C,GAGA,MAFAA,SACAA,EAAAF,WAAA,EACA,GAAAC,MAAAC,IAEAzC,OAAAD,SACCsC,MAAAtC,QAAA+B,iCAAA9B,OAAAD,QAAAgC,gCHuUK,SAAU/B,EAAQD,EAASM,GIjYjC,GAAAyB,GAAAC,CAEAD,IAAAzB,EAAA,QAiJC2B,MAjJDD,EAAA,SAAAG,GACA,YACA,iBAAAD,GAGA,QAAA+B,GAAAC,EAAAC,GACA,GAAAtC,GAAA,EAQA,OAPAoB,OAAAtB,UAAAoB,QAAApC,KAAAuD,EAAA,SAAAE,GACA,GAAAA,MAAAC,cAEA,YADAxC,GAAA,IAAAuC,EAAAE,cAGAzC,IAAAuC,KAEAD,EAAA,aAAAtC,EAEA,QAAA0C,GAAAC,EAAAC,GACA,GAAAhE,KAQA,OANA0B,GAAA1B,GACAA,EAAA0B,SAAAqC,GAAAE,OAAA,SAAAjE,GACA,MAAAA,GAAA,GAAA6D,gBAAAG,EAAAH,eACAL,EAAAxD,EAAA,MAAAgE,EAAAH,eACAL,EAAAxD,EAAA,SAAAgE,EAAAH,gBACa,GAGb,QAAAK,GAAA/B,EAAAV,EAAA0C,GACA,GAAAC,GAAAzB,OAAA0B,iBAAAlC,EAAA,MACAmC,IACA7C,GAAA8C,cAAAH,EACA1C,EAAA4C,GACAA,IAAA5C,SAAAE,OACA0C,EAAAhC,QAAA,SAAAkC,GACA,GAAAC,GAAAL,EAAAM,iBAAAlB,EAAAgB,EAAA,OACA,MAAAC,IACAhD,EAAAkD,MAAAH,EAAA,IAAAI,QAAAJ,GAAA,IAAAC,EAAAD,EAAA,OAGA/C,EAAAoD,MAAA,GACAV,GACA1C,EAAAqD,cAAA,eAAA3C,EAAAwC,OAtCAlD,OACA,IAAAmD,GAAA7C,IA2IA,OAnGA6C,IACAG,KAAA,SAAAC,GACA,IACA,MAAAC,MAAAC,MAAAF,GACiB,MAAAG,GACjB,SAAAC,OAAA,8DAGAC,OAAA,SAAAC,GACA,IACA,MAAAL,MAAAC,MAAAI,GACiB,MAAAH,GACjB,SAAAC,OAAA,gEAGAG,OAAA,SAAAC,EAAAhB,GACA,GAAA1D,GAAA2E,SAAAD,EAAA,GACA,OAAAE,OAAA5E,GAAA0D,EAAA1D,GAEA6E,QAAA,SAAAC,GACA,cAAAC,KAAAD,IAEAE,OAAA,SAAAC,GACA,MAAAA,KAGAhE,EAAAiB,wBAAA,WACA,GAAAhD,MAAsBgG,GAAA,gBAKtB,OAJAtE,GAAA1B,GACAA,EAAA0B,SAAAC,WAAAW,QAAA,SAAA2D,GACAD,EAAAE,KAAAD,EAAA,GAAApC,iBAEAmC,GAEAjE,EAAAqB,kBAAA,WACA,GAAA/B,GAAAc,EAAAxC,IACAwC,GAAAgE,cACAhE,EAAAgE,aAAA,EACAhE,EAAAF,KAAAmE,WAAAjE,EAOAd,EAAAc,EAAAI,OACAR,EAAAsE,QAAAlE,EAAAd,GACA6C,EAAA/B,EAAAd,GAAA,GACAA,EAAAiF,UACA,yBAAAhE,QAAA,SAAAiE,GACA9F,OAAAC,eAAAyB,EAAAF,KAAAsE,GACAC,IAAA,SAAAC,GACApF,EAAAkF,GAAAE,EACAtE,EAAA0C,QAEAhE,IAAA,WACA,MAAAQ,GAAAkF,UAKAxE,EAAAsB,gBAAA,WACA1D,KAAA2G,UAEAvE,EAAAoB,yBAAA,SAAAuD,EAAAC,EAAAC,GACA,GAAAC,GAAA1E,EAAAxC,IACA,cAAA+G,EAGA,eAAAA,OACAvE,EAAAF,KAAA8C,KAAAH,EAAAG,KAAA6B,IAGA,WAAAF,OACAvE,EAAAF,KAAAoD,OAAAT,EAAAS,OAAAuB,SAGA,UAAAF,GAAA,cAAAA,IAGAG,EAAAjC,QAAAd,GAAA,aAAA4C,GAAA,IACAvE,EAAAR,WAAA+E,GAAAG,EAAAD,MAGA7E,EAAAsE,QAAA,SAAAlE,EAAAV,GACA,GAAAqF,EACAnE,QAAAoE,mBACAD,EAAA,GAAAnE,QAAAoE,iBAAA,SAAAC,GACAxE,MAAAtB,UAAAoB,QAAApC,KAAA8G,EAAA,SAAAC,GACA,aAAAA,EAAAC,eACA,UAAAD,EAAAC,cAEA,WADAhD,GAAA/B,EAAAV,OAKAqF,EAAAT,QAAAlE,GAAoCgF,eAAA,EAAAC,WAAA,EAAAzF,YAAA,EAAA0F,SAAA,MAEpC5F,EAAAM,YACAA,IAECF,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IJwYK,SAAU/B,EAAQD,EAASM,GK3hBjC,GAAAyB,GAAAC,CAEAD,UA04BCE,MA14BDD,EAAA,WACA,YACA,iBAAAE,GAKA,QAAA6F,KACA,GAAAC,IAAA,CACA9G,QAAA+G,KAAA/F,EAAAgG,gBAAAnF,QAAA,SAAAoF,GACAjG,EAAAgG,eAAAC,GAAAC,WACAJ,GAAA,KAGAA,GACA9F,EAAAoD,OAGA,QAAA+C,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAG,WAAAH,EAAAI,eACAC,EAAAL,EAAAK,EAAAzG,EAAA0G,iBACAC,EAAAP,EAAAO,EAAA3G,EAAA4G,eACA,IAAA5G,EAAAgG,eAAAM,GAAA,CAEA,GADAD,EAAArG,EAAAgG,eAAAM,GACAD,EAAAQ,SAAAT,EAAAS,QAAAR,EAAAS,QAAAV,EAAAU,MAGiB,CACjB,IAAAT,EAAAH,SACA,MAEA,OAAAlG,GAAA+G,IAAAC,UAAAX,EAAAI,EAAAE,GALA3G,EAAAgG,eAAAM,OAAAvG,GAQAsG,EAAA,GAAAY,OAAAb,EAAAU,MAAAV,EAAAS,QACA7G,EAAAgG,eAAAM,GAAAD,EACAA,EAAAa,OAAA,WACAlH,EAAA+G,IAAAC,UAAAX,EAAAI,EAAAE,GACAd,KAEAQ,EAAAc,IAAA,6BAA0CC,KAC1C,kDAAAhB,EAAAU,MAAA,aAAAV,EAAAS,OAAA,qJAGAP,EAAA,uCAMA,QAAAe,GAAAZ,EAAAE,GAqBA,MApBAF,IAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,gBACA5G,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAqE,8BACAvH,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAuE,oCACAzH,EAAA+G,IAAAW,YACAjB,GAAAzG,EAAAkD,MAAAyE,mCACAhB,GAAA3G,EAAAkD,MAAA0E,kCACA,QAAA5H,EAAA6H,gBACA7H,EAAA+G,IAAAe,OAAArB,EAAAE,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAAzG,EAAAkD,MAAA8E,8BAAArB,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAA,GAAAzG,EAAAkD,MAAA8E,8BAAArB,EAAA3G,EAAAkD,MAAA+E,gCACAjI,EAAA+G,IAAAe,OAAArB,EAAAE,KAEA3G,EAAA+G,IAAAgB,OAAAtB,EAAAE,EAAA3G,EAAAkD,MAAA+E,gCACAjI,EAAA+G,IAAAgB,OAAAtB,EAAAzG,EAAAkD,MAAA8E,8BAAArB,EAAA3G,EAAAkD,MAAA+E,gCACAjI,EAAA+G,IAAAgB,OAAAtB,EAAA,GAAAzG,EAAAkD,MAAA8E,8BAAArB,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAAE,EAAA3G,EAAAkD,MAAA+E,iCAEAjI,EAAA+G,IAAAmB,SACAlI,EAAA+G,IAAAoB,OACAnI,EAAAkD,MAAAyE,mCACA3H,EAAAkD,MAAA8E,8BACAhI,EAAAkD,MAAAkF,oCAEA,QAAAC,GAAAjC,EAAAK,EAAAE,GAqBA,MApBAF,IAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,gBACA5G,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoF,eACAtI,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAqF,qBACAvI,EAAA+G,IAAAW,YACAjB,GAAAzG,EAAAkD,MAAAsF,oBACA7B,GAAA3G,EAAAkD,MAAAuF,mBACAzI,EAAA0I,aAAAtC,EAAA9C,KAAAtD,EAAA2I,YACA3I,EAAA+G,IAAAe,OAAArB,EAAAE,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAAzG,EAAAkD,MAAA0F,eAAAjC,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAA,GAAAzG,EAAAkD,MAAA0F,eAAAjC,EAAA3G,EAAAkD,MAAA2F,iBACA7I,EAAA+G,IAAAe,OAAArB,EAAAE,KAEA3G,EAAA+G,IAAAgB,OAAAtB,EAAAE,GACA3G,EAAA+G,IAAAgB,OAAAtB,EAAAzG,EAAAkD,MAAA2F,gBAAAlC,EAAA,GAAA3G,EAAAkD,MAAA0F,gBACA5I,EAAA+G,IAAAgB,OAAAtB,EAAAE,EAAA3G,EAAAkD,MAAA0F,gBACA5I,EAAA+G,IAAAgB,OAAAtB,EAAAE,IAEA3G,EAAA+G,IAAAmB,SACAlI,EAAA+G,IAAAoB,OACAnI,EAAAkD,MAAAsF,oBACAxI,EAAAkD,MAAA0F,eACA5I,EAAAkD,MAAA4F,qBAEA,QAAAC,GAAAtC,EAAAE,EAAAqC,EAAAC,EAAAC,GACAzC,GAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,eACA,IAAAuC,GAAA1C,EAAAuC,EAAAI,EAAAzC,EAAAsC,CACAjJ,GAAA+G,IAAAW,YACA1H,EAAA+G,IAAAe,OAAArB,EAAAyC,EAAAvC,GACA3G,EAAA+G,IAAAgB,OAAAoB,EAAAD,EAAAvC,GACA3G,EAAA+G,IAAAsC,iBAAAF,EAAAxC,EAAAwC,EAAAxC,EAAAuC,GACAlJ,EAAA+G,IAAAgB,OAAAoB,EAAAxC,EAAAsC,EAAAC,GACAlJ,EAAA+G,IAAAsC,iBAAAF,EAAAC,EAAAD,EAAAD,EAAAE,GACApJ,EAAA+G,IAAAgB,OAAAtB,EAAAyC,EAAAE,GACApJ,EAAA+G,IAAAsC,iBAAA5C,EAAA2C,EAAA3C,EAAA2C,EAAAF,GACAlJ,EAAA+G,IAAAgB,OAAAtB,EAAAE,EAAAuC,GACAlJ,EAAA+G,IAAAsC,iBAAA5C,EAAAE,EAAAF,EAAAyC,EAAAvC,GAEA,QAAA2C,GAAA7C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,gBACA5G,EAAA+G,IAAAuC,SAAA7C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAM,GAAA9C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,gBACA5G,EAAA+G,IAAAwC,WAAA9C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAO,GAAAC,EAAAhD,EAAAE,GACAF,GAAAzG,EAAA0G,iBACAC,GAAA3G,EAAA4G,gBACA5G,EAAA+G,IAAAyC,SAAAC,EAAAhD,EAAAE,GAEA,QAAA+C,GAAA/K,EAAAgL,GACA3J,EAAA+G,IAAAW,aAEAkC,EAAA,WACA5J,EAAA+G,IAAAe,OAAAnJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAgI,EAAA3G,EAAA4G,iBACA5G,EAAA+G,IAAAgB,OAAApJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAmI,MAAAnI,EAAAgI,EAAA3G,EAAA4G,kBAEAuC,EAAA,WACAnJ,EAAA+G,IAAAe,OAAAnJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAmI,MAAAnI,EAAAgI,EAAA3G,EAAA4G,iBACA5G,EAAA+G,IAAAgB,OAAApJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAmI,MAAAnI,EAAAgI,EAAA3G,EAAA4G,gBAAAjI,EAAAkI,SAEAuC,EAAA,WACApJ,EAAA+G,IAAAe,OAAAnJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAgI,EAAA3G,EAAA4G,gBAAAjI,EAAAkI,QACA7G,EAAA+G,IAAAgB,OAAApJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAmI,MAAAnI,EAAAgI,EAAA3G,EAAA4G,gBAAAjI,EAAAkI,SAEArI,EAAA,WACAwB,EAAA+G,IAAAe,OAAAnJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAgI,EAAA3G,EAAA4G,iBACA5G,EAAA+G,IAAAgB,OAAApJ,EAAA8H,EAAAzG,EAAA0G,iBAAA/H,EAAAgI,EAAA3G,EAAA4G,gBAAAjI,EAAAkI,UAGA8C,KACA3J,EAAA+G,IAAAmB,SAEA,QAAA2B,GAAAJ,EAAA3C,GACA,GAAAnI,GAAAqK,EAAA,CACA,OAAAhJ,GAAA8J,cAAAL,IAAAzJ,EAAA8J,cAAAL,GAAA3C,GACA9G,EAAA8J,cAAAL,GAAA3C,IAGAkC,EAAAhJ,EAAA+G,IAAAgD,YAAAN,GAAA3C,MACA9G,EAAA8J,cAAAL,GAAAzJ,EAAA8J,cAAAL,OACA9K,GAAiBqG,MAAAyE,EAAA3C,MAAAkC,GACjBhJ,EAAA8J,cAAAL,GAAA3C,GAAAnI,EACAA,GAEA,QAAAqL,GAAA5D,GACA,GAAA6D,GAAAjK,EAAAkD,MAAAkD,EAAAlD,MAAA,eACAgH,EAAAlK,EAAAkD,MAAAkD,EAAAlD,MAAA,cACAiH,EAAAnK,EAAAkD,MAAAkD,EAAAlD,MAAA,gBACAkH,EAAApK,EAAAkD,MAAAkD,EAAAlD,MAAA,iBACAmH,EAAAH,EAAA9D,EAAAS,OAAA,GAAAT,EAAAS,OACAyD,EAAAL,EAAA7D,EAAAwC,eAAAxC,EAAAmE,iBACAnE,GAAAqD,KAAAI,EAAAzD,EAAAI,eAAAJ,EAAAU,MAAAqD,EAAAF,GACA7D,EAAAqD,KAAA5C,OAAAT,EAAAoE,WACA,UAAApE,EAAAqE,oBACAH,EAAAlE,EAAAU,MAAAV,EAAAqD,KAAA3C,MAAAqD,EACa,WAAA/D,EAAAqE,sBACbH,EAAAlE,EAAAU,MAAA,EAAAV,EAAAqD,KAAA3C,MAAA,GAEA,QAAAV,EAAAsE,kBACAL,EAAAH,EAAA9D,EAAAqD,KAAA5C,OACa,WAAAT,EAAAsE,oBACbL,EAAAjE,EAAAS,OAAAuD,EAAAhE,EAAAqD,KAAA5C,QAEAT,EAAAqD,KAAAhD,EAAAL,EAAAK,EAAA6D,EACAlE,EAAAqD,KAAA9C,EAAAP,EAAAO,EAAA0D,EACAb,EAAApD,EAAAqD,KAAAzE,MAAAoB,EAAAqD,KAAAhD,EAAAL,EAAAqD,KAAA9C,GAxLA,GAAAgE,MACAC,EAAA,EACAC,EAAA,EACA7K,GAAAgG,kBA6LAhG,EAAAoD,KAAA,SAAA0H,GA8IA,QAAAC,GAAAnM,EAAAoM,EAAAC,GACA,gBAAAC,EAAAC,EAAAC,GACA,GACAC,GACAjF,EAaApD,EAfAsI,EAAAJ,EAAAhI,OAAA,OAGAqI,EAAA,aAAAnH,KAAAkH,GACAE,EAAA,aAAApH,KAAAkH,GACAG,EAAA,kBAAAH,EACAI,EAAA,qBAAAJ,EACAK,EAAA3L,EAAA4L,WAAAX,KAAA,IAAAjL,EAAA4L,WAAAX,GAAAY,QAAAT,GACAU,EAAA9L,EAAA+L,OAAAnN,EAAAoB,EAAA2I,aAAA,IAAA3I,EAAA+L,OAAAnN,EAAAoB,EAAA2I,WAAAkD,QAAAT,GACAY,EAAAhM,EAAAiM,WAAAjB,WAAAC,GAAAjL,EAAAiM,WAAAC,cAAAd,EACAe,EAAA,gBAAAvN,GAAAsM,EAAArM,OAAA,OAAAD,EAAAsM,EAAArM,WAAAkB,KAAAnB,EAAAsM,EAAArM,MACAuN,IAAApM,EAAAqM,OAAAC,KAAAtM,EAAAiM,WAAAjB,YAAAC,GACAjL,EAAAqM,OAAAE,QAAAvM,EAAAiM,WAAAC,eAAAd,IACA,IAAAA,IAAA,IAAAH,KACAQ,EAAA,gDAEAe,EAAAxM,EAAAyM,WAAAvB,EAAAwB,MAAA,UACAC,EAAA,EACAC,EAAA,EACAC,EAAA7M,EAAA8M,MAAAP,QAAAd,EAAA,aAAAP,EAAAlL,EAAA2I,YAAAuC,EAAApE,MACAiG,GACA/H,MAAApG,EAAAsM,EAAArM,MACAmO,IAAApO,EACAsM,SA0EA,IAxEA,kBAAAI,IACAuB,EAAA7D,EAAAvC,OAGA1G,KAAA8M,IACAA,EAAA7M,EAAAkD,MAAA+J,aAEAxG,EAAAoG,EAAA7M,EAAAkD,MAAAgK,gBAAA,IACAzG,GAAAoG,EAAA7M,EAAAkD,MAAAgK,iBAEAlB,IACAV,EAAA,eAEA,IAAAtL,EAAAmN,YAAAtB,QAAAb,IAAAO,GACAvL,EAAAmN,YAAA1I,KAAAuG,GAEAhI,EAAAhD,EAAAqD,cAAA,kBAAA0J,GACAK,EAAA3G,EACA4G,EAAA1G,EACA,eAAA2E,GACA8B,EAAA,EACAC,EAAA,GACqB5B,EACrB2B,EAAA,EACqB7B,IACrB8B,EAAA,GAEAjH,GACAsG,KAAAP,EAAA,uBAAAjB,EAAAwB,KACAxJ,MAAAoI,EACAgC,SAAA,uBACA7G,EAAA2G,EACAzG,EAAA0G,EACA5C,oBAAAzK,EAAAkD,MAAAoI,EAAA,uBACAZ,kBAAA1K,EAAAkD,MAAAoI,EAAA,qBACAiC,UAAAvN,EAAA4G,gBAAAyG,EACAG,WAAAxN,EAAA0G,iBAAA0G,EACAK,UAAAzN,EAAA0N,UAAAD,UACAE,WAAA3N,EAAA0N,UAAAC,WACA3B,UAAAI,EACAN,UACAH,WACA7E,MAAA+F,EACAhG,OAAA+G,EACAC,YAAAhB,EACAiB,aAAAF,EACAjJ,WAAA3E,EAAAU,KAAAiE,WACAoJ,aAAA/N,EAAAU,KAAAiE,WACArB,KAAA1E,EACA4M,WACAD,WACAG,iBACAsC,kBAAA9C,EAAA8C,gBACAvC,cACAwC,UACA/C,SACAgB,YAAAd,EACAJ,SAAAC,EACAiD,gBAAA/C,EACAgD,aAAAnD,EACAmB,SACAiC,QAAApO,EAAAE,WAAArB,MAAA,IAAAD,EAAAoB,EAAA2I,UAAA,IAAAuC,EAAAlL,EAAA2I,UACA0F,WAAArO,EAAAU,KACA6F,UAAA,GACA6F,eACApH,MAAAuG,IAAAE,EAAAP,EAAAoD,OAAApD,EAAArM,KAAAD,EAAAsM,EAAArM,OAEAkO,EAAA3G,OACAA,EAAAmI,WAAAnI,EAAAmF,SAAAvL,EAAA8M,MAAAR,MAAA,GAAAkC,EACApI,EAAAqI,UAAArI,EAAAmF,SAAAvL,EAAA8M,MAAAP,QAAAmC,WAAA1O,EAAA8M,MAAAP,QAAArB,EAAAlL,EAAA2I,WACAvC,EAAApG,EAAA2I,UAAA/J,EAAAoB,EAAA2I,UACA3I,EAAA2O,aAAAC,QAAAxI,IACApG,EAAAqD,cAAA,mBAAA0J,GAAA,CA+CA,GA9CA/M,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,mBACAtL,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAoI,EAAA,eACAtL,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAAoI,EAAA,eACAQ,IACA9L,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,wBACAtL,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAoI,EAAA,qBAEAK,IACA3L,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,2BACAtL,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAoI,EAAA,wBAEAc,IACApM,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAkJ,EAAA,oBAEApM,EAAAqD,cAAA,aAAA0J,GACA3G,EAAA+F,SACA/F,EAAAS,SAAA2H,IACApI,EAAAS,OAAA2H,GAAAxO,EAAAkD,MAAA4L,wBACAC,GAAA,GAEA3I,EAAAU,MAAA9G,EAAA8M,MAAAP,QAAArB,EAAAlL,EAAA2I,YAAA3I,EAAAkD,MAAA8L,wBAEAf,IAAA7H,EAAAqF,cACArF,EAAAS,OAAA7G,EAAA8M,MAAAR,KAAA2C,EAAAjP,EAAA2I,YAAA3I,EAAAkD,MAAA0K,YAEAxH,EAAA+F,SACA7C,EAAA8D,EAAAC,EAAAjH,EAAAU,MAAAV,EAAAS,QACA0C,EAAA6D,EAAAC,EAAAjH,EAAAU,MAAAV,EAAAS,SAEA7G,EAAA+G,IAAAmI,OACAnG,EAAA3C,EAAAK,EAAAL,EAAAO,EAAAP,EAAAU,MAAAV,EAAAS,OAAA,GACA7G,EAAA+G,IAAAoI,OACAnP,EAAAqD,cAAA,kBAAA0J,GACA3G,EAAAS,SAAA+G,GAAAK,IAAA7H,EAAAqF,cACAzL,EAAA8M,MAAAR,KAAAf,GAAA,EAAA3M,EAAAoB,EAAA2I,WAAAvC,EAAAS,OACAkI,GAAA,GAEA3I,EAAAU,QAAA+F,IACA7M,EAAA8M,MAAAP,QAAArB,EAAAlL,EAAA2I,WAAAvC,EAAAU,MACAiI,GAAA,GAEAtD,GAAAzL,EAAAE,WAAAkP,OACApP,EAAAqD,cAAA,kBAAA0J,KACAH,EAAAvE,EAAAjC,EAAApG,EAAAkD,MAAAoI,EAAA,eAAA+B,EAAA,KAGArN,EAAAE,WAAAmP,gBAAA5D,IACAA,EACA,GAAArF,EAAA+F,SAAAnM,EAAAqD,cAAA,uBAAA0J,GAAA,CACA,IAAA/M,EAAAsP,WAAAlJ,EAAAgI,QAAA,CAMA,GALA/C,EAAArL,EAAAQ,KAAA6K,oBAAArL,EAAAQ,KACA6K,EAAAxM,KAAAmB,EAAAE,WAAAqP,eAAAnJ,EAAAgI,WAAArO,GACAsL,EAAA1G,WAAAyB,EACAiF,EAAA/H,KAAA1E,EAAAsM,EAAArM,MACAkO,EAAA1B,qBACArL,EAAAqD,cAAA,uBAAA0J,GAAqF,MACrF/M,GAAAsP,WAAAlJ,EAAAgI,QAAApO,EAAAY,WAAAyK,GACArL,EAAA8M,MAAAR,KAAA2C,EAAAjP,EAAA2I,WACA3I,EAAA8M,MAAAR,KAAA2C,EAAAjP,EAAA2I,YAAA3I,EAAAkD,MAAAsM,eACAT,GAAA,EAEA3I,EAAAqJ,KAAAzP,EAAAsP,WAAAlJ,EAAAgI,QACAhI,EAAAqJ,KAAA9K,WAAAyB,EACAA,EAAAqJ,KAAAC,SAAA,EACAtJ,EAAAqJ,KAAArM,OACApD,EAAAqD,cAAA,iBAAA0J,OACyB3G,GAAA+F,SACzBnM,EAAAsP,WAAAlJ,EAAAgI,UACApO,EAAAsP,WAAAlJ,EAAAgI,QAAAzJ,WAAAmJ,aAAA,GAEAvC,GAAAvL,EAAA2P,UAAAzE,EAAArM,OACAmB,EAAAqD,cAAA,qBAAA0J,KACAJ,EAAAtF,EAAA+F,EAAApN,EAAAkD,MAAAoI,EAAA,oBAGAtL,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,SACAQ,IACA9L,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,eAEAK,IACA3L,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAoI,EAAA,kBAEAc,IACApM,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAkJ,EAAA,UAEApM,EAAA+G,IAAA6I,KAAA5P,EAAAkD,MAAAoI,EAAA,QACAlF,EAAAoE,WAAAxK,EAAAkD,MAAAoI,EAAA,cACAlF,EAAAwC,eAAAgE,EACAxG,EAAAmE,kBAAAoC,EACA3J,MAAAjD,KAAAiD,IAAAwJ,EACAA,EAAAO,GAAA,OACAhN,KAAAiD,GAAAwJ,IACAxJ,EAAA,GACA6M,QAAAC,KAAA,mCACA5E,EAAAwB,KAAA,wBAEAtG,EAAAI,oBAAAzG,KAAAiD,GAAA,OAAAA,IAAA,IAAA+M,WACA/P,EAAAgQ,mBAAAjQ,KAAAC,EAAAgQ,cAAAhN,IAAAuI,IACAnF,EAAAI,eAAAxG,EAAAE,WAAA+P,iBAAAjN,GAEAhD,EAAAqD,cAAA,aAAA0J,KACA3G,EAAAG,WAAA,SAAA2E,EAAAwB,KACAvG,EAAAC,GAEA4D,EAAA5D,IA8BA,OAzBA4F,KACAkE,EAAA9J,GAEAuF,IAAAF,IACAzL,EAAA4L,WAAAxF,EAAA4E,SAAA,KACA,IAAAhL,EAAA4L,WAAAxF,EAAA4E,SAAA,GAAAa,QAAAzF,EAAA8F,cACA,IAAA9F,EAAA4E,UACA5E,EAAAmF,UACA4E,EAAA1L,MAAA2B,EAAA,MAEApG,EAAA4L,WAAAxF,EAAA4E,SAAA,KACA,IAAAhL,EAAA4L,WAAAxF,EAAA4E,SAAA,GAAAa,QAAAzF,EAAA8F,cACAiE,EAAA1L,MAAA2B,EAAA,MAEApG,EAAA4L,WAAAxF,EAAA4E,WAAA,IAAA5E,EAAA8F,cACA,IAAAlM,EAAA4L,WAAAxF,EAAA4E,UAAAa,QAAAzF,EAAA8F,YAAA,IACAiE,EAAA1L,MAAA2B,EAAA,MAEApG,EAAA4L,WAAAxF,EAAA4E,WAAA5E,EAAA8F,cAAAtM,EAAAwQ,SACA,IAAApQ,EAAA4L,WAAAxF,EAAA4E,UAAAa,QAAAzF,EAAA8F,YAAA,IACAiE,EAAA1L,MAAA2B,EAAA,OAGApG,EAAA+G,IAAAsJ,UACA5J,GAAAL,EAAAU,MAAA9G,EAAAkD,MAAAgK,gBACA9G,EAAAU,QAGA,QAAAwJ,GAAAC,EAAAC,EAAAvF,GACA,GAAAwF,EACAzQ,GAAAE,WAAAwQ,iBACAjK,EAAA,EACAkK,GAAqCA,cAAAH,EAAA,GACrCG,EAAA3Q,EAAA2I,UAAA4H,EAAAvQ,EAAA2I,UACA8H,GACA5R,KAAA,gBACAiI,MAAA9G,EAAAkD,MAAA0N,mBACA1N,MAAA,gBACAwJ,KAAA,SACApJ,KAAAiN,EAAAvQ,EAAA2I,UACA6H,OAAA,GAEAC,EAAAzQ,EAAA2I,UAAA4H,EAAAvQ,EAAA2I,UACAsF,EAAAjO,EAAA0I,aAAA6H,EAAAvQ,EAAA2I,WACAoC,EAAA4F,EAAAH,EAAAvF,GAAAwF,GAAA,OAqEA,QAAAI,GAAA1H,EAAAvK,GACA,GAAAL,GAAAuS,EAAAC,EAAAhS,EAAAiS,EAAApR,EAAAwQ,MACA,IAAAzJ,EAAA,EAAAiH,EAAA3E,EACA,QAOA,IALAgG,EAAAjP,EAAAsD,KAAA6F,GACA8E,EAAAjO,EAAA0I,aAAAuG,EAAAjP,EAAA2I,WACAoI,EAAA/Q,EAAA8M,MAAAR,KAAA2C,EAAAjP,EAAA2I,YAAA3I,EAAAkD,MAAA0K,WACAkD,EAAA7C,EAAAjO,EAAA8M,MAAAmE,MAAAhC,EAAAjP,EAAA2I,WAAA,EACA6F,EAAAuC,EAAAD,EACAnK,GAAA,EAAA6H,EACA,QAMA,KAJAxO,EAAAE,WAAAwQ,iBACAjK,GAAAyK,GAEAtD,EAAAY,EACAzP,EAAAiB,EAAAmR,gBAA8CpS,EAAAiS,EAAOjS,GAAA,EAGrD,GAFAR,EAAAyB,EAAAqM,OAAAE,QAAAxN,IACA0H,GAAAsE,EAAAkE,EAAA9F,EAAAvK,GAAAgB,EAAArB,KAAAQ,IACAiB,EAAA8G,MAAA,CACA9G,EAAAoR,iBAAArS,EACAiB,EAAAqR,iBAAA5K,CACA,OAwCA,MApCAmH,GAAAY,EACA/H,GAAA,EAAAzG,EAAA0N,UAAAC,WAAA3N,EAAAsR,gBAAAtR,EAAAkD,MAAAgK,gBAEAqE,EAAAvR,EAAAsP,WAAAL,EAAAjP,EAAA2I,WACAQ,IAAAnJ,EAAAsD,KAAA8M,QAAAnC,GACAsD,EAAA7B,SAAA,EACA6B,EAAA5M,YACA4I,UAAA5G,EAAAoK,EAAA/Q,EAAA4G,gBACA4G,WAAA0D,EAAA,EAAAlR,EAAA0G,iBACAoH,aAAAgD,EACAjD,YAAA7N,EAAA8G,MAAAoK,EAAAlR,EAAAkD,MAAAsO,eAAA,EACAzD,aAAA/N,EAAAU,KAAAiE,WACAA,WAAA3E,EAAAU,KAAAiE,WACAzB,MAAAlD,EAAAkD,MACAoK,SAAA,uBACAG,UAAAzN,EAAA0N,UAAAD,UACAE,WAAA3N,EAAA0N,UAAAC,WACA3C,SAAA7B,GAEAnJ,EAAA2O,aAAAC,SACA5D,SAAAvE,EACAyF,YAAA,EACAvF,EAAA4K,EAAA5M,WAAA4I,UACA9G,EAAA8K,EAAA5M,WAAA6I,WACA3G,OAAA0K,EAAA5M,WAAAmJ,aACAhH,MAAAyK,EAAA5M,WAAAkJ,YACA3K,MAAA,YACAwJ,KAAA6E,EAAA5M,WAAA2I,WAEAiE,EAAAnO,QACiBmO,IACjBA,EAAA5M,WAAAmJ,aAAA,QACA9N,GAAA8M,MAAAmE,MAAAhC,EAAAjP,EAAA2I,YAEA8I,EAAAhN,MAAAwK,EAAA9F,EAAAvK,EAAA+H,EAAA6H,IACA7H,GAAAiH,EAAA5N,EAAAkD,MAAAgK,iBACA,EA9gBA,IAAAlN,EAAAqD,cAAA,mBACArD,EAAA0R,aAAA1R,EAAA6G,QAAA7G,EAAA8G,OAAA,CAGA,GAAA9G,EAAA0R,aAAA5G,EAEA,WADA6G,uBAAA3R,EAAAqO,WAAAjL,KAGA,SAAApD,EAAAU,KAAAgP,QAAA,CAIA,GAAAX,GAAA4B,EAAAhR,EAAAyN,EAAAC,EAAAkE,EAAAtD,EACAO,EAAAE,EAAA/H,EAAAF,EAAA9H,EAAAsK,EAAAD,EAAApJ,EAAAuJ,EAAA8F,EAAAiB,EACAC,KACAsB,KACAjT,EAAAwB,EAAAsD,KAAA8M,OACAwB,EAAA5R,EAAA6R,gBACAC,EAAA9R,EAAA+R,yBACAb,EAAAlR,EAAAgS,2BACApE,EAAA5N,EAAAkD,MAAA0K,UACAhD,IAAA,EACAjL,EAAAsS,YAAAC,MAEAlS,EAAAsD,KAAA8M,OAAApQ,EAAAqM,OAAAC,KAAA8D,QACApQ,EAAAmS,kBA2pBAnS,EAAA+G,IAAAmI,OApKA,WACAlP,EAAAmN,eACAvN,EAAAI,EAAAoS,mBACApS,EAAA2O,gBACA3O,EAAA4G,gBAAA5G,EAAA0R,YAAA1R,EAAA2E,WAAA4I,UAAA,EACAvN,EAAA0G,iBAAA1G,EAAA0R,YAAA1R,EAAA2E,WAAA6I,WAAA,EACAvE,EAAAjJ,EAAA6G,OACAmC,EAAAhJ,EAAA8G,MACA9G,EAAA0R,aACA1R,EAAA+G,IAAAsL,MAAAnR,OAAAoR,iBAAApR,OAAAoR,qBAGA,WACAvJ,EAAA,IAAAC,EAAAC,EAAA,GACAjJ,EAAA+G,IAAAoI,OACAnP,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAqP,gBACAjJ,EAAA,IAAAN,EAAAC,MAEA,WACA,GAAAlK,GAAAM,EAAAd,EAAAyS,EAAApR,EAAAwQ,MAGA,KAFA3J,GAAA,EAAAzG,EAAA0N,UAAAC,WAAA3N,EAAAsR,gBAAAtR,EAAAkD,MAAAgK,gBACAvG,GAAA,EAAA3G,EAAA0N,UAAAD,UAAAqE,EAAA9R,EAAAwS,eAAAxS,EAAAkD,MAAAgK,gBACA/D,EAAAnJ,EAAAyS,eAA6CtJ,EAAA3K,EAAO2K,GAAA,EAEpD,GADA9J,EAAAW,EAAAqM,OAAAC,KAAAnD,IACA0H,EAAAxR,EAAA8J,GAAA,CACAnJ,EAAA0S,kBAAAvJ,EACAnJ,EAAA2S,kBAAAhM,CACA,OAGA,GAAA3G,EAAAE,WAAA0S,WAAA,CAMA,IALA5S,EAAAE,WAAAwQ,iBACAjK,GAAAyK,GAEA1C,EAAAZ,EAAA5N,EAAAkD,MAAA0K,WACAK,GAAA,EACAlP,EAAAiB,EAAAmR,gBAAkDpS,EAAAiS,IAClDzS,EAAAyB,EAAAqM,OAAAE,QAAAxN,MACA0H,GAAAsE,EAAA/K,EAAA6S,OAAA7S,EAAAsD,KAAA8M,OAAApQ,EAAAsD,KAAA8M,QAAAxQ,EAAArB,KAAAQ,IACAiB,EAAA8G,MAAA9G,EAAA0N,UAAAC,aAHyD5O,GAAA,GAOzD0S,EAAAhN,MAAAzE,EAAA6S,OAAA7S,EAAAsD,KAAA8M,OAAApQ,EAAAsD,KAAA8M,OAAAzJ,EAAA6H,QAqDA,WACAxO,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA4P,4BACA9S,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAA6P,4BACA5C,EAAAtP,QAAA,SAAAlC,GACA+K,EAAA/K,EAAA,GAAAA,EAAA,SAGA,WACAuR,IACA,QAAAlQ,EAAAE,WAAA8S,cACAhT,EAAAiM,YAAAjM,EAAAiM,WAAAjB,WAAAkF,EAAAlF,WACAhL,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA+P,6BACAjT,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAgQ,6BACA3J,EAAA,EAAA2G,EAAAvJ,EAAA3G,EAAAmT,iBAAAjC,EAAA1C,KAGAxO,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA+P,6BACAjT,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAgQ,6BACA3J,EAAA2G,EAAAzJ,EAAAyJ,EAAAvJ,EAAAuJ,EAAApJ,MAAAoJ,EAAArJ,aArPA,WACA,GAAAjI,GAAAL,EAAAQ,EAAAqU,EAAAlI,EAAA8F,EAAApR,EAAAwQ,MAMA,IALAqB,EAAA5Q,QAAA,SAAAwS,GACA1M,EAAA0M,EAAA,GACAzF,EAAAyF,EAAA,GACA/C,EAAA+C,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEArT,EAAAE,WAAAoT,kBAAA,CAQA,IAPA7M,GAAA,EAAAzG,EAAA0N,UAAAC,WAAA3N,EAAAsR,gBACAtR,EAAAE,WAAAwQ,iBACAjK,GAAAyK,GAEAvK,EAAA,EAEAiH,EAAA5N,EAAA+R,yBACAhT,EAAAiB,EAAAmR,gBAAkDpS,EAAAiS,IAClDzS,EAAAyB,EAAAqM,OAAAE,QAAAxN,GACAmM,EAAAtL,EAAArB,GACAK,GACA0P,MAAApD,EAAAoD,MACAzP,KAAAqM,EAAArM,KACAiI,MAAAoE,EAAApE,MACA5D,MAAA,mBACAwJ,KAAA,SACA8D,MAAAzR,EACAwU,MAAAhV,GAEA6U,GAA4CA,iBAAAlI,EAAAoD,OAAApD,EAAArM,MAC5CuU,EAAApT,EAAA2I,UAAA,IAAAuC,EAAAlL,EAAA2I,UACA/J,EAAAoB,EAAA2I,UAAAuC,EAAAlL,EAAA2I,aACAlC,GAAAsE,EAAAqI,GAAA,MAAAxU,EAAAG,EAAAR,IACAyB,EAAA8G,MAAA9G,EAAA0N,UAAAC,aAhByD5O,GAAA,GAqBzD0H,EAAAuC,IACArK,GACAE,KAAA,GACAiI,MAAA9G,EAAAkD,MAAAsO,eACAtO,MAAA,gBACAsQ,cAAA,EACAxF,iBAAA,EACAtB,KAAA,SACA8D,MAAA5Q,EAAAwQ,QAEAzR,EAAAqB,EAAA2I,UAAA,mBACAoC,GAAkC0I,OAAA,KAAW,MAAA9U,GAAA,OAG7CqB,EAAAE,WAAAwQ,iBACAhC,GAAsCA,WAAA,IACtCA,EAAA1O,EAAA2I,UAAA,aACAlC,EAAA,EACA9H,GACAE,KAAA,aACAiI,MAAA9G,EAAAkD,MAAA0N,mBACA1N,MAAA,aACAwJ,KAAA,SACA8D,OAAA,GAEA7R,EAAAqB,EAAA2I,UAAA,aACAoC,EAAA2D,GAAA,MAAA/P,GAAA,WAmHA,WACA,GAAAqB,EAAA0T,cAAA,CACA,GAAAtK,IACAvC,OAAA7G,EAAA0T,cAAA7M,OACAC,MAAA9G,EAAA0T,cAAA5M,MACAL,EAAAzG,EAAA0T,cAAAjN,EAAAzG,EAAA0T,cAAAC,WAAAlN,EACAE,EAAA3G,EAAA0T,cAAA/M,EAAA3G,EAAA0T,cAAAC,WAAAhN,GAEAjI,GACAoI,MAAAkC,EACA4K,OAAA3K,EACAxC,EAAA,EACAE,EAAA,EAEA3G,GAAA+G,IAAAO,UAAAtH,EAAAkD,MAAA2Q,6BACA7T,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA4Q,yBACA9T,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAA6Q,yBACA,gBAAA/T,EAAAgU,UACA5K,EAAAtC,MAAAkC,EACAI,EAAA3C,EAAA,EACA/H,EAAAoI,MAAAkC,EACAtK,EAAAiI,EAAA3G,EAAA6R,YAAAlL,EACA2C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA7G,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA+Q,8BACAjU,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAgR,8BACAlU,EAAA6R,YAAA7G,WAAAhL,EAAA0T,cAAA1I,UACAhL,EAAA6R,YAAA7G,SAAA,IAAAhL,EAAA0T,cAAA1I,UACAtB,EAAAhL,EAAA,MAEiB,mBAAAsB,EAAAgU,UAAAhU,EAAA0T,gBACjBtK,EAAAvC,OAAAoC,EACAG,EAAAzC,EAAA,EACAjI,EAAAmI,OAAAoC,EACAvK,EAAA+H,EAAAzG,EAAA6R,YAAApL,EACA6C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA7G,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAA+Q,8BACAjU,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAgR,8BACAlU,EAAA6R,YAAA3F,cAAAlM,EAAA0T,cAAAxH,aACAlM,EAAA6R,YAAA3F,YAAA,IAAAlM,EAAA0T,cAAAxH,aACAxC,EAAAhL,EAAA,UA5kBA,WACA,GAAA4H,IACAG,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA5D,MAAA,uBAEA7D,GACAoH,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA5D,MAAA,yBAEAiR,GACA1N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA5D,MAAA,uBAEAkR,GACA3N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA5D,MAAA,yBAEAmR,GACA5N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA0E,UAAA,EACA8I,mBAAA,EACApR,MAAA,qBAEAxE,EAAA,EAAAsB,EAAAkD,MAAAqR,mBACA3V,EAAA,GAAAoB,EAAAkD,MAAAqR,kBACAvU,GAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAsR,qBACAxU,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAAuR,qBAEAnO,EAAAG,GAAAuC,EAAAhJ,EAAAkD,MAAAsO,eAAAxR,EAAAkD,MAAAuR,qBAAA7V,EACA0H,EAAAK,GAAAmL,EACAxL,EAAAQ,MAAA9G,EAAAkD,MAAAsO,eAAAxR,EAAAkD,MAAAuR,qBAAA7V,EACA0H,EAAAO,OAAAoC,EAAA6I,EAAA9R,EAAAkD,MAAAsO,eAAA5S,EAAAF,EACAsB,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAwR,yBACApL,EAAAhD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAAnI,GACA6K,EAAAjD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAAnI,GAEAyV,EAAA1N,EAAAH,EAAAG,EAAAzG,EAAAkD,MAAAqR,mBACAJ,EAAAxN,EAAAmL,EAAA9R,EAAAkD,MAAAqR,oBACAjO,EAAAO,OAAA7G,EAAA0N,UAAAiH,kBACA3U,EAAA0N,UAAAD,UAAAzN,EAAA0N,UAAAkH,cACAT,EAAArN,MAAA9G,EAAAkD,MAAA2R,kBACAV,EAAAtN,OAAA7G,EAAA0N,UAAAiH,gBACA3U,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAA4R,kBACA,WAAA1Q,KAAAwN,EAAAvR,WACAL,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAA6R,sBAEAZ,EAAAtN,OAAAP,EAAAO,SACAkC,EAAAoL,EAAA1N,EAAA0N,EAAAxN,EAAAwN,EAAArN,MAAAqN,EAAAtN,OAAA7G,EAAAkD,MAAA8R,0BACAhV,EAAA+G,IAAAmB,SACAlI,EAAA+G,IAAAoB,QAGA9I,EAAAoH,GAAAyK,EACA7R,EAAAsH,GAAAsC,EAAAjJ,EAAAkD,MAAAsO,eAAA5S,EACAS,EAAAyH,MAAAkC,EAAAhJ,EAAAkD,MAAAsO,eAAAN,EAAAtS,EAAAF,EACAW,EAAAwH,OAAA7G,EAAAkD,MAAAsO,eAAAxR,EAAAkD,MAAAuR,qBAAA7V,EACAoB,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAwR,yBACApL,EAAAjK,EAAAoH,EAAApH,EAAAsH,EAAAtH,EAAAyH,MAAApI,EAAAW,EAAAwH,QACA0C,EAAAlK,EAAAoH,EAAApH,EAAAsH,EAAAtH,EAAAyH,MAAApI,EAAAW,EAAAwH,QAEAuN,EAAAzN,EAAAtH,EAAAsH,EAAA3G,EAAAkD,MAAAqR,mBACAH,EAAA3N,EAAAyK,EAAAlR,EAAAkD,MAAAqR,oBACAlV,EAAAyH,MAAA9G,EAAA0N,UAAAuH,iBACAjV,EAAA0N,UAAAC,WAAA3N,EAAA0N,UAAAwH,aACAd,EAAAtN,MAAA9G,EAAA0N,UAAAuH,eACAb,EAAAvN,OAAA7G,EAAAkD,MAAA2R,kBACA7U,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAA4R,kBACA,aAAA1Q,KAAAwN,EAAAvR,WACAL,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAA6R,sBAEAX,EAAAtN,MAAAzH,EAAAyH,QACAiC,EAAAqL,EAAA3N,EAAA2N,EAAAzN,EAAAyN,EAAAtN,MAAAsN,EAAAvN,OAAA7G,EAAAkD,MAAA8R,0BACAhV,EAAA+G,IAAAmB,SACAlI,EAAA+G,IAAAoB,QAGAnI,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAiS,2BACAnV,EAAA+G,IAAAO,UAAAtH,EAAAkD,MAAAkS,+BACAf,EAAA5N,EAAApH,EAAAoH,EAAApH,EAAAyH,MAAApI,EACA2V,EAAA1N,EAAAL,EAAAK,EAAAL,EAAAO,OAAAnI,EACA2V,EAAAvN,MAAA9G,EAAAkD,MAAAsO,eAAAxR,EAAAkD,MAAAuR,qBACAJ,EAAAxN,OAAA7G,EAAAkD,MAAAsO,eAAAxR,EAAAkD,MAAAuR,qBACA1L,EAAAsL,EAAA5N,EAAA4N,EAAA1N,EAAA0N,EAAAvN,MAAAuN,EAAAxN,OAAA,GACA7G,EAAA+G,IAAAmB,SACAlI,EAAA+G,IAAAoB,OACAnI,EAAA2O,aAAAC,QAAAtI,GACAtG,EAAA2O,aAAAC,QAAAuF,GACAnU,EAAA2O,aAAAC,QAAAvP,GACAW,EAAA2O,aAAAC,QAAAwF,GACApU,EAAA2O,aAAAC,QAAAyF,GACArU,EAAA0N,UAAA2H,KACA/O,IACA2C,EAAA5J,GAEAW,EAAA0N,UAAA4H,KACAhP,EAAA6N,EACAlL,EAAAmL,MAmjBArF,GACA/O,EAAA6E,QAAA,GAnFA,WACA7E,EAAA+G,IAAA8H,UAAA7O,EAAAkD,MAAAqS,gBACAvV,EAAA+G,IAAAS,YAAAxH,EAAAkD,MAAAsS,gBACAjM,EAAA,IAAAvJ,EAAA8G,MAAA9G,EAAA6G,WAuBA,WACA8D,EAAAC,EAAAC,GAAAoH,YAAAC,MAAAvS,CACA,IAAAf,EACAoB,GAAAE,WAAAuV,QACAzV,EAAA+G,IAAA6I,KAAA,kBACAhR,KACAA,EAAA8W,MAAA/K,EAAAgL,OAAA,SAAAlF,EAAArH,GACA,MAAAqH,GAAArH,GACqB,GAAAuB,EAAAyF,QAAAwF,QAAA,GACrB,OACAjL,EAAAkL,IAAA,SAAApF,GAAuD,MAAAA,GAAAmF,QAAA,KAAuBE,KAAA,UAC9ElX,EAAAmX,WAAA/W,OAAA+G,KAAA/F,EAAAgG,gBAAAoK,OACAxR,EAAA8O,UAAA1N,EAAA0N,UAAAqC,WACAnR,EAAAoX,YAAA,WAAsChW,EAAAyS,eAAA,aAAAzS,EAAAmR,gBAAA,IACtCvS,EAAAqX,YAAA,WAAsCjW,EAAAwS,eAAA,aAAAxS,EAAAsR,gBAAA,IACtC1S,EAAAsX,aAAA,WAAuClW,EAAA4G,gBAAA,aAAA5G,EAAA0G,iBAAA,IACvC9H,EAAAuX,oBAAAnW,EAAAmW,oBACAnW,EAAAmW,oBAAA1P,EAAA,KAAAzG,EAAAmW,oBAAAxP,EAAA,GACA/H,EAAAwX,KAAA,aAA+BpW,EAAA8G,MAAA,eAAA9G,EAAA6G,OAAA,IAC/BjI,EAAAyX,MAAA,SAAgCrW,EAAAqW,MAAA5P,EAAA,UAAAzG,EAAAqW,MAAA1P,EAAA,IAChC/H,EAAA0X,MAAAtW,EAAAuW,WACA,SAAiCvW,EAAAuW,WAAA9P,EAAA,UAAAzG,EAAAuW,WAAA5P,EAAA,IAAjC,GACA/H,EAAA4X,SAAAxW,EAAA2O,aAAAyB,OACAxR,EAAA6X,SAAAzW,EAAAyW,SACA7X,EAAAoV,SAAAhU,EAAAgU,SACAhU,EAAA6R,cACAjT,EAAAsN,YAAAlM,EAAA6R,YAAA3F,YACAtN,EAAAoM,SAAAhL,EAAA6R,YAAA7G,SACApM,EAAAsP,gBAAAlO,EAAA6R,YAAA3D,gBACAtP,EAAAuP,aAAAnO,EAAA6R,YAAA1D,aACAvP,EAAAyB,QAAAL,EAAA6R,YAAAxR,QACAzB,EAAA8X,YAAA1W,EAAA6R,YAAA6E,YACA9X,EAAAsE,MAAAlD,EAAA6R,YAAA3O,MACAtE,EAAA8N,KAAA1M,EAAA6R,YAAAnF,MAEA1M,EAAA+G,IAAAmI,OACAlQ,OAAA+G,KAAAnH,GAAAiC,QAAA,SAAAiE,EAAA0L,GACA,GAAA9R,GAAAoG,EAAA,KAAAlG,EAAAkG,EAEA9E,GAAA+G,IAAAO,UAAA,2BACAgC,EAAA4H,EAFA,MAEAV,EAAA,IAFA,IAGAxQ,EAAA+G,IAAAO,UAAA,mBACAkC,EAAA9K,EAAAwS,EAAA,EAAAY,EAJA,GAIAtB,KAEAxQ,EAAA+G,IAAAsJ,cAiBArQ,EAAAqD,cAAA,iBACArD,EAAA+G,IAAAsJ,eAGCjQ,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,ILmiBK,SAAU/B,EAAQD,EAASM,GM/6CjC,GAAAyB,GAAAC,CAEAD,UA88BCE,MA98BDD,EAAA,WACA,YACA,iBAAAE,GAUA,QAAA2W,GAAAC,EAAAC,GACA,GAAAlX,EACA,gBAAAiX,GAAA,KAAAA,EAA6DC,EAC7D,IAAAzS,KAAAwS,IACAjX,EAAAmX,WAAAF,EAAA,IACAC,GAAA,IAAAlX,IAEAmX,WAAAF,EAAA,IAhBA,GAOAG,GAPAC,GAA0BvQ,EAAA,EAAAE,EAAA,EAAA8G,UAAA,EAAAE,WAAA,GAC1BsJ,GAA8BtJ,WAAA,EAAAF,UAAA,GAC9ByJ,GAA0BvJ,WAAA,EAAAF,UAAA,GAC1B0J,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAEAC,EAAA,CAUAvX,GAAAwX,YAAA,SAAA9T,GACA,GAAA+T,GAAAzX,EAAA0X,OAAAC,wBACAhO,GACAlD,EAAA/C,EAAAkU,QAAA,GAAAC,QAAAJ,EAAAK,KACAnR,EAAAjD,EAAAkU,QAAA,GAAAG,QAAAN,EAAAO,IAMA,OAJAhY,GAAA0R,cACA/H,EAAAlD,GAAAzG,EAAA0G,iBACAiD,EAAAhD,GAAA3G,EAAA4G,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACA8Q,SAGAzX,EAAAiY,aAAA,WACAd,GAAAH,EAAArJ,WAAAuJ,EAAAvJ,aAAAqJ,EAAApN,EAAAsN,EAAAtN,GACAwN,GAAAJ,EAAAvJ,UAAAyJ,EAAAzJ,YAAAuJ,EAAApN,EAAAsN,EAAAtN,GACAsN,GACAvJ,WAAAqJ,EAAArJ,WACAF,UAAAuJ,EAAAvJ,UACA7D,EAAAqI,YAAAC,MAAA,KAGAlS,EAAAkY,UAAA,SAAAxU,GACA,kBACAyU,cAAAnY,EAAAoY,iBACA,IAAAzO,GAAA3J,EAAAwX,YAAA9T,EACA2U,MAAAC,IAAAtB,EAAAvQ,GAAA4R,KAAAC,IAAAtB,EAAArQ,GAAA3G,EAAAE,WAAAqY,gBACAlB,EAAArX,EAAAwY,UAAA7O,EAAAlD,EAAAkD,EAAAhD,GACA3G,EAAAyY,UAAA/U,EAAAiG,GACA3J,EAAA0Y,UAAAhV,EAAAiG,GACA3J,EAAAyY,UAAA/U,EAAAiG,GACA3J,EAAAoD,UAIApD,EAAA2Y,WAAA,SAAAjV,GACA2T,GAAA,EACArX,EAAAuW,WAAAvW,EAAAwX,YAAA9T,GACA4T,EAAAtX,EAAAwY,UAAAxY,EAAAuW,WAAA9P,EAAAzG,EAAAuW,WAAA5P,GAAA,GACA3G,EAAAqD,cAAA,cAAkDuV,YAAAlV,EAAA0C,KAAApG,EAAAsX,iBAClDtX,EAAA6Y,gBAAAnV,GACAA,EAAAoV,iBACA9Y,EAAA+Y,kBACApL,WAAA3N,EAAA0N,UAAAC,WACAF,UAAAzN,EAAA0N,UAAAD,UACA7D,EAAAqI,YAAAC,MAAA,KAEA8E,GACAvQ,EAAAzG,EAAAuW,WAAA9P,EACAE,EAAA3G,EAAAuW,WAAA5P,EACAgH,WAAA3N,EAAA0N,UAAAC,WACAF,UAAAzN,EAAA0N,UAAAD,UACA7D,EAAA,GAEA5J,EAAAgZ,UAAAtV,GACAuV,aAAAjZ,EAAAkZ,cACAf,cAAAnY,EAAAoY,kBACApY,EAAAkZ,aAAAC,WAAAnZ,EAAAkY,UAAAxU,GAAA1D,EAAAE,WAAAkZ,mBACApZ,EAAAoY,iBAAAiB,YAAArZ,EAAAiY,aAAA,IACAjY,EAAAsZ,oBAAA,EACAC,SAAAC,KAAAC,iBAAA,YAAAzZ,EAAAgZ,WAAyEU,SAAA,IACzEH,SAAAC,KAAAC,iBAAA,WAAAzZ,EAAA2Z,UAAA,GACAJ,SAAAC,KAAAC,iBAAA,cAAAzZ,EAAA4Z,aAAA,KAEA5Z,EAAA6Z,OAAA,SAAAjQ,EAAAR,EAAAzK,EAAAC,GACA,MAAAD,IAAAiL,EAAAhL,IAAA,EAAAgL,GAAAR,GAEApJ,EAAA8Z,kBAAA,WACA,IAAA9Z,EAAA0X,SAAA1X,EAAA0N,UAAAqM,SAA2D,MAAApI,uBAAA3R,EAAA8Z,kBAC3D,IAAArT,GACAE,EAGAiD,EAFAvK,EAAA4S,YAAAC,MAAA,IACAtT,EAAAoB,EAAAE,WAAA8Z,gCAAA,GAIA,IAFAhD,EAAApN,EAAAoN,EAAApN,GAAAvK,EAAAT,GACAgL,EAAAvK,EAAA2X,EAAApN,EAAA,GACA,GAAA5J,EAAAsZ,oBAAA/B,EAAA,IAIA,MAHAA,GAAA,EACAvX,EAAAsZ,oBAAA,OACArC,GAAkCtJ,YAAA,EAAAF,WAAA,GAGlC8J,IAAA,EACA9Q,EAAAzG,EAAA6Z,OAAAjQ,EAAAoN,EAAArJ,YAAAsJ,EAAAtJ,WAAA/O,GACA+H,EAAA3G,EAAA6Z,OAAAjQ,EAAAoN,EAAAvJ,WAAAwJ,EAAAxJ,UAAA7O,GACAoB,EAAA0N,UAAAqM,SAAAtT,EAAAE,GACAgL,sBAAA3R,EAAA8Z,oBAEA9Z,EAAA2Z,SAAA,SAAAjW,GACA,IAAA1D,EAAAqD,cAAA,YAAgDuV,YAAAlV,IAAhD,CACA,GAAAuW,GAAA5B,KAAAC,IAAAtB,EAAAvQ,GAAA4R,KAAAC,IAAAtB,EAAArQ,GAAA3G,EAAAE,WAAAqY,cACA5O,GACAlD,EAAAzG,EAAAuW,WAAA9P,EAAAuQ,EAAAvQ,EACAE,EAAA3G,EAAAuW,WAAA5P,EAAAqQ,EAAArQ,GAEAP,EAAApG,EAAAwY,UAAA7O,EAAAlD,EAAAkD,EAAAhD,EACA3G,GAAAyW,WACAY,EACArX,EAAAka,QAAAxW,EAAA1D,EAAAuW,YACa0D,IACb7T,EAAA4F,OACAhM,EAAAma,YAAA/T,EAAA8F,YAAA9F,EAAA4E,WAEAhL,EAAA0Y,UAAAhV,EAAA1D,EAAAuW,YACAvW,EAAAka,QAAAxW,EAAA1D,EAAAuW,YACAvW,EAAAoa,MAAA1W,EAAA1D,EAAAuW,cAGAc,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAra,EAAAgZ,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAra,EAAA2Z,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAra,EAAA4Z,aAAA,GACAX,aAAAjZ,EAAAkZ,cACAf,cAAAnY,EAAAoY,kBACApY,EAAAiY,eACAhB,EAAAtJ,WAAAwJ,EAAAnX,EAAAE,WAAAoa,yBACArD,EAAAxJ,UAAA2J,EAAApX,EAAAE,WAAAoa,yBACAta,EAAAsZ,oBAAA,EACA,IAAA/B,GAAA,WAAAnT,KAAAkT,EAAApU,QAAA+W,GACAja,EAAA8Z,uBAGA9Z,EAAAgZ,UAAA,SAAAtV,GACA,GAAA9E,GAAAoB,EAAAwX,YAAA9T,EACA1D,GAAAqD,cAAA,aAAiDuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,gBACjD7R,EAAA6Y,gBAAAnV,GACAA,EAAAoV,iBACA9Y,EAAAyW,WACAO,GACAvQ,EAAA7H,EAAA6H,EAAAzG,EAAAuW,WAAA9P,EACAE,EAAA/H,EAAA+H,EAAA3G,EAAAuW,WAAA5P,EACAgH,WAAA3N,EAAA0N,UAAAC,WACAF,UAAAzN,EAAA0N,UAAAD,UACA7D,EAAA,GAEA,mBAAAxF,KAAAkT,EAAApU,OACAlD,EAAA0N,UAAAD,UAAAzN,EAAA0N,UAAAkH,cAAAhW,EAAA+H,EAAA3G,EAAA6G,QACa,qBAAAzC,KAAAkT,EAAApU,OACblD,EAAA0N,UAAAC,WAAA3N,EAAA0N,UAAAwH,aAAAtW,EAAA6H,EAAAzG,EAAA8G,OACauQ,GACbrX,EAAAyY,UAAA/U,EAAA9E,GACAoB,EAAAoD,QAEA,IAAAmU,GACAvX,EAAA0N,UAAAqM,SAAA/Z,EAAA+Y,iBAAApL,WAAAqJ,EAAAvQ,EACAzG,EAAA+Y,iBAAAtL,UAAAuJ,EAAArQ,MAIA3G,EAAA4Z,YAAA,SAAAlW,GACA1D,EAAAqD,cAAA,eAAmDuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eACnD7R,EAAAyW,WACAzW,EAAA2Z,SAAAjW,GACA2T,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAra,EAAAgZ,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAra,EAAA2Z,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAra,EAAA4Z,aAAA,KAGA5Z,EAAA6Y,gBAAA,SAAAnV,GAA6CA,EAAAmV,mBAC7C7Y,EAAAyZ,iBAAA,SAAA1M,EAAAwN,GACAva,EAAAwa,OAAAzN,GAAA/M,EAAAwa,OAAAzN,OACA/M,EAAAwa,OAAAzN,GAAA6B,QAAA2L,IAEAva,EAAAqa,oBAAA,SAAAtN,EAAAwN,IACAva,EAAAwa,OAAAzN,QAAAlM,QAAA,SAAA4Z,EAAAC,GACAH,IAAAE,GACAza,EAAAwa,OAAAzN,GAAA4N,OAAAD,EAAA,MAIA1a,EAAAqD,cAAA,SAAA0J,EAAArJ,GAEA,QAAAoV,KACA8B,GAAA,EAFA,GAAAA,EAIA,IAAA5a,EAAAwa,OAAAzN,GAMA,MALA/M,GAAAwa,OAAAzN,GAAAlM,QAAA,SAAA0Z,GACA7W,EAAAqD,IAAA/G,EAAA+G,IACArD,EAAAoV,iBACAyB,EAAAna,MAAAJ,EAAAU,MAAAgD,MAEAkX,GAEA5a,EAAA6a,iBAAA,WACA7a,EAAA8a,iBACA9a,EAAA+a,yBAEA/a,EAAA8G,MAAA6P,EAAA3W,EAAAkD,MAAA4D,MAAA9G,EAAA+a,wBAAAlN,aACA7N,EAAA6G,OAAA8P,EAAA3W,EAAAkD,MAAA2D,OAAA7G,EAAA+a,wBAAAjN,gBAKA9N,EAAA8G,MAAA9G,EAAAgb,cAAAnN,YACA7N,EAAA6G,OAAA7G,EAAAgb,cAAAlN,cAEA9N,EAAA0X,OAAAxU,MAAA4D,MAAA9G,EAAA8G,MAAA,KACA9G,EAAA0X,OAAAxU,MAAA2D,OAAA7G,EAAA6G,OAAA,KACA7G,EAAA0X,OAAA5Q,MAAA9G,EAAA8G,MAAA5F,OAAAoR,iBACAtS,EAAA0X,OAAA7Q,OAAA7G,EAAA6G,OAAA3F,OAAAoR,kBAEAtS,EAAA0G,iBAAA1G,EAAAQ,KAAAkG,kBAAA,EACA1G,EAAA4G,gBAAA5G,EAAAQ,KAAAoG,iBAAA,GAEA5G,EAAA6E,OAAA,SAAAoW,GACA,GAEArG,GACAM,EAHAgG,EAAA,EAAAlb,EAAAkD,MAAAgK,gBACAiO,EAAA,EAAAnb,EAAAkD,MAAAkY,4BAGAtJ,EAAA9R,EAAA+R,yBACAb,EAAAlR,EAAAgS,0BAgDA,OA5CAhS,GAAA0R,aACA1R,EAAA8G,MAAA9G,EAAA2E,WAAAkJ,YACA7N,EAAA6G,OAAA7G,EAAA2E,WAAAmJ,cAEA9N,EAAA6a,mBAEAjG,EAAA5U,EAAAsD,KAAAqS,OAAA,SAAA0F,EAAArO,GACA,MAAAqO,IACArb,EAAA8M,MAAAR,KAAAU,EAAAhN,EAAA2I,YAAA3I,EAAAkD,MAAA0K,aACA5N,EAAA8M,MAAAmE,MAAAjE,EAAAhN,EAAA2I,YAAA,GACAuS,GACa,MACbhG,EAAAlV,EAAAoS,mBAAAuD,OAAA,SAAA0F,EAAAC,GACA,MAAAA,GAAAC,OAAoCF,EACpCA,GAAArb,EAAA8M,MAAAP,QAAA+O,EAAAtb,EAAA2I,YAAA2S,EAAAxU,OAAA9G,EAAAkD,MAAA+J,aAAAiO,GACa,MACblb,EAAAE,WAAA0S,aACAgC,GAAA5U,EAAAkD,MAAA0K,WAAAsN,GAEAlb,EAAA0N,UAAA5G,MAAA9G,EAAA8G,MAAAoK,EACAlR,EAAA0N,UAAA7G,OAAA7G,EAAA6G,OAAAiL,EAAAqJ,EACAnb,EAAA0N,UAAAsK,IAAAlG,EAAAqJ,EACAnb,EAAA0N,UAAAoK,KAAA5G,EACAlR,EAAA0N,UAAAkH,eAAA5U,EAAAkD,MAAAsO,eAAAxR,EAAA0N,UAAA7G,OACA7G,EAAA0N,UAAAwH,cAAAlV,EAAAkD,MAAAsO,eAAAxR,EAAA0N,UAAA5G,MACA9G,EAAA0N,UAAA8N,eAAAxb,EAAA0N,UAAA5G,MA1BA,KA2BA9G,EAAA0N,UAAAwH,YAAAlV,EAAA0N,UAAA5G,MA3BA,IA4BA9G,EAAA0N,UAAAuH,eAAAjV,EAAA0N,UAAA5G,MACA9G,EAAA0N,UAAA8N,cACAxb,EAAAkD,MAAAsO,eACAxR,EAAA0N,UAAA+N,gBAAAzb,EAAA0N,UAAA7G,OAhCA,KAiCA7G,EAAA0N,UAAAkH,cAAA5U,EAAA0N,UAAA7G,OAjCA,KAkCA7G,EAAA0N,UAAAiH,gBAAA3U,EAAA0N,UAAA7G,OACA7G,EAAA0N,UAAA+N,eACAzb,EAAAkD,MAAAsO,eACAxR,EAAA0N,UAAAuH,eAAAoD,KAAAqD,IAAA1b,EAAA0N,UAAAuH,eAAAjV,EAAAkD,MAAAyY,qBACA3b,EAAA0N,UAAAiH,gBAAA0D,KAAAqD,IAAA1b,EAAA0N,UAAAiH,gBAAA3U,EAAAkD,MAAAyY,qBACA3b,EAAA4b,KAAA5b,EAAAmN,YAAAiD,OAAA,EAAApQ,EAAAE,WAAA2b,kBACA7b,EAAA8b,kBACA9b,EAAA+b,QAAA,GACAd,GACAjb,EAAAoD,MAAA,GAEApD,EAAAqD,cAAA,cACA,GAEArD,EAAA+b,OAAA,SAAArY,EAAAsY,GACA,GAAApc,GAAAI,EAAAoS,mBACA8I,EAAA,EAAAlb,EAAAkD,MAAAgK,eAKA,KAJAlN,EAAAyS,eAAA,EACAzS,EAAAwS,eAAA,EACAxS,EAAAmR,gBAAA,EACAnR,EAAAsR,gBAAA,EACAtR,EAAAwS,eAAAxS,EAAA0N,UAAAD,WAAAzN,EAAAyS,eAAAzS,EAAAsD,KAAA8M,QACApQ,EAAAwS,iBACAxS,EAAA8M,MAAAR,KAAAtM,EAAAsD,KAAAtD,EAAAyS,gBAAAzS,EAAA2I,YAAA3I,EAAAkD,MAAA0K,aACA5N,EAAA8M,MAAAmE,MAAAjR,EAAAsD,KAAAtD,EAAAyS,gBAAAzS,EAAA2I,YAAA,GACAuS,EACAlb,EAAAyS,gBAAA,CAEA,MAAAzS,EAAAsR,gBAAAtR,EAAA0N,UAAAC,YAAA3N,EAAAmR,gBAAAvR,EAAAwQ,QACApQ,EAAAsR,iBACAtR,EAAA8M,MAAAP,QAAA3M,EAAAI,EAAAmR,iBAAAnR,EAAA2I,YAAA/I,EAAAI,EAAAmR,iBAAArK,MACA9G,EAAAmR,iBAAA,CAEAnR,GAAAsD,KAAA8M,OAAA,IACApQ,EAAAmR,gBAAAkH,KAAAqD,IAAA1b,EAAAmR,gBAAA,KACAnR,EAAAsR,gBAAA+G,KAAAqD,IAAA1b,EAAAsR,iBACAtR,EAAA8M,MAAAP,QAAA3M,EAAAI,EAAAmR,iBAAAnR,EAAA2I,YAAA/I,EAAAI,EAAAmR,iBAAArK,OAAA,GACA9G,EAAAyS,eAAA4F,KAAAqD,IAAA1b,EAAAyS,eAAA,KACAzS,EAAAwS,eAAA6F,KAAAqD,IAAA1b,EAAAwS,gBACAxS,EAAA8M,MAAAR,KAAAtM,EAAAsD,KAAAtD,EAAAyS,gBAAAzS,EAAA2I,YAAA3I,EAAAkD,MAAA0K,aACA5N,EAAA8M,MAAAmE,MAAAjR,EAAAsD,KAAAtD,EAAAyS,gBAAAzS,EAAA2I,YAAA,OAEA3I,EAAA8J,iBACAkS,GACAhc,EAAAoD,MAAA,GAIAuO,sBAAA3R,EAAA8b,iBACA9b,EAAAqD,cAAA,UAA0C2U,IAAAhY,EAAA0N,UAAAD,UAAAqK,KAAA9X,EAAA0N,UAAAC,cAE1C3N,EAAAyY,UAAA,SAAA/U,EAAAuY,GACA,IAAAjc,EAAAkc,cAAAlc,EAAAmc,MAAA,CAGAnc,EAAAqW,MAAA4F,GAAAjc,EAAAoc,YAAA1Y,EACA,IACAnF,GAEA8d,EACAC,EAIAC,EARAC,EAAA9Y,EAAA+Y,YAAA/Y,EAAAgZ,SAAA1c,EAAAE,WAAAyc,wBAEA/c,EAAAI,EAAA4c,YAGAnW,EAAAzG,EAAAqW,MAAA5P,EACAE,EAAA3G,EAAAqW,MAAA1P,EACA5H,EAAAiB,EAAAwY,UAAA/R,EAAAE,GAEAoG,GAAsB6L,YAAAlV,EAAA0C,KAAArH,EAAA0H,IAAAE,KACtBkW,EAAA7c,EAAA6R,WAKA,IAJAoH,aAAAjZ,EAAA8c,aACA9c,EAAA+c,UAAgCtW,IAAAE,QAChC3G,EAAAyW,UAAA,IAEAzW,EAAAqD,cAAA,YAAA0J,KAGAhO,GAAAiB,EAAA6R,cAAA7R,EAAA6R,YAAA7G,WAAAjM,EAAAiM,UACAhL,EAAA6R,YAAA3F,cAAAnN,EAAAmN,eACAlM,EAAAgd,qBAAA,EACAjQ,EAAA3G,KAAAyW,EACA7c,EAAAqD,cAAA,eAAA0J,GACAA,EAAA3G,KAAArH,EACAiB,EAAAqD,cAAA,gBAAA0J,IAEA/M,EAAA6R,YAAA9S,EACAiB,EAAAyW,UAAA,CAIA,GADAzW,EAAA+L,WACA/L,EAAAid,cACAle,IACA,IAAAiB,EAAAkd,YAAArR,QAAA9M,EAAAsB,WACAL,EAAAmd,SAAApe,EACAiB,EAAAgU,SAAAjV,EAAA2X,YACA1W,EAAA0X,OAAAxU,MAAAka,OAAAre,EAAAsB,QACA,SAAAtB,EAAAsB,SAAAtB,EAAAuE,OACAtD,EAAA0X,OAAAxU,MAAAka,OAAA,UACApd,EAAA+L,OAAAhN,EAAAuE,KAAAtD,EAAA2I,YAAA5J,EAAAmN,eAEAlM,EAAAqd,WAAArd,EAAA0T,gBACA,SAAA3U,EAAAsB,SACAtB,EAAAuE,MAAA,CA4CA,GA3CAgZ,EAAAtc,EAAAsd,qBACAf,GACA9V,EAAA4R,KAAAC,IAAAtY,EAAAud,UAAA9W,KACAE,EAAA0R,KAAAC,IAAAtY,EAAAud,UAAA5W,OAEA,IAAA3G,EAAAwd,gBAAAtR,aAAAxI,EAAA+Z,WACAzd,EAAAwd,iBACAxS,SAAAhL,EAAAiM,WAAAjB,SACAkB,YAAAlM,EAAAiM,WAAAC,cAGAmQ,GACArE,IAAAK,KAAAqF,IAAA1d,EAAAwd,gBAAAxS,SAAAjM,EAAAiM,UACA8M,KAAAO,KAAAqF,IAAA1d,EAAAwd,gBAAAtR,YAAAnN,EAAAmN,aACAyR,OAAAtF,KAAAqD,IAAA1b,EAAAwd,gBAAAxS,SAAAjM,EAAAiM,UACA4S,MAAAvF,KAAAqD,IAAA1b,EAAAwd,gBAAAtR,YAAAnN,EAAAmN,eAEA,IAAAlM,EAAAwd,gBAAAtR,cACAmQ,EAAAvE,MAAA,EACAuE,EAAAuB,MAAAhe,EAAAwQ,OAAA,EACAiM,EAAArE,IAAAK,KAAAqF,IAAApB,EAAAtE,IAAAjZ,EAAAiM,UACAqR,EAAAsB,OAAAtF,KAAAqD,IAAAY,EAAAqB,OAAA5e,EAAAiM,WAEAhL,EAAAwd,gBAAAxS,WAAAjM,EAAAiM,UACAhL,EAAAwd,gBAAAtR,cAAAnN,EAAAmN,cACAlM,EAAA6d,iBAAA,IAEA7d,EAAAgd,qBAAA,IAAAT,EAAA9V,GAAA,IAAA8V,EAAA5V,GAAA,QAAA3G,EAAAE,WAAA8S,iBACA,QAAAhT,EAAAE,WAAA8S,gBAAA,IAAAhT,EAAAwd,gBAAAtR,YACAlM,EAAA8d,UAAA/e,EAAAiM,SAAAwR,EAAA,SAEAxc,EAAA+d,wBAAAhe,KAAAhB,EAAAiM,UAKAhL,EAAA4L,WAAA7M,EAAAiM,UAAAhL,EAAA4L,WAAA7M,EAAAiM,eACA,IAAAhL,EAAA4L,WAAA7M,EAAAiM,UAAAa,QAAA9M,EAAAmN,cACAlM,EAAA4L,WAAA7M,EAAAiM,UAAAvG,KAAA1F,EAAAmN,cANAlM,EAAA4L,WAAA7M,EAAAiM,YAAA,IAAAhL,EAAA4L,WAAA7M,EAAAiM,UAAAa,QAAA9M,EAAAmN,cACAlM,EAAA4L,WAAA7M,EAAAiM,UAAA2P,OAAA3a,EAAA4L,WAAA7M,EAAAiM,UAAAa,QAAA9M,EAAAmN,aAAA,MAUAlM,EAAAge,iBAAA3B,EAAArE,MAAAhY,EAAAge,gBAAAhG,KACAqE,EAAAvE,OAAA9X,EAAAge,gBAAAlG,MACAuE,EAAAsB,SAAA3d,EAAAge,gBAAAL,QACAtB,EAAAuB,QAAA5d,EAAAge,gBAAAJ,OAAApB,GAGA,GAFAxc,EAAA4L,cACA0Q,EAAAD,EACA,QAAArc,EAAAE,WAAA8S,cACA,IAAAzU,EAAA+d,EAAAtE,IAAiDzZ,GAAA+d,EAAAqB,OAAqBpf,GAAA,EACtEyB,EAAA8d,UAAAvf,GAAA,eAGAyB,GAAAie,WAAA3B,GAAA,EAGAtc,GAAAke,eAAAxa,EAAA+C,EAAAE,EAAA6V,GAGAxc,EAAAgd,qBAAA,EACAhd,EAAAoD,MAAA,MAEApD,EAAAoa,MAAA,SAAA1W,EAAAuY,GASA,QAAAkC,KACAC,GACApe,EAAAqD,cAAA,oBACAgb,aAAAre,EAAAse,kBACA1S,WAAA5L,EAAA4L,WACAoS,gBAAAhe,EAAAge,kBAbA,GAAAzf,GACA6f,EACA5B,EAAA9Y,EAAA+Y,YAAA/Y,EAAAgZ,SAAA1c,EAAAE,WAAAyc,wBACAhT,EAAAsS,GAAAjc,EAAAoc,YAAA1Y,EAEA,IADA1D,EAAA6R,YAAA7R,EAAAwY,UAAA7O,EAAAlD,EAAAkD,EAAAhD,OACA5G,KAAAC,EAAA6R,YAAApC,KAAA,CAcA,GAHAzP,EAAAmc,OACAnc,EAAAue,UAEAve,EAAA6d,gBAEA,YADA7d,EAAA6d,iBAAA,EAIA,IADAtf,EAAAyB,EAAA6R,aACA7R,EAAAqD,cAAA,SAA6CuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eAC7C7R,EAAAyW,SAAA,CAGA,YAAAzW,EAAA6R,YAAAxR,QAAA,CACA,kBAAAL,EAAA6R,YAAA3O,MAIA,MAHAlD,GAAAuT,MAAAvT,EAAA2I,SAAA,MAAA3I,EAAAwe,QAAA1a,QACA9D,EAAAye,gBACAN,IAGA,yBAAAne,EAAA6R,YAAA3O,MAAA,CACA,YAAAlD,EAAAE,WAAAwe,0BAQA,MAPA1e,GAAA2P,UAAApR,EAAA2M,OAAArM,KACAmB,EAAA6H,eAAA,QAAA7H,EAAA6H,eAAA,aAEA7H,EAAA6H,eAAA,MAEA7H,EAAAuT,MAAAhV,EAAA2M,OAAArM,KAAAmB,EAAA6H,oBACAsW,IAGA,eAAAne,EAAAE,WAAAwe,0BAIA,MAHA1e,GAAA2e,aAAApgB,EAAA2M,OAAAsF,MAAAgM,EAAA9Y,EAAA+Z,UAAA,GACAU,QACAne,GAAAoD,OAQA,IAJA,yCAAAyI,QAAA7L,EAAA6R,YAAA3O,QAAAsZ,GACAxc,EAAA4e,cAAArgB,EAAA2N,YAAA3N,EAAAyM,UAEAhL,EAAA4L,WAAArN,EAAAyM,UAAAhL,EAAA4L,WAAArN,EAAAyM,cACA,QAAAhL,EAAAE,WAAA8S,eAAA,kBAAAhT,EAAA6R,YAAA3O,MAAA,CACA,qBAAAlD,EAAA6R,YAAA3O,OACAlD,EAAAE,WAAAkP,MAAAzF,EAAAlD,EAAA,GACAkD,EAAAlD,EAAAzG,EAAA6R,YAAApL,EAAAzG,EAAAkD,MAAA0F,eACA5I,EAAAkD,MAAAsF,oBACAxI,EAAAkD,MAAA4F,qBAAA9I,EAAAkD,MAAA2b,sBACAlV,EAAAhD,EAAA3G,EAAA6R,YAAAlL,EAAA3G,EAAAkD,MAAA2F,gBACA7I,EAAAkD,MAAAuF,mBAAAzI,EAAAkD,MAAA2b,sBACAlV,EAAAhD,EAAA,EAEA,WADA3G,GAAA8e,WAAAvgB,EAAAyM,SAGAoT,IAAA,EACApe,EAAA8d,UAAAvf,EAAAyM,SAAAwR,EAAA,SAEA9Y,EAAA+Z,WAAAjB,IACAxc,EAAAge,gBAAAhe,EAAAsd,qBACAtd,EAAAie,eAAAle,IAAA,IAGAoe,IACAne,EAAAoD,MAAA,MAEApD,EAAA+e,iBAAA,SAAArb,GACA,GAAAiG,GAAAlD,EAAAE,CAUA,OATAgD,GAAA3J,EAAAoc,YAAA1Y,GACA+C,EAAAzG,EAAAgf,sBAAArV,EAAAlD,EAAAzG,EAAAud,UAAA9W,EACAE,EAAA3G,EAAAif,uBAAAtV,EAAAhD,EAAA3G,EAAAud,UAAA5W,EACAF,EAAAzG,EAAAkD,MAAAgc,iBACAzY,EAAAzG,EAAAkD,MAAAgc,gBAEAvY,EAAA3G,EAAAkD,MAAAic,eACAxY,EAAA3G,EAAAkD,MAAAic,eAEAnf,EAAAqD,cAAA,gBAAoDoD,IAAAE,IAAAsW,aAAAjd,EAAAid,iBACpDjd,EAAA0N,UAAAC,WAAA3N,EAAA0N,UAAAwH,YAAAlV,EAAAE,WAAAkf,kBACA,cAAApf,EAAAgU,WACAhU,EAAA6E,QAAA,GACA7E,EAAA0N,UAAAC,YAAAlH,GAEA,cAAAzG,EAAAgU,UACAhU,EAAA8M,MAAAP,QAAA,kBAAAvM,EAAAid,aAAA/R,OAAAhI,MACA,aAAAlD,EAAAid,aAAA/R,OAAAlL,EAAA2I,WAAAlC,GACA,mCAAAoF,QAAA7L,EAAAid,aAAA/R,OAAAhI,QACAlD,EAAA6E,QAAA,OAEA7E,GAAAqf,oBAGA,cAAArf,EAAAgU,UACAhU,EAAAid,aAAAhP,QACAjO,EAAA8M,MAAAmE,MAAAjR,EAAAid,aAAA3Z,KAAAtD,EAAA2I,WAAAhC,EACiB3G,EAAAE,WAAAof,gBACjBtf,EAAAkD,MAAA0K,WAAAjH,EAEA3G,EAAA8M,MAAAR,KAAAtM,EAAAid,aAAA3Z,KAAAtD,EAAA2I,WAAAhC,EAEA3G,EAAAqD,cAAA,aAAiD2J,IAAArG,QACjD3G,GAAAqf,yBAGArf,EAAA8J,oBAEA9J,EAAAuf,eAAA,WACAvf,EAAA6E,SACA0U,SAAAC,KAAAa,oBAAA,YAAAra,EAAA+e,kBAAA,GACAxF,SAAAC,KAAAa,oBAAA,UAAAra,EAAAuf,gBAAA,GACAvf,EAAAwf,iBACAxf,EAAAoD,MAAA,GACApD,EAAA6d,iBAAA,GAEA7d,EAAAyf,WAAA,SAAA/b,GACA,GAAAiG,GAAA3J,EAAAoc,YAAA1Y,EAUA,OATA1D,GAAAE,WAAAwf,mBAAA1f,EAAAmW,sBACA,oDAAAtK,QAAA7L,EAAA2f,mBACA3f,EAAAmW,oBAAA1P,GAAA/C,EAAAkc,UACA5f,EAAAmW,oBAAAxP,GAAAjD,EAAAmc,UACA7f,EAAAmW,oBAAA1P,EAAA4R,KAAAqF,IAAA1d,EAAA8G,MAAA9G,EAAAkD,MAAAsO,eAAA6G,KAAAqD,IAAA,EAAA1b,EAAAmW,oBAAA1P,IACAzG,EAAAmW,oBAAAxP,EAAA0R,KAAAqF,IAAA1d,EAAA6G,OAAA7G,EAAAkD,MAAAsO,eAAA6G,KAAAqD,IAAA,EAAA1b,EAAAmW,oBAAAxP,IACAgD,EAAA3J,EAAAmW,qBAEAnW,EAAA8f,WAAA9f,EAAAwY,UAAA7O,EAAAlD,EAAAkD,EAAAhD,GAAAtG,QACA,0BAAAL,EAAA8f,YAAA,0BAAA9f,EAAA2f,iBACA3f,EAAA2f,gBAAA,wBACA3f,EAAAud,UAAA5T,EACA3J,EAAA+f,YAAAjI,KAAA9X,EAAA0N,UAAAC,eACAsL,cAAAjZ,EAAA8c,cAGA,wBAAA9c,EAAA8f,YAAA,wBAAA9f,EAAA2f,iBACA3f,EAAA2f,gBAAA,sBACA3f,EAAAud,UAAA5T,EACA3J,EAAA+f,YAAA/H,IAAAhY,EAAA0N,UAAAD,cACAwL,cAAAjZ,EAAA8c,eAGA,wBAAA9c,EAAA2f,iBACA,wBAAA3f,EAAA8f,aACA9f,EAAA8f,WAAA,uBAEA,0BAAA9f,EAAA2f,iBACA,0BAAA3f,EAAA8f,aACA9f,EAAA8f,WAAA,yBAEA7G,aAAAjZ,EAAA8c,mBACA,IAAA9c,EAAAkd,YAAArR,QAAA7L,EAAA8f,cAGA,wBAAA9f,EAAA8f,WACA9f,EAAA0N,UAAAD,UAAAzN,EAAA+f,YAAA/H,KAAArO,EAAAhD,EAAA3G,EAAAud,UAAA5W,GACA3G,EAAA0N,UAAA+N,eACa,wBAAAzb,EAAA8f,YACb9f,EAAA0N,UAAAD,WAAAzN,EAAA4b,KAAA5b,EAAAkD,MAAA0K,WACA5N,EAAA8c,YAAA3D,WAAAnZ,EAAAyf,WAAAzf,EAAAE,WAAA8f,iBAAAtc,IACa,2BAAA1D,EAAA8f,aACb9f,EAAA0N,UAAAD,WAAAzN,EAAA4b,KAAA5b,EAAAkD,MAAA0K,WACA5N,EAAA8c,YAAA3D,WAAAnZ,EAAAyf,WAAAzf,EAAAE,WAAA8f,iBAAAtc,IAEA,0BAAA1D,EAAA8f,WACA9f,EAAA0N,UAAAC,WAAA3N,EAAA+f,YAAAjI,MAAAnO,EAAAlD,EAAAzG,EAAAud,UAAA9W,GACAzG,EAAA0N,UAAA8N,cACa,4BAAAxb,EAAA8f,YACb9f,EAAA0N,UAAAC,YAAA3N,EAAAE,WAAA+f,yBACAjgB,EAAA8c,YAAA3D,WAAAnZ,EAAAyf,WAAAzf,EAAAE,WAAA8f,iBAAAtc,IACa,2BAAA1D,EAAA8f,aACb9f,EAAA0N,UAAAC,YAAA3N,EAAAE,WAAA+f,yBACAjgB,EAAA8c,YAAA3D,WAAAnZ,EAAAyf,WAAAzf,EAAAE,WAAA8f,iBAAAtc,QAGA1D,EAAAkgB,eAAA,WACAjH,aAAAjZ,EAAA8c,aACAvD,SAAA4G,iBACA5G,SAAA4G,kBAEA5G,SAAAC,KAAAa,oBAAA,YAAAra,EAAAyf,YAAA,IAEAzf,EAAAogB,YAAA,SAAA1c,GACA,GAAAiG,GAAAlD,EAAAE,CACAgD,GAAA3J,EAAAoc,YAAA1Y,GACA+C,EAAAkD,EAAAlD,EAAAzG,EAAAud,UAAA9W,EACAE,EAAAgD,EAAAhD,EAAA3G,EAAAud,UAAA5W,GACA3G,EAAAE,WAAAmgB,uBAAA,mBAAArgB,EAAAgU,YAGAhU,EAAAE,WAAAogB,oBAAA,gBAAAtgB,EAAAgU,YAGAhU,EAAAqD,cAAA,cACAuV,YAAAlV,EACA6c,OAAAvgB,EAAAwd,gBACAgD,OAAAxgB,EAAA6R,YACAmC,SAAAhU,EAAAgU,aAIAqE,KAAAC,IAAA7R,GAAAzG,EAAAE,WAAAugB,iBAAApI,KAAAC,IAAA3R,GAAA3G,EAAAE,WAAAugB,mBACAzgB,EAAA0T,cAAA1T,EAAAwd,gBACAxd,EAAA0gB,cAAA1gB,EAAA6R,YACA7R,EAAA0T,cAAAC,YACAlN,IACAE,KAEA3G,EAAAke,eAAAxa,EAAAiG,EAAAlD,EAAAkD,EAAAlD,GAAA,MAGAzG,EAAA2gB,gBAAA,SAAAjd,GACA,GAAAkd,IACAC,cAAA7gB,EAAAqM,OAAAC,KACAwU,iBAAA9gB,EAAAqM,OAAAE,SAEAhO,GACAsiB,cAAA,WACAC,iBAAA,eACiB9gB,EAAAgU,SACjBuF,UAAAC,KAAAa,oBAAA,YAAAra,EAAAogB,aAAA,GACA7G,SAAAC,KAAAa,oBAAA,UAAAra,EAAA2gB,iBAAA,GACA3gB,EAAA0T,eACA1T,EAAA0gB,gBACA1gB,EAAA6d,iBAAA,EACA7d,EAAA0T,cAAAnV,KAAAyB,EAAA0gB,cAAAniB,IACAyB,EAAAqD,cAAA,WACAuV,YAAAlV,EACA6c,OAAAvgB,EAAA0T,cACA8M,OAAAxgB,EAAA0gB,cACA1M,SAAAhU,EAAAgU,aAEA4M,EAAA5gB,EAAAgU,UAAA2G,OAAAiG,EAAA5gB,EAAAgU,UAAAnI,QAAA7L,EAAA0T,cAAAnV,IAAA,GACAqiB,EAAA5gB,EAAAgU,UAAA2G,OAAAiG,EAAA5gB,EAAAgU,UAAAnI,QAAA7L,EAAA0gB,cAAAniB,IAAA,EAAAyB,EAAA0T,cAAAnV,IACAyB,EAAAwf,mBAGAxf,EAAA0T,kBAAA3T,GACAC,EAAA0gB,kBAAA3gB,GACAC,EAAAoD,MAAA,IAEApD,EAAA0Y,UAAA,SAAAhV,EAAAuY,GAEA,GADAjc,EAAA+gB,oBAAArd,EAAA8c,QACAxgB,EAAAqD,cAAA,aAAiDuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eACjD7R,EAAAyW,UAGA,IAAA/S,EAAAsd,SAAAhhB,EAAAmc,MAAA,CACA,GAAAK,GAAA9Y,EAAA+Y,YAAA/Y,EAAAgZ,OAYA,IAXA1c,EAAAud,UAAAtB,GAAAjc,EAAAoc,YAAA1Y,GACA1D,EAAA+f,aACAjI,KAAA9X,EAAA0N,UAAAC,WACAqK,IAAAhY,EAAA0N,UAAAD,WAEAzN,EAAAwd,gBAAAxd,EAAAwY,UAAAxY,EAAAud,UAAA9W,EAAAzG,EAAAud,UAAA5W,GACA3G,EAAA+d,oBAAA/d,EAAAwd,gBAAA7R,SACA6Q,GAAA9Y,EAAA+Z,UAAA,yCACArZ,KAAApE,EAAAwd,gBAAAnd,UAAAL,EAAA6R,YAAAnG,iBACA1L,EAAA4L,gBAEA5L,EAAAwd,gBAAArR,OAAA,CAGA,QAAAnM,EAAAkd,YAAArR,QAAA7L,EAAAwd,gBAAAnd,SAeA,MAdAL,GAAA8f,WAAA9f,EAAAwd,gBAAAnd,QACAL,EAAA2f,gBAAA3f,EAAAwd,gBAAAnd,QACAL,EAAAyf,WAAA/b,GACA1D,EAAAE,WAAAwf,oBACA,oDAAA7T,QAAA7L,EAAA2f,mBACA3f,EAAAmW,qBACA1P,EAAAzG,EAAAud,UAAA9W,EACAE,EAAA3G,EAAAud,UAAA5W,GAEA3G,EAAA0X,OAAAuJ,sBAEA1H,SAAAC,KAAAC,iBAAA,YAAAzZ,EAAAyf,YAAA,GACAlG,SAAAC,KAAAC,iBAAA,UAAAzZ,EAAAkgB,gBAAA,QACAlgB,EAAA6d,iBAAA,EAGA,aAAA7d,EAAAgU,SAKA,MAJAhU,GAAAqd,WAAA,EACA,QAAArd,EAAAE,WAAA8S,eACAhT,EAAA8d,UAAA9d,EAAAwd,gBAAAxS,SAAAwR,EAAA,SAEAxc,EAAAyY,UAAA/U,IAEA,8BAAAmI,QAAA7L,EAAAgU,YACAhU,EAAAid,aAAAjd,EAAAmd,SACAnd,EAAAid,aAAAhP,QACAjO,EAAAif,uBAAAjf,EAAA8M,MAAAmE,MAAAjR,EAAAid,aAAA3Z,KAAAtD,EAAA2I,WAEA3I,EAAAif,uBAAAjf,EAAA8M,MAAAR,KAAAtM,EAAAid,aAAA3Z,KAAAtD,EAAA2I,YAAA3I,EAAAkD,MAAA0K,WAEA5N,EAAAgf,sBAAAhf,EAAA8M,MAAAP,QAAA,kBAAAvM,EAAAid,aAAA/R,OAAAhI,MACA,aAAAlD,EAAAid,aAAA/R,OAAAlL,EAAA2I,YAAA3I,EAAAid,aAAAnW,MACAyS,SAAAC,KAAAC,iBAAA,YAAAzZ,EAAA+e,kBAAA,GACAxF,SAAAC,KAAAC,iBAAA,UAAAzZ,EAAAuf,gBAAA,KAEA,qCAAA1T,QAAA7L,EAAAgU,YACAhU,EAAAid,aAAAjd,EAAAmd,SACA5D,SAAAC,KAAAC,iBAAA,YAAAzZ,EAAAogB,aAAA,GACA7G,SAAAC,KAAAC,iBAAA,UAAAzZ,EAAA2gB,iBAAA,OAGA3gB,EAAAka,QAAA,SAAAxW,GACAuV,aAAAjZ,EAAA8c,aACA9c,EAAAgd,qBAAA,EACAhd,EAAAqd,cAAAtd,GACAC,EAAAid,iBAAAld,GACAC,EAAAwd,oBAAAzd,GACAC,EAAAqD,cAAA,WAA+CuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,gBAC/C7R,EAAAyW,UAAA/S,EAAA8c,SAAAxgB,EAAA0X,UAGA1X,EAAA6R,iBAAA9R,KAAAC,EAAA6R,YAAApC,MAGAzP,EAAAkc,aAAAlc,EAAAmc,QACAnc,EAAAud,WAAAvd,EAAA+c,SAAA/c,EAAAud,YACAvd,EAAAkhB,aAAAC,QAEAzd,EAAAoV,oBAEA9Y,EAAAohB,QAAA,SAAA1d,GACA,GAAAnF,GACAkI,EAAAzG,EAAAiM,WAAAC,YACAvF,EAAA3G,EAAAiM,WAAAjB,SACAwR,EAAA9Y,EAAA+Y,YAAA/Y,EAAAgZ,QACA2E,EAAArhB,EAAAsD,KAAA8M,OAAA,EACAkR,EAAAthB,EAAAoS,mBAAAhC,OAAA,CACA,KAAApQ,EAAAqD,cAAA,WAA+CuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eAC/C7R,EAAAyW,SAAA,CAmDA,GAhDAzW,EAAA4b,KAAA5b,EAAAmN,YAAAiD,OAAA,EAAApQ,EAAAE,WAAA2b,kBACA7b,EAAAE,WAAA0S,aACAyO,GAAA,GAEA,IAAA3d,EAAA6d,SACA7d,EAAAoV,iBAGA,KAAApV,EAAA6d,SACAvhB,EAAA4L,cACA5L,EAAAoD,MAAA,IAEaoZ,GAAA,KAAA9Y,EAAA6d,QACbvhB,EAAAwhB,YAEa,KAAA9d,EAAA6d,QACb5a,GAAA,EAEa,KAAAjD,EAAA6d,QACb5a,GAAA,EAEa,KAAAjD,EAAA6d,SAAA7d,EAAA+Z,UAAA,IAAA/Z,EAAA6d,QACb9a,GAAA,EAEa,KAAA/C,EAAA6d,UAAA7d,EAAA+Z,UAAA,IAAA/Z,EAAA6d,QACb9a,GAAA,EAEa,KAAA/C,EAAA6d,SACb5a,GAAA3G,EAAA4b,KACAlY,EAAAoV,kBAEa,KAAApV,EAAA6d,SACb5a,GAAA3G,EAAA4b,KACAlY,EAAAoV,kBAEa,KAAApV,EAAA6d,SAAA/E,GAAA,KAAA9Y,EAAA6d,QACb5a,EAAA,EAEa,KAAAjD,EAAA6d,SAAA/E,GAAA,KAAA9Y,EAAA6d,QACb5a,EAAA3G,EAAAsD,KAAA8M,OAAA,EAEaoM,GAAA,KAAA9Y,EAAA6d,QACb9a,EAAA6a,EAEa9E,GAAA,KAAA9Y,EAAA6d,UACb9a,EAAA,GAGA,KAAA/C,EAAA6d,QACA,MAAAvhB,GAAAma,YAAA1T,EAAAE,EAGA,SAAAjD,EAAA6d,QAAA,CAKA,GAJAvhB,EAAA4L,cACA5L,EAAA4L,WAAAyM,KAAAqD,IAAA/U,EAAA,OACA3G,EAAA4L,WAAAyM,KAAAqD,IAAA/U,EAAA,IAAAlC,KAAAgC,GACAzG,EAAAge,gBAAAhe,EAAAsd,qBACA,QAAAtd,EAAAE,WAAA8S,cACA,IAAAzU,EAAAyB,EAAAge,gBAAAhG,IAAsDzZ,GAAAyB,EAAAge,gBAAAL,OAAkCpf,GAAA,EACxFyB,EAAA8d,UAAAvf,EAAAie,EAAA,aAGAxc,GAAAie,eAAAle,GAAAyc,EAIA,OAFA9Y,GAAAoV,qBACA9Y,GAAAoD,MAAA,GAGAqD,EAAA,IACAA,EAAA,GAEAE,EAAA0a,IACA1a,EAAA0a,GAEA1a,EAAA,IACAA,EAAA,GAEAF,EAAA6a,IACA7a,EAAA6a,GAGA5d,EAAA+Z,WAAA,kBAAA5R,QAAAnI,EAAA6d,WACAvhB,EAAA4L,WAAAyM,KAAAqD,IAAA/U,EAAA,IAAA3G,EAAA4L,WAAAyM,KAAAqD,IAAA/U,EAAA,QACA3G,EAAA4L,WAAAyM,KAAAqD,IAAA/U,EAAA,IAAAlC,KAAAgC,GACAzG,EAAAge,gBAAAhe,EAAAsd,qBACAtd,EAAAie,eAAAle,GAAAyc,GACAxc,EAAAoD,MAAA,IAEAqD,IAAAzG,EAAAiM,WAAAC,aAAAvF,IAAA3G,EAAAiM,WAAAjB,WACAhL,EAAAyhB,eAAAhb,IAAAzG,EAAAiM,WAAAC,YAAAzF,MAAA1G,GAAA4G,IAAA3G,EAAAiM,WAAAjB,SAAArE,MAAA5G,IACAC,EAAA4e,cAAAnY,EAAAE,IACAjD,EAAA+Z,UAAAzd,EAAAE,WAAAwhB,6BACAlF,IACAxc,EAAA4L,eAEA5L,EAAA4L,WAAAjF,GAAA3G,EAAA4L,WAAAjF,OACA3G,EAAA4L,WAAAjF,GAAAlC,KAAAgC,GACAzG,EAAAqD,cAAA,oBACAgb,aAAAre,EAAAse,kBACA1S,WAAA5L,EAAA4L,WACAoS,gBAAAhe,EAAAge,mBAGAhe,EAAAoD,MAAA,MAGApD,EAAA2hB,MAAA,SAAAje,GACA1D,EAAAqD,cAAA,SAA6CuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eAC7C7R,EAAAyW,WAGAzW,EAAAkhB,aAAAlc,MAAA,KAEAhF,EAAA4hB,SAAA,SAAAle,GACA1D,EAAAyW,UAGAzW,EAAAqD,cAAA,YAAgDuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eAEhD7R,EAAA6hB,SAAA,SAAAne,GACA1D,EAAAqD,cAAA,YAAgDuV,YAAAlV,EAAA0C,KAAApG,EAAA6R,eAChD7R,EAAAyW,WAGA,cAAAzW,EAAA6R,YAAAxR,SACA,qBAAAL,EAAA6R,YAAA3O,MACAlD,EAAA8hB,kBAAA9hB,EAAA6R,YAAA3G,OAAArM,MACa,cAAAmB,EAAA6R,YAAAxR,SACb,eAAAL,EAAA6R,YAAA3O,MACAlD,EAAA+hB,YACa,0BAAAlW,QAAA7L,EAAA6R,YAAA3O,QACblD,EAAAma,YAAAna,EAAA6R,YAAA3F,YAAAlM,EAAA6R,YAAA7G,YAGAhL,EAAAgiB,YAAA,SAAAte,GACA,GAAAlF,GACAoL,EACAqY,MAAAliB,KAAA2D,EAAAue,OAAAve,EAAAkV,YAAAqJ,OAAAve,EAAAue,OACAC,MAAAniB,KAAA2D,EAAAwe,OAAAxe,EAAAkV,YAAAsJ,OAAAxe,EAAAwe,OACAC,MAAApiB,KAAA2D,EAAAye,UAAAze,EAAAkV,YAAAuJ,UAAAze,EAAAye,SACApL,KAGAA,EAAAoC,WAAA,WACAnZ,EAAAqD,cAAA,SAAiDuV,YAAAlV,MAGjDA,IAAAkV,aAAAlV,EACA1D,EAAAsZ,oBAAA,EACA9a,EAAAwB,EAAA0N,UAAAC,WACA/D,EAAA5J,EAAA0N,UAAAD,UACAzN,EAAAyW,WAGA,IAAA0L,IAEAD,GAAA,IAEAliB,EAAA0N,UAAAqM,SAAAkI,EAAAzjB,EAAA0jB,EAAAtY,IAEAA,IAAA5J,EAAA0N,UAAAD,WAAAjP,IAAAwB,EAAA0N,UAAAC,YACAjK,EAAAoV,iBAEA/B,MAAAhX,KACa,KAEbC,EAAAoiB,KAAA,SAAA1e,GACA,IAAA1D,EAAAqD,cAAA,QAA4CuV,YAAAlV,KAC5C1D,EAAAyW,UAAA/S,EAAA2e,cAAA,CACA,GAAA/V,MAAAgW,EAAAtiB,EAAAse,iBACAgE,GAAAlS,OAAA,IACAkS,EAAAzhB,QAAA,SAAAmM,GACA,GAAAA,EAAA,CACA,GAAA7D,KACAnK,QAAA+G,KAAAiH,GAAAnM,QAAA,SAAAiE,GACA,UAAAkI,EAAAlI,KACA,IAAAkI,EAAAlI,QACA/E,KAAAiN,EAAAlI,IACAkI,EAAAlI,GAAAyd,QACA,MAAApZ,GAAA1E,KAAA,IAAAuI,EAAAlI,GAAAyd,QAAA,eAEApZ,GAAA1E,KAAAuI,EAAAlI,MAEAqE,EAAA2M,KAAA,KACAxJ,EAAA7H,KAAA0E,MAGAzF,EAAA2e,cAAAG,QAAA,aAAAlW,EAAAwJ,KAAA,OACApS,EAAAoV,sBAKC1Y,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,INu7CK,SAAU/B,EAAQD,EAASM,GOv4EjC,GAAAyB,GAAAC,CAEAD,UAu7BCE,MAv7BDD,EAAA,WACA,YACA,iBAAAE,EAAAyiB,GACAziB,EAAAqM,QACAC,QACAC,YAEAvM,EAAAyW,UAAA,EACAzW,EAAAiM,YACAC,YAAA,EACAlB,SAAA,GAEAhL,EAAA0iB,YAAA,iBACA1iB,EAAA2iB,sBAAA,wCACA3iB,EAAA4iB,4BAAA,qCACA5iB,EAAA2I,SAAA,0BACA3I,EAAA2P,QAAA3P,EAAA2I,SACA3I,EAAA6H,eAAA,MACA7H,EAAAgQ,iBACAhQ,EAAA6iB,WACA7iB,EAAA8iB,cACA9iB,EAAA8J,iBACA9J,EAAA0N,aACA1N,EAAAmN,eAOAnN,EAAA8M,OACAR,QACAC,WACA0E,UAEAjR,EAAA+iB,cAAA,WACA,UAEA/iB,EAAA4L,cACA5L,EAAA+L,UACA/L,EAAAE,cACAF,EAAAkD,SACAlD,EAAAyM,cACAzM,EAAAwe,WACAxe,EAAAgjB,gBACAhjB,EAAAwa,UACAxa,EAAAijB,IAAA,EACAjjB,EAAAkjB,WACAljB,EAAAyS,eAAA,EACAzS,EAAAwS,eAAA,EACAxS,EAAAmR,gBAAA,EACAnR,EAAAsR,gBAAA,EACAtR,EAAAsP,cACAtP,EAAA0I,gBACA1I,EAAAkd,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEAld,EAAAqW,OAAsB5P,EAAA,EAAAE,EAAA,GACtB3G,EAAAse,gBAAA,SAAA6E,GACA,GAAAvkB,MAAAgB,EAAAI,EAAAoS,mBAAA5T,EAAAwB,EAAAsD,KAAA8M,MAmBA,OAlBApQ,GAAA4L,WAAA/K,QAAA,SAAAmM,EAAAwD,GACA,GAAAA,IAAAhS,EAAA,CACA,OAAAwO,EAAAoD,OAEA,YADAxR,EAAA4R,GAAA,KAGA5R,GAAA4R,MACA2S,EACAvjB,EAAAiB,QAAA,SAAAya,GACA1c,EAAA4R,GAAA8K,EAAAzc,MAAAmB,EAAAsD,KAAAkN,GAAA8K,EAAAzc,QAGAmO,EAAAnM,QAAA,SAAAuiB,IACA,IAAAA,GAAAxjB,EAAAwjB,KACAxkB,EAAA4R,GAAA5Q,EAAAwjB,GAAAvkB,MAAAmB,EAAAsD,KAAAkN,GAAA5Q,EAAAwjB,GAAAvkB,YAIAD,GAEAoB,EAAAqjB,UAAA,SAAAC,EAAAC,EAAAC,GACAA,KAAA,CACA,IAAA/c,GAAAlI,IACA,KAAAkI,EAAA6c,EAAyB7c,GAAA8c,EAAW9c,GAAA+c,EACpCjlB,EAAAkI,IAEA,OAAAlI,IAEAyB,EAAA+R,uBAAA,WACA,MAAA/R,GAAAE,WAAAoT,kBACAtT,EAAA8M,MAAAR,MAAA,IAAAtM,EAAAkD,MAAAugB,uBADqD,GAGrDzjB,EAAAgS,yBAAA,WACA,MAAAhS,GAAAE,WAAAwQ,eACA1Q,EAAA8M,MAAAP,QAAAmC,YAAA1O,EAAAkD,MAAA0N,mBADkD,GAGlD5Q,EAAAwf,eAAA,WACAxf,EAAAE,WAAAqP,gBACAmU,aAAAC,QAAA3jB,EAAA0iB,YAAA,IAAA1iB,EAAAE,WAAArB,KAAA2E,KAAAogB,WACA9W,OACAR,KAAAtM,EAAA8M,MAAAR,KACAC,QAAAvM,EAAA8M,MAAAP,SAEAF,QACAC,KAAAtM,EAAAqM,OAAAC,KACAC,QAAAvM,EAAAqM,OAAAE,SAEAoD,QAAA3P,EAAA2P,QACA9H,eAAA7H,EAAA6H,mBAGA7H,EAAA4c,UAAA,WACA,MAAA5c,GAAA4D,QAAA5D,EAAA6jB,YAEA7jB,EAAA8jB,mBAAA,WACA,GAAAlkB,GAAAI,EAAA4c,WACA5c,GAAAqM,OAAAE,QAAAvM,EAAAqjB,UAAA,EAAAzjB,EAAAwQ,OAAA,IAEApQ,EAAAmS,gBAAA,WACAnS,EAAAqM,OAAAC,KAAAtM,EAAAqjB,UAAA,EAAArjB,EAAAsD,KAAA8M,OAAA,IAEApQ,EAAAoS,iBAAA,WACA,MAAApS,GAAA4c,YAAApa,OAAA,SAAA4gB,GAA2D,OAAAA,EAAA7H,UAE3Dvb,EAAA+jB,kBAAA,SAAA/W,EAAA9B,GACA,GAAAtM,GAAAsM,EAAA8Y,cAAA,EACA,mBAAAplB,KACAA,IAAAwB,MAAAJ,EAAAU,MAAAwK,KAEA8B,EAAA9B,EAAArM,MAAAD,GAEAoB,EAAAikB,iBAAA,WACAjkB,EAAA6S,UACA7S,EAAA6S,OAAA7S,EAAA2I,UAAA3I,EAAAijB,IACAjjB,EAAAijB,KAAA,EACAjjB,EAAA4c,YAAA/b,QAAA,SAAAqK,GACAlL,EAAA+jB,kBAAA/jB,EAAA6S,OAAA3H,MAGAlL,EAAAkkB,kBAAA,SAAApf,GAEA,IADA,GAAAzF,GAAA,EACAW,EAAAgjB,aAAAle,IACAzF,GAAA,EACAyF,GAAAzF,CAEA,OAAAyF,IAEA9E,EAAAwC,OAAA,SAAAkK,GACA,GAAAF,GAAAxM,EAAA6iB,QAAAnW,EAKA,OAJAF,QAAAzM,KAAA2M,IACAmD,QAAAC,KAAA,mEAAApD,GACAF,EAAAxM,EAAA6iB,QAAAxe,QAEAmI,GAEAxM,EAAAmkB,qBAAA,SAAAC,GACA,GAAAxa,GAAAnD,EAAAjI,EAAAwB,EAAAsD,KAAA8M,MACA,KAAA3J,EAAA,EAAuBA,EAAAjI,EAAOiI,GAAA,EAC9B,kBAAA1G,IAAA8L,QAAA7L,EAAAsD,KAAAmD,GAAA2d,IAEA,MADAxa,SAAA5J,GAAAsD,KAAAmD,GACA,WAAAmD,EAAA,SAAAA,CAGA,iBAEA5J,EAAAqkB,eAAA,WACArlB,OAAA+G,KAAA/F,EAAAsP,YAAAzO,QAAA,SAAAyjB,GACAtkB,EAAAsP,WAAAgV,GAAAlhB,UAGApD,EAAAqf,iBAAA,WACArgB,OAAA+G,KAAA/F,EAAAsP,YAAAzO,QAAA,SAAAyjB,GACAtkB,EAAAsP,WAAAgV,GAAAzf,YAGA7E,EAAAke,eAAA,SAAAxa,EAAA+C,EAAAE,EAAA6V,GACA,GAAA+H,GACArT,EAAAlR,EAAAgS,2BACAF,EAAA9R,EAAA+R,wBACAtL,GAAAzG,EAAA8G,MAAA9G,EAAAE,WAAAskB,qBAAA/d,EAAAzG,EAAA8G,QACA9G,EAAA0N,UAAAC,YAAA3N,EAAAE,WAAA+f,yBACAsE,GAAA,GAEA5d,EAAA3G,EAAA6G,OAAA7G,EAAAE,WAAAskB,qBAAA7d,EAAA3G,EAAA6G,SACA7G,EAAA0N,UAAAD,WAAAzN,EAAAE,WAAA+f,yBACAsE,GAAA,GAEA9d,EAAAzG,EAAAE,WAAAskB,oBAAAtT,EAAA,IACAlR,EAAA0N,UAAAC,YAAA3N,EAAAE,WAAA+f,yBACAsE,GAAA,GAEA5d,EAAA3G,EAAAE,WAAAskB,oBAAA1S,EAAA,IACA9R,EAAA0N,UAAAD,WAAAzN,EAAAE,WAAA+f,yBACAsE,GAAA,GAEAA,IAAA/H,GAAAxc,EAAA6R,cAAA,IAAA7R,EAAA6R,YAAA3F,cACAlM,EAAA8c,YAAA3D,WAAAnZ,EAAAyY,UAAAzY,EAAAE,WAAA8f,iBAAAtc,KAGA1D,EAAAykB,uBAAA,WACAzkB,EAAAsD,KAAAtD,EAAA0kB,aAAAliB,OAAA,SAAAwK,GACA,YAGAhN,EAAA2kB,eAAA,SAAAhmB,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAA8E,OAAA,yCAEA,IAAA/D,EAAA4C,OAAA,SAAAjE,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4BuR,OAAA,EACnE,SAAAzM,OAAA,0BACAhF,EAAAE,KAAA,6CAEA,WAEAmB,EAAA4kB,YAAA,SAAAC,EAAAC,EAAAhgB,EAAA/B,GACA8hB,EAAA/f,OAAA/E,KAAA+kB,EAAAhgB,GAAA/B,EAAA+hB,EAAAhgB,IAEA9E,EAAA+kB,cAAA,WACA/kB,EAAAC,SAAAC,WAAAW,QAAA,SAAAtC,GACAyB,EAAA4kB,YAAA5kB,EAAAE,WAAAF,EAAAQ,KAAAjC,EAAA,GAAAA,EAAA,OAGAyB,EAAAglB,SAAA,WACAhlB,EAAAC,SAAAE,OAAAU,QAAA,SAAAtC,GACAyB,EAAA4kB,YAAA5kB,EAAAkD,MAAAlD,EAAAQ,KAAA0C,UAAkE3E,EAAA,GAAAA,EAAA,OAGlEyB,EAAA+hB,SAAA,SAAAkD,GACAjlB,EAAAoS,mBAAAvR,QAAA,SAAAuiB,GACAA,EAAAvkB,OAAAomB,OAAAllB,KAAAklB,GACAjlB,EAAA8hB,kBAAAsB,EAAAvkB,QAGAmB,EAAA8hB,kBAAA,eAEA9hB,EAAAyB,QAAA,YACAzB,EAAA0R,aAAA1R,EAAA0X,QAAA1X,EAAA0X,OAAA/S,YACA3E,EAAA0X,OAAA/S,WAAAugB,YAAAllB,EAAA0X,QAEA1X,EAAAmlB,YAAA9K,oBAAA,UAAAra,EAAAka,SAAA,GACAla,EAAAmlB,YAAA9K,oBAAA,YAAAra,EAAA0Y,WAAA,GACA1Y,EAAAmlB,YAAA9K,oBAAA,WAAAra,EAAA6hB,UAAA,GACA7hB,EAAAmlB,YAAA9K,oBAAA,QAAAra,EAAAoa,OAAA,GACApa,EAAAmlB,YAAA9K,oBAAA,YAAAra,EAAAyY,WACAzY,EAAAmlB,YAAA9K,oBAAA,QAAAra,EAAAgiB,aAAA,GACAhiB,EAAA0X,OAAA2C,oBAAA,cAAAra,EAAAolB,aAAA,GACAplB,EAAA0X,OAAA2C,oBAAA,OAAAra,EAAAoiB,MACApiB,EAAAkhB,aAAA7G,oBAAA,WAAAra,EAAA4hB,UAAA,GACA5hB,EAAAkhB,aAAA7G,oBAAA,QAAAra,EAAA2hB,OAAA,GACA3hB,EAAAkhB,aAAA7G,oBAAA,UAAAra,EAAAohB,SAAA,GACAlgB,OAAAmZ,oBAAA,SAAAra,EAAA6E,QACA7E,EAAAqF,UAAArF,EAAAqF,SAAAggB,YACArlB,EAAAqF,SAAAggB,cAGArlB,EAAAslB,oBAAA,WACA,GAAA1lB,EACAI,GAAAulB,gBACA,gBAAAvlB,GAAAulB,eAAAlZ,QACA,OAAArM,EAAAulB,eAAAlZ,SACArM,EAAAulB,eAAAlZ,OAAAC,KAAA8D,QAAApQ,EAAAsD,KAAA8M,SACApQ,EAAAqM,OAAAC,KAAAtM,EAAAulB,eAAAlZ,OAAAC,MAEA1M,EAAAI,EAAA4c,YACA5c,EAAAulB,eAAAlZ,OAAAE,QAAA6D,SAAAxQ,EAAAwQ,SACApQ,EAAAqM,OAAAE,QAAAvM,EAAAulB,eAAAlZ,OAAAE,SAEAvM,EAAA2P,YAAA5P,KAAAC,EAAAulB,eAAA5V,QACA3P,EAAA2I,SAAA3I,EAAAulB,eAAA5V,QACA3P,EAAA6H,mBAAA9H,KAAAC,EAAAulB,eAAA1d,eACA7H,EAAA2I,SAAA3I,EAAAulB,eAAA1d,eACA7H,EAAAwlB,gBAAAxlB,EAAA2P,UAAA3P,EAAA6H,gBACA7H,EAAAuT,MAAAvT,EAAA2P,QAAA3P,EAAA6H,kBAIA7H,EAAAylB,cAAA,SAAAC,GACA,MAAA5O,YAAA4O,EAAA,KAEA1lB,EAAA2lB,UAAA,SAAA7gB,GACA,OAAAV,KAAAU,KACA9E,EAAAkD,MAAA4B,EAAA,UAAA9E,EAAAylB,cAAAzlB,EAAAkD,MAAA4B,MAGA9E,EAAA4lB,SAAA,SAAAC,GACA7lB,EAAAQ,KAAAqlB,IACA7mB,OAAA+G,KAAA/F,EAAAQ,KAAAqlB,IAAAhlB,QAAA,SAAAiE,GACA9E,EAAA6lB,GAAA/gB,GAAA9E,EAAAQ,KAAAqlB,GAAA/gB,MAGA9E,EAAAc,KAAA,WACA,IAAAd,EAAA0E,YAAA,CACA,GAAAohB,KAyJA,IAxJA9lB,EAAA+kB,gBACA/kB,EAAAglB,WACAhlB,EAAA+lB,gBACA/lB,EAAAgmB,SACAhmB,EAAA0M,KAAA,kBACA1M,EAAA0E,aAAA,EACA1E,EAAAmW,qBAAwC1P,EAAA,EAAAE,EAAA,GACxC3H,OAAA+G,KAAA/F,EAAAkD,OAAArC,QAAAb,EAAA2lB,WACA3lB,EAAAU,KAAAgM,KAAA1M,EAAA0M,KACA1M,EAAAU,KAAA+Y,iBAAAzZ,EAAAyZ,iBACAzZ,EAAAU,KAAA2Z,oBAAAra,EAAAqa,oBACAra,EAAAU,KAAA2C,cAAArD,EAAAqD,cACArD,EAAAU,KAAAe,QAAAzB,EAAAyB,QACAzB,EAAAU,KAAAulB,SAAAjmB,EAAAimB,SACAjmB,EAAAU,KAAAmiB,QAAA7iB,EAAA6iB,QACA7iB,EAAAU,KAAA8d,QAAAxe,EAAAwe,QACAxe,EAAAU,KAAAqhB,SAAA/hB,EAAA+hB,SACA/hB,EAAAU,KAAAyZ,YAAAna,EAAAma,YACAna,EAAAU,KAAA6d,QAAAve,EAAAue,QACAve,EAAAU,KAAAke,cAAA5e,EAAA4e,cACA5e,EAAAU,KAAA+gB,eAAAzhB,EAAAyhB,eACAzhB,EAAAU,KAAAwlB,eAAAlmB,EAAAkmB,eACAlmB,EAAAU,KAAAylB,SAAAnmB,EAAAmmB,SACAnmB,EAAAU,KAAA0lB,QAAApmB,EAAAomB,QACApmB,EAAAU,KAAA2lB,qBAAArmB,EAAAqmB,qBACArmB,EAAAU,KAAA4lB,iBAAAtmB,EAAAsmB,iBACAtmB,EAAAU,KAAAohB,kBAAA9hB,EAAA8hB,kBACA9hB,EAAAU,KAAA6lB,wBAAAvmB,EAAAumB,wBACAvmB,EAAAU,KAAA8lB,mBAAAxmB,EAAAwmB,mBACAxmB,EAAAU,KAAA8X,UAAAxY,EAAAwY,UACAxY,EAAAU,KAAA+lB,cAAAzmB,EAAAymB,cACAzmB,EAAAU,KAAA6S,MAAAvT,EAAAuT,MACAvT,EAAAU,KAAA0C,KAAApD,EAAAoD,KACApD,EAAAU,KAAAud,WAAAje,EAAAie,WACAje,EAAAU,KAAAgmB,YAAA1mB,EAAA0mB,YACA1mB,EAAAU,KAAAimB,kBAAA3mB,EAAA2mB,kBACA3mB,EAAAU,KAAA+d,UAAAze,EAAAye,UACAze,EAAAU,KAAAod,UAAA9d,EAAA8d,UACA9d,EAAAU,KAAA2N,WAAArO,EAAAqO,WACArO,EAAAU,KAAAoe,WAAA9e,EAAA8e,WACA9e,EAAAU,KAAAkmB,WAAA5mB,EAAA4mB,WACA5mB,EAAAU,KAAAmmB,aAAA7mB,EAAA6mB,aACA7mB,EAAAU,KAAAgX,OAAA1X,EAAA0X,OACA1X,EAAAU,KAAAL,QAAAL,EAAA+G,IACA/G,EAAAU,KAAAomB,UAAA9mB,EAAA8mB,UACA9mB,EAAAU,KAAAqmB,UAAA/mB,EAAA+mB,UACA/mB,EAAAU,KAAAsmB,OAAAhnB,EAAAgnB,OACAhnB,EAAAU,KAAAumB,aAAAjnB,EAAAinB,aACAjnB,EAAAU,KAAAwmB,aAAAlnB,EAAAknB,aACAlnB,EAAAU,KAAAymB,UAAAnnB,EAAAmnB,UACAnnB,EAAAU,KAAA0mB,gBAAApnB,EAAAonB,gBACApnB,EAAAU,KAAA2mB,aAAArnB,EAAAqnB,aACArnB,EAAAU,KAAA4mB,eAAAtnB,EAAAsnB,eACAtnB,EAAAU,KAAA6mB,kBAAAvnB,EAAAunB,kBACAvnB,EAAAU,KAAA8mB,gBAAAxnB,EAAAwnB,gBACAxnB,EAAAU,KAAAmE,OAAA7E,EAAA6E,OACA7E,EAAAU,KAAAie,aAAA3e,EAAA2e,aACA3e,EAAAU,KAAAod,UAAA9d,EAAA8d,UACA9d,EAAAU,KAAA8gB,UAAAxhB,EAAAwhB,UACAxhB,EAAAU,KAAA2jB,eAAArkB,EAAAqkB,eACArkB,EAAAU,KAAA+mB,cAAAznB,EAAAynB,cACAznB,EAAAU,KAAAgnB,uBAAA1nB,EAAA0nB,uBACA1nB,EAAAU,KAAAinB,eAAA3nB,EAAA2nB,eACA3nB,EAAAU,KAAA0hB,KAAApiB,EAAAoiB,KACApjB,OAAA+G,KAAA/F,EAAAkD,OAAArC,QAAA,SAAAiE,GAEAghB,EAAAhhB,OAAA/E,GACAf,OAAAC,eAAA6mB,EAAAhhB,GACA1F,IAAA,WACA,MAAAY,GAAAkD,MAAA4B,IAEAC,IAAA,SAAAC,GACAhF,EAAA2lB,UAAA3gB,GACAhF,EAAAkD,MAAA4B,GAAAE,EACAhF,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,gBAA4DxE,KAAAiG,EAAAE,eAI5DhG,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA4nB,cAGA5oB,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAiM,cASAjN,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAAyW,YAGAzW,EAAAQ,KAAAF,WACAtB,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAA0mB,IAEA/gB,IAAA,SAAAC,GACAhG,OAAA+G,KAAAf,GAAAnE,QAAA,SAAAiE,GACA9E,EAAA2lB,UAAA3gB,GACAhF,EAAAkD,MAAA4B,GAAAE,EAAAF,KAEA9E,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,gBAA4DxE,KAAA,QAAAmG,aAI5DhG,OAAAC,eAAAe,EAAAU,KAAA,cAA4DsE,WAC5DhG,OAAA+G,KAAA/F,EAAAE,YAAAW,QAAA,SAAAiE,GACA9F,OAAAC,eAAAe,EAAAU,KAAAR,WAAA4E,GACA1F,IAAA,WACA,MAAAY,GAAAE,WAAA4E,IAEAC,IAAA,SAAAC,GACAhF,EAAAE,WAAA4E,GAAAE,EACAhF,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,oBAAgExE,KAAAiG,EAAAE,QAAAF,UAIhE9E,EAAA6iB,QAAAxe,OAAA,SAAAW,EAAA6iB,GACA7iB,EAAA8iB,OAAA9iB,EACA,IAAA+iB,GACAC,EAAA,cACAC,EAAAD,EAAAE,KAAAL,GACAM,EAAAF,IAAA,GAAAG,UAAA,MACAC,EAAAF,EAAA/X,MAEA,IADApQ,EAAAsoB,uBAAAvoB,GACA,MAAA8nB,EAAAO,UAAA,MAAAH,EAAA,CACA,IACAF,EAAA,GAAAQ,QAAAV,EAAAO,UAAA,EAAAP,EAAAzX,QAAAiY,EAAA,IAAAF,GACqB,MAAAzkB,GAErB,YADA1D,EAAAsoB,mBAAA5kB,GAGA,MAAAqkB,GAAA3jB,KAAAY,GAEA,QAAAA,EAAA+K,WACA,IADA/K,EAAA+K,WAAAyY,oBACA3c,QAAAgc,EAAAW,sBAEAxoB,EAAA6iB,QAAA/e,OAAA,SAAAkB,EAAA6iB,GACA,OAAAA,GACA7iB,IAAA6iB,GAEA7nB,EAAAE,WAAArB,MAAAmB,EAAAE,WAAAqP,eAAA,CAEA,GADAvP,EAAAulB,eAAA7B,aAAA+E,QAAAzoB,EAAA0iB,YAAA,IAAA1iB,EAAAE,WAAArB,MACAmB,EAAAulB,eACA,IACAvlB,EAAAulB,eAAA/hB,KAAAC,MAAAzD,EAAAulB,gBACqB,MAAA7hB,GACrBmM,QAAAC,KAAA,0CAAApM,GACA1D,EAAAulB,mBAAAxlB,GAGAC,EAAAulB,gBACA,gBAAAvlB,GAAAulB,eAAAzY,OACA,OAAA9M,EAAAulB,eAAAzY,QACA9M,EAAA8M,MAAAR,KAAAtM,EAAAulB,eAAAzY,MAAAR,KACAtM,EAAA8M,MAAAP,QAAAvM,EAAAulB,eAAAzY,MAAAP,SACA,0BAAA1L,QAAA,SAAAtC,GACAyB,EAAA8M,MAAAvO,KACAyB,EAAA8M,MAAAvO,UAqBA,OAfA,kCAAAsC,QAAAb,EAAA4lB,UACA5lB,EAAAQ,KAAA8C,OACAtD,EAAAU,KAAA4C,KAAAtD,EAAAQ,KAAA8C,MAEAtD,EAAAsD,OACAtD,EAAAU,KAAA4C,SAEAtD,EAAAQ,KAAAoD,SACA5D,EAAAU,KAAAkD,OAAA5D,EAAAQ,KAAAoD,QAEA5D,EAAA0R,YACAC,sBAAA,WAAmD3R,EAAA6E,QAAA,KAEnD7E,EAAA6E,QAAA,GAEA7E,IAQAA,EAAAU,KAAAgoB,KAAA,SAAAhlB,GACA1D,EAAAyW,UAAA,GAQAzW,EAAAU,KAAAygB,MAAA,WACAnhB,EAAAyW,UAAA,EACAzW,EAAAkhB,aAAAC,SAEAniB,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAAkC,QAEA9B,IAAA,SAAAC,GACAhF,EAAA2E,WAAAkC,OAAA7B,EACAhF,EAAA6E,QAAA,MAGA7F,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAAmC,OAEA/B,IAAA,SAAAC,GACAhF,EAAA2E,WAAAmC,MAAA9B,EACAhF,EAAA6E,QAAA,MAGA7F,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA0I,gBAGA1J,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAJ,QAAA+G,KAAA/F,EAAAsP,YAAAuG,IAAA,SAAAzH,GACA,MAAApO,GAAAsP,WAAAlB,QAIApP,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA0R,eAGA1S,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA2E,YAEAI,IAAA,SAAAC,GACA,IAAAhF,EAAA0R,YACA,SAAAiX,WAAA,yDAEA3oB,GAAA2E,WAAAK,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA2E,cAGA3F,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAA6I,cAGAxO,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAA4I,aAGAvO,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA0N,UAAAkH,gBAGA5V,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA0N,UAAAwH,eAGAlW,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAA0N,UAAAD,WAEA1I,IAAA,SAAAC,GACAhF,EAAA0N,UAAAD,UAAAzI,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA0N,UAAAC,YAEA5I,IAAA,SAAAC,GACAhF,EAAA0N,UAAAC,WAAA3I,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAA8M,SAGA9N,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAmc,SAGAnd,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAkhB,gBAGAliB,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA6R,eAGA7S,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA2O,gBAGA3P,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAAmN,eAGAnO,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA4L,cAGA5M,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAAgU,YAGAhV,OAAAC,eAAAe,EAAAU,KAAA,WACAtB,IAAA,WACA,MAAAY,GAAAkjB,WAGAljB,EAAAU,KAAA+L,WAAAzM,EAAAyM,WACAzM,EAAA4oB,iBAAA,SAAAtlB,EAAAulB,GACA,GAAAtqB,GAAAK,EAAA8c,EAAAoN,CACA,WAAAxlB,GAAA,KAAAA,OAAAvD,KAAAuD,EACA,MAAAulB,MAUA,IARA,gBAAAvlB,IACA,gBAAAA,IACA,iBAAAA,KACAA,IAAyBylB,EAAAzlB,KAEzBvC,MAAAioB,QAAA1lB,IAAA,gBAAAA,KACAA,QAEAvC,MAAAioB,QAAA1lB,EAAA,qBAAAA,GAAA,WAAAA,EAAA,IACAvC,MAAAioB,QAAA1lB,IAAA,IAAAA,EAAA8M,OACA,MAAAyY,GAAAvlB,EAEA,sBAAAA,GAWA,aAVA/E,EAAA+E,EAAAlD,MAAAJ,EAAAU,MAAA,SAAA9B,GACAkqB,GACAjZ,QAAAC,KAAA,mHAEA9P,EAAA4oB,iBAAAhqB,EAAAiqB,SAGAC,GAAA,EACA9oB,EAAA4oB,iBAAArqB,EAAAsqB,IAOA,IAHA9nB,MAAAioB,QAAA1lB,IAAA,gBAAAA,KACAA,OAEAvC,MAAAioB,QAAA1lB,GAmBA,MAlBAvC,OAAAioB,QAAA1lB,EAAA,MAEAA,OAGAoY,EAAA,EACA9c,KACA0E,EAAAzC,QAAA,SAAAmM,GACA0O,EAAArD,KAAAqD,MAAA1O,EAAAoD,UAGA9M,EAAAzC,QAAA,SAAAmM,EAAAwD,GACA,GAAA/J,EAEA,KADA7H,EAAA4R,MACA/J,EAAA,EAA+BA,EAAAiV,EAASjV,GAAA,EACxC7H,EAAA4R,GAAA/J,GAAAuG,EAAAvG,KAGAoiB,EAAAjqB,EAEA,UAAA+E,OAAA,mGAEA3E,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA8iB,cAGA9jB,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA4Y,IAAAhY,EAAAyS,eACAmL,MAAA5d,EAAAoR,iBACAuM,OAAA3d,EAAA0S,kBACAoF,KAAA9X,EAAAmR,oBAIAnS,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA4Y,IAAAhY,EAAAwS,eACAoL,MAAA5d,EAAAqR,iBACAsM,OAAA3d,EAAA2S,kBACAmF,KAAA9X,EAAAsR,oBAIAtS,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,MAAAY,GAAAsd,wBAGAte,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAse,iBAAA,MAGAtf,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAse,qBAGAtf,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAoS,mBAAAyD,IAAA,SAAAuN,GACA,MAAAA,QAIApkB,OAAAC,eAAAe,EAAAU,KAAA,OACAtB,IAAA,WACA,MAAAY,GAAA+G,OAGA/H,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAA4c,aAEA7X,IAAA,SAAAC,GACA,IAAAjE,MAAAioB,QAAAhkB,IAAA,gBAAAA,GAAA,GACA,SAAArB,OAAA,sCAEA,QAAA5D,KAAAiF,EAAA,GAAAnG,KACA,SAAA8E,OAAA,sEAEA3D,GAAA4D,OAAAoB,EAAA6Q,IAAA,SAAAyF,EAAA9K,GAQA,MAPA8K,GAAAxU,MAAAwU,EAAAxU,OAAA9G,EAAAkD,MAAA+J,YACAqO,EAAAtb,EAAA2I,UAAA3I,EAAAkkB,kBAAA5I,EAAAzc,MACAyc,EAAA9Y,OAAA8Y,EAAA9Y,QAAAxC,EAAAwC,OAAA8Y,EAAA5O,MACA4O,EAAA5O,KAAA4O,EAAA5O,MAAA,SACA4O,EAAA9K,QACA8K,EAAApP,YAAAsE,EACA8K,EAAAtQ,UAAA,EACAsQ,IAEAtb,EAAA6jB,eAAA9jB,GACAC,EAAAikB,mBACAjkB,EAAA8jB,qBACA9jB,EAAAslB,sBACAtlB,EAAA6E,QAAA,GACA7E,EAAAqD,cAAA,iBAAqDO,OAAA5D,EAAA4D,YAGrD5E,OAAAC,eAAAe,EAAAU,KAAA,QACAtB,IAAA,WACA,MAAAY,GAAAsD,KAAAuS,IAAA,SAAA7I,GAEA,aADAA,GAAAhN,EAAA2I,UACAqE,KAGAjI,IAAA,SAAAC,GACAhF,EAAA4oB,iBAAA5jB,EAAA,SAAApG,GACAoB,EAAA0kB,aAAA9lB,EAAAiX,IAAA,SAAA7I,GAGA,MAFAA,GAAAhN,EAAA2I,UAAA3I,EAAAijB,IACAjjB,EAAAijB,KAAA,EACAjW,IAEAhN,EAAAkjB,WAEAljB,EAAAsD,KAAAtD,EAAA0kB,aACA1kB,EAAA4D,SACA5D,EAAA6jB,WAAA7jB,EAAA2mB,qBAEA3mB,EAAA4D,QAAA,IAAA5D,EAAAsD,KAAA8M,SACApQ,EAAA6jB,aAA4ChlB,KAAA,KAC5CmB,EAAA6jB,WAAA,GAAA7jB,EAAA2I,UAAA3I,EAAAkkB,kBAAA,KAEAlkB,EAAA6jB,aAAA7jB,EAAA4D,SACA5D,EAAA8jB,qBACA9jB,EAAAslB,sBACAtlB,EAAAqD,cAAA,iBAA6DO,OAAA5D,EAAA6jB,cAE7D7jB,EAAAikB,mBACAjkB,EAAAE,WAAA+oB,mBAAAjpB,EAAAsD,KAAA8M,OAAA,OACArQ,KAAAC,EAAAulB,gBACAvlB,EAAA+hB,WAEA/hB,EAAA8hB,kBAAA,iBACA9hB,EAAA6E,UAAA7E,EAAA0R,aAA8D1R,EAAAoD,MAAA,GAC9DpD,EAAAmS,kBACAnS,EAAAslB,sBACAtlB,EAAAqD,cAAA,eAAuDC,KAAAtD,EAAAsD,YAIvDtD,EAAA+lB,cAAA,WASA,QAAAmD,GAAAlkB,EAAAmkB,GACA,GAAAllB,MAAAe,GACA,SAAArB,OAAA,mCAEAqB,GAAA,IACAA,EAAA,GAEAA,EAAA4P,IACA5P,EAAA4P,GAEAA,EAAA,IACA5P,EAAA,GAEAyI,EAAAzI,EACAmkB,GACAnpB,EAAA+b,SAGA,QAAAqN,GAAApkB,EAAAmkB,GACA,GAAAllB,MAAAe,GACA,SAAArB,OAAA,oCAEAqB,GAAA,IACAA,EAAA,GAEAA,EAAAkQ,IACAlQ,EAAAkQ,GAEAA,EAAA,IACAlQ,EAAA,GAEA2I,EAAA3I,EACAmkB,GACAnpB,EAAA+b,SAzCA,GAAAsN,GAAA,EACAC,EAAA,EACA7b,EAAA,EACAE,EAAA,EACAiH,EAAA,EACAM,EAAA,EACAP,EAAA,GACAM,EAAA,EAqCAjV,GAAA0N,UAAAqC,SAAA,WACA,mBAAyBmF,EACzB,eAAAN,EACA,aAAAjH,EACA,YAAAF,EAAA,KAEAzN,EAAA0N,UAAAqM,SAAA,SAAAtT,EAAAE,GACAyiB,EAAA3iB,GAAA,GACAyiB,EAAAviB,IAEA3H,OAAAC,eAAAe,EAAA0N,UAAA,mBACAtO,IAAA,WACA,MAAAuV,IAEA5P,IAAA,SAAAC,GACA2P,EAAA3P,KAGAhG,OAAAC,eAAAe,EAAA0N,UAAA,kBACAtO,IAAA,WACA,MAAA6V,IAEAlQ,IAAA,SAAAC,GACAiQ,EAAAjQ,KAGAhG,OAAAC,eAAAe,EAAA0N,UAAA,UACAtO,IAAA,WACA,MAAAiqB,IAEAtkB,IAAA,SAAAC,GACA4P,EAAA5P,IACAyI,EAAA,GAEA4b,EAAArkB,KAGAhG,OAAAC,eAAAe,EAAA0N,UAAA,SACAtO,IAAA,WACA,MAAAkqB,IAEAvkB,IAAA,SAAAC,GACAskB,EAAAtkB,KAGAhG,OAAAC,eAAAe,EAAA0N,UAAA,aACAtO,IAAA,WACA,MAAAqO,IAEA1I,IAAAmkB,IAEAlqB,OAAAC,eAAAe,EAAA0N,UAAA,cACAtO,IAAA,WACA,MAAAuO,IAEA5I,IAAAqkB,IAEApqB,OAAAC,eAAAe,EAAA0N,UAAA,gBACAtO,IAAA,WACA,MAAAwV,IAEA7P,IAAA,SAAAC,GACAyI,EAAAzI,IACAyI,EAAA4K,KAAAqD,IAAA1W,EAAA,IAEA4P,EAAAyU,IACA5b,EAAA,GAEAmH,EAAA5P,KAGAhG,OAAAC,eAAAe,EAAA0N,UAAA,eACAtO,IAAA,WACA,MAAA8V,IAEAnQ,IAAA,SAAAC,GACA2I,EAAA3I,IACA2I,EAAA0K,KAAAqD,IAAA1W,EAAA,IAEAkQ,EAAAlQ,QAMC5E,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IP+4EK,SAAU/B,EAAQD,EAASM,GQx0GjC,GAAAyB,GAAAC,CAEAD,UAyeCE,MAzeDD,EAAA,WACA,YACA,iBAAAE,GAEA,QAAAupB,GAAAxc,EAAApD,EAAA6f,EAAAC,GASA,QAAAC,KACAF,EAAA3oB,QAAA,SAAA0B,GAGA,QAAAonB,GAAAjmB,GACAA,EAAAkmB,gBAAAC,GACAtnB,EAAA2Z,YAAA2N,YAAAnmB,EAAAkmB,eACAE,IAAApmB,EAAAkmB,eACAG,IAAArmB,EAAAkmB,gBAEArnB,EAAA2Z,YAAAza,UACAuoB,EAAArP,OAAAqP,EAAAne,QAAAtJ,EAAA2Z,aAAA,GACA3Z,EAAA2Z,gBAAAnc,GACAgqB,EAAA1P,oBAAA,WAAAsP,GACAE,EAAAxP,oBAAA,WAAAsP,GACAI,EAAAE,aAAA,mBACAF,EAAAE,aAAA,gBAEA,QAAAC,GAAAV,GAEA,SAAAO,EAAAI,aAAA,YACA,MAAAJ,EAAAI,aAAA,eADA,CAIA,GAAAC,GAAAL,EAAApS,uBACAyS,IACAtS,KAAAsS,EAAAtS,KAAA9X,EAAAkD,MAAAmnB,2BAAAR,EAAAhc,YACAmK,IAAAoS,EAAApS,IAAAhY,EAAAkD,MAAAonB,0BACA3M,OAAAyM,EAAAzM,OACAC,MAAAwM,EAAAxM,OAEArb,EAAA2Z,YAAAqN,EAAAxc,EAAAqd,EAAAZ,EAAA9oB,GACAqpB,EAAAE,aAAA,mBACAF,EAAAtQ,iBAAA,WAAAkQ,GACAE,EAAApQ,iBAAA,WAAAkQ,GACAK,EAAAvlB,KAAAlC,EAAA2Z,cAEA,QAAAqO,KACA,GAAAhsB,EACA,UAAAwrB,EAAAI,aAAA,gBAIA,GADAJ,EAAAE,aAAA,eACA,kBAAA1nB,GAAAinB,MAOA,gBAHAzpB,MAHAxB,EAAAgE,EAAAinB,MAAAppB,MAAAM,GAAA,SAAA8oB,GACAU,EAAAV,QAEAzoB,MAAAioB,QAAAzqB,IACA2rB,EAAA3rB,GAIA2rB,GAAA3nB,EAAAinB,QAlDA,GACAM,GADAC,EAAAxQ,SAAAiR,cAAA,QAoDA,SAAAjoB,GACA,QAAAkoB,GAAAC,GACA,UAAAA,EAAA,CACA,qBAAAA,GACA,MAAAD,GAAAC,EAAA3d,GAEA,oBAAA2d,GAEA,WADAX,GAAAY,YAAAD,EAGA1qB,GAAA4qB,kBAAAb,EAAA,qCACAA,EAAAtQ,iBAAA,uBACAzZ,EAAA4qB,kBAAAb,EAAA,6CAEAA,EAAAtQ,iBAAA,sBACAzZ,EAAA4qB,kBAAAb,EAAA,uCAEAA,EAAAxjB,UAAAmkB,GAGAD,EAAAloB,EAAA+L,OACA/L,EAAAwnB,wBACAxnB,EAAAinB,OAAAjnB,EAAAinB,MAAApZ,OAAA,qBAAA7N,GAAAinB,SACAM,EAAAvQ,SAAAiR,cAAA,OACAxqB,EAAA4qB,kBAAAd,EAAA,uCACAA,EAAAvjB,UAAAvG,EAAAkD,MAAA2nB,0BACAd,EAAAY,YAAAb,GACAC,EAAAtQ,iBAAA,YAAA8Q,GACAR,EAAAtQ,iBAAA,sBACAsQ,EAAAE,aAAA,kBAGA1nB,EAAA6X,OACA2P,EAAAtQ,iBAAA,iBAAA1M,GACAxK,EAAA6X,MAAAha,MAAAJ,GAAA+M,OAIAxK,GACAsnB,EAAAc,YAAAZ,KAGA,QAAAe,GAAApQ,GACA8O,EAAA9O,GAAAqP,qBAAA1mB,cAAA,GAAA0nB,OAAA,UAEA,QAAAC,KACAnB,EAAApc,UAAA,EACAzN,EAAAgb,cAAA2P,YAAAM,GACiBA,EAAAtmB,YACjBsmB,EAAAtmB,WAAAugB,YAAA+F,GAEApB,EAAApc,WAAAoc,EAAAjV,aAAAiV,EAAA/b,cAAAod,EAAAvmB,WACAumB,EAAAvmB,WAAAugB,YAAAgG,GACiBrB,EAAAjV,aAAAiV,EAAA/b,aAAA,KACjB+b,EAAApc,WAAAoc,EAAAjV,aAAAiV,EAAA/b,eACA9N,EAAAgb,cAAA2P,YAAAO,GAGA,QAAAC,GAAAze,GACA,eAAA9C,KACA,GAAA6G,GAAAzQ,EAAAE,WAAAkrB,wBACA,QAAA1e,GAAA,IAAAmd,EAAApc,WACA,SAAAf,GAAAmd,EAAApc,YAAAoc,EAAAjV,eACAiV,EAAApc,WAAA,OAAAf,GAAA+D,IACA4a,EAAAlS,WAAAvP,EAAA5J,EAAAE,WAAAorB,yBAAA5e,KAGA,QAAA6e,GAAA7e,GACA,kBACAuM,aAAAoS,IAnIA,GAMA5T,GANAoS,EAAAtQ,SAAAiR,cAAA,OACAS,EAAA1R,SAAAiR,cAAA,OACAU,EAAA3R,SAAAiR,cAAA,OACAR,KACAwB,GAAA,EACA9qB,IAEA,KAAAK,MAAAioB,QAAAQ,GAAwC,SAAA7lB,OAAA,sCA4OxC,OAzCAjD,GAAA2N,WAAArO,EAAAU,KACAA,EAAA+oB,oBACA/oB,EAAAmpB,YAtEA,WACA,GAAA4B,MACA7rB,EAAAI,EAAA0rB,aAAA1rB,EAAA0X,OACAgS,KACA1pB,EAAA4qB,kBAAAf,EAAA,gCACA4B,EAAAhlB,EAAAkD,EAAAmO,KAAAlY,EAAAkY,KACA2T,EAAA9kB,EAAAgD,EAAAqO,IAAApY,EAAAoY,IACAyT,EAAA5kB,OAAA,EACA8kB,GAAA,EACA9B,EAAA3mB,MAAA0oB,SAAA,WACAX,EAAA/nB,MAAA2oB,MAAA7rB,EAAAkD,MAAA4oB,sBACAZ,EAAAhoB,MAAA2oB,MAAA7rB,EAAAkD,MAAA4oB,uBACAb,EAAAC,GAAArqB,QAAA,SAAAkrB,GACAA,EAAA7oB,MAAA8oB,UAAA,SACAD,EAAA7oB,MAAA0oB,SAAA,WACAG,EAAA7oB,MAAA+oB,OAAAN,EAAA,IAEA9B,EAAA3mB,MAAA+oB,OAAAN,EACAlC,KAAAyC,gBACArC,EAAA3mB,MAAAipB,UAAAjrB,OAAAkrB,YAAAX,EAAA9kB,EAAA3G,EAAAkD,MAAAmpB,yBAAA,KACAxC,EAAA3mB,MAAAopB,SAAA3iB,EAAA7C,MAAA,KACA2kB,EAAA9kB,GAAAgD,EAAA9C,QAEAgjB,EAAA3mB,MAAA4U,KAAA2T,EAAAhlB,EAAA,KACAojB,EAAA3mB,MAAA8U,IAAAyT,EAAA9kB,EAAA,KACAkjB,EAAApQ,iBAAA,SAAAuR,GACAnB,EAAApQ,iBAAA,iBAAA/V,GACA1D,EAAAyW,WACAoT,EAAApc,WAAA/J,EAAAwe,OACA2H,EAAAlc,YAAAjK,EAAAue,QAEA+I,MAEAC,EAAA1kB,UAAAvG,EAAAkD,MAAAqpB,uBACArB,EAAA3kB,UAAAvG,EAAAkD,MAAAspB,yBACA3C,EAAAc,YAAAM,GACA1R,SAAAC,KAAAmR,YAAAO,GACA3R,SAAAC,KAAAmR,YAAAd,GACApS,EAAAoS,EAAAlS,0BACAF,EAAAkG,OAAAzc,OAAAkrB,cAAA3C,KAAAyC,gBACAT,EAAA9kB,EAAAzF,OAAAkrB,YAAAvC,EAAA/b,aACA2d,EAAA9kB,EAAA,IAAoC8kB,EAAA9kB,EAAA,GACpCkjB,EAAA/b,aAAA5M,OAAAkrB,cACAvC,EAAA3mB,MAAA2D,OAAA3F,OAAAkrB,YAAApsB,EAAAkD,MAAAupB,wBAAA,OAGAhV,EAAAmG,MAAA1c,OAAAwrB,aAEAjB,EAAAhlB,EADAgjB,EACAA,EAAAI,UAAArc,WAAAqc,EAAAhc,YAEA3M,OAAAwrB,WAAA7C,EAAAhc,aAGAgc,EAAA3mB,MAAA4U,KAAA2T,EAAAhlB,EAAA,KACAojB,EAAA3mB,MAAA8U,IAAAyT,EAAA9kB,EAAA,KACA8Q,EAAAoS,EAAAlS,wBACAsT,EAAA/nB,MAAA8U,IAAAP,EAAAO,IAAA,KACAkT,EAAAhoB,MAAA8U,IAAAP,EAAAO,IAAAP,EAAA5Q,OAAAqkB,EAAApd,aAAA,KACAmd,EAAA/nB,MAAA4U,KAAAL,EAAAK,KAAA,KACAoT,EAAAhoB,MAAA4U,KAAAL,EAAAK,KAAA,KACAoT,EAAAhoB,MAAA4D,MAAA+iB,EAAAhc,YAAA,KACAod,EAAA/nB,MAAA4D,MAAA+iB,EAAAhc,YAAA,KACAqd,EAAAzR,iBAAA,YAAA0R,EAAA,SACAD,EAAAzR,iBAAA,WAAA8R,EAAA,SACAN,EAAAxR,iBAAA,YAAA0R,EAAA,OACAF,EAAAxR,iBAAA,WAAA8R,EAAA,OACAP,OAMAtqB,EAAAoqB,aACApqB,EAAA+W,OACA/W,EAAA8oB,QACA9oB,EAAAuqB,UACAvqB,EAAAwqB,YACAxqB,EAAAe,QAAA,WACAwX,aAAAoS,GACArB,EAAAnpB,QAAA,SAAAlC,GACAA,EAAA8C,aAEAypB,EAAAD,EAAApB,GAAAhpB,QAAA,SAAAkrB,GACAA,EAAApnB,YAAwConB,EAAApnB,WAAAugB,YAAA6G,MAGxC/sB,OAAAC,eAAAyB,EAAA,iBACAtB,IAAA,WACA,MAAAosB,IAEAzmB,IAAA,SAAAC,GACA,mBAAAA,IAAAf,MAAAe,IAAA2nB,SAAA3nB,IACA,SAAArB,OAAA,qDAEA6nB,GAAAxmB,EACAwmB,EAAAhC,EAAApZ,OAAA,IACAob,EAAAhC,EAAApZ,OAAA,GAEAob,EAAA,IACAA,EAAA,GAEAhC,EAAA3oB,QAAA,SAAA0B,EAAAiO,GACA,GAAAA,IAAAgb,EACA,MAAAxrB,GAAA4qB,kBAAAroB,EAAAwnB,qBAAA,0CAEA/pB,GAAA4qB,kBAAAroB,EAAAwnB,qBAAA,0CAIArpB,EAEA,QAAAksB,GAAAlpB,GAQA,QAAAmpB,KACAC,EAAA5pB,MAAA6pB,WAAA/sB,EAAAkD,MAAA8pB,6BACAF,EAAA5pB,MAAA2oB,MAAA7rB,EAAAkD,MAAA+pB,wBACAjtB,EAAAsoB,qBACAwE,EAAA5pB,MAAA6pB,WAAA/sB,EAAAkD,MAAAgqB,qCACAJ,EAAA5pB,MAAA2oB,MAAA7rB,EAAAkD,MAAAiqB,iCAGA,QAAAC,KACAC,KACArtB,EAAAsD,KAAAd,OAAA,SAAA5D,EAAAL,GAAkD,MAAAA,GAAAyB,EAAAE,WAAAotB,uBAAmDzsB,QAAA,SAAAmM,GACrG,GAAAhI,GAAAgI,EAAAtJ,EAAA0C,KAAA8E,OAAArM,KACAwuB,GAAAroB,KACAqoB,EAAAroB,IACAsJ,MAAAtO,EAAAyM,WAAA/I,EAAA0C,KAAA8E,OAAAwB,MAAA,WAAgFtG,MAAQpB,WACxFoV,MAAA,SAAA1W,GACAopB,EAAA9nB,QACAtB,EAAAmV,kBACAiU,EAAAzpB,cAAA,GAAA0nB,OAAA,UACA/qB,EAAAutB,2BAKAF,EAAAruB,OAAA+G,KAAAsnB,GAAAxX,IAAA,SAAA/Q,GACA,MAAAuoB,GAAAvoB,KAGA,QAAA0oB,GAAAzgB,GACAA,IAAA,oBAAAlB,QAAAkB,EAAAwU,WACA6L,IACAK,EAAAX,EAAAnV,wBACA+V,IACAA,EAAAjsB,UACAisB,MAAA3tB,IAEA2tB,EAAAnE,EAAA7lB,GACAoU,KAAA2V,EAAA3V,KACAE,IAAAyV,EAAAzV,IACA4F,MAAA6P,EAAA7P,MACAD,OAAA8P,EAAA9P,OACA9W,OAAA4mB,EAAA5mB,OACAC,MAAA2mB,EAAA3mB,OACiBumB,GAAsBnB,eAAA,IACvCwB,EAAAlC,cAAA,GAnDA,GAKA6B,GACAI,EANAE,EAAApU,SAAAiR,cAAA,OACAoD,EAAArU,SAAAiR,cAAA,OACAqD,EAAAtU,SAAAiR,cAAA,UACAsC,EAAAvT,SAAAiR,cAAA,SACAnrB,EAAAqE,EAAA0C,MAAA1C,EAAA0C,KAAA8E,OAAAxH,EAAA0C,KAAA8E,OAAAoD,OAAA5K,EAAA0C,KAAA8E,OAAArM,KAAA,EAiDAmB,GAAA4qB,kBAAAgD,EAAA,sCACA5tB,EAAA4qB,kBAAAiD,EAAA,8CACA7tB,EAAA4qB,kBAAAkC,EAAA,6CACAD,IACAC,EAAAgB,QAAA9tB,EAAAutB,oBACAT,EAAArT,iBAAA,mBAAA/V,GAEA,KAAAA,EAAA6d,UACAmM,EAAAlC,eAAA,GAGA,KAAA9nB,EAAA6d,UACAmM,EAAAlC,eAAA,GAGA,KAAA9nB,EAAA6d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACAxrB,EAAAwmB,sBAGA,IAAA9iB,EAAA6d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACA9nB,EAAAoV,kBAGA,KAAApV,EAAA6d,SACAvhB,EAAAwmB,uBAGAsG,EAAArT,iBAAA,mBACAzZ,EAAAye,UAAA/a,EAAA0C,KAAA8E,OAAArM,KAAAiuB,EAAA9nB,SAEA8nB,EAAArT,iBAAA,QAAA+T,IACA,2CAAA3sB,QAAA,SAAAktB,GACAjB,EAAArT,iBAAAsU,EAAAlB,KAEAC,EAAA9nB,MAAAtB,EAAA0C,KAAA8E,OAAAlL,EAAAgQ,cAAAtM,EAAA0C,KAAA8E,OAAArM,OAAA,MACA+uB,EAAArnB,UAAAvG,EAAAE,WAAA8tB,iBAAAzL,QAAA,MAAAljB,GACAwuB,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAA1tB,GAAAutB,qBAEAC,MAEAK,EAAAtnB,UAAAvG,EAAAkD,MAAA+qB,wBACAN,EAAAlU,iBAAA,iBAAA/V,GACA,MAAAA,GAAAmV,oBAEA8U,EAAAhD,YAAAiD,GACAD,EAAAhD,YAAAmC,GACAa,EAAAhD,YAAAkD,GACAnqB,EAAA8lB,MAAA/kB,MACA6J,MAAAqf,IAEA3uB,OAAA+G,KAAA/F,EAAAgQ,eAAAI,QACApR,OAAA+G,KAAA/F,EAAAgQ,eAAAnP,QAAA,SAAAqtB,GACA,GAAAjlB,GAAAjJ,EAAAwlB,gBAAA0I,EACAxqB,GAAA8lB,MAAA/kB,MACA6J,MAAAtO,EAAAE,WAAAiuB,uBAAA5L,QAAA,MAAAtZ,EAAAqF,OAAArF,EAAApK,MACAub,MAAA,SAAA1W,GACAA,EAAAoV,iBACA9Y,EAAAye,UAAAyP,EAAA,IACAluB,EAAAkhB,aAAAC,aAMA,QAAAiN,GAAA1qB,GACA,GAAA2qB,KAAA3qB,EAAA0C,KAAAkoB,cAAA5qB,EAAA0C,KAAA4H,iBACAtK,EAAA0C,KAAAmoB,aAAA7qB,EAAA0C,KAAAoF,UAAA9H,EAAA0C,KAAAqF,cACA/H,EAAA0C,KAAA8E,MACAlL,GAAAE,WAAAsuB,YAAAH,GACAzB,EAAAlpB,GAEA1D,EAAAE,WAAAuuB,UACAzuB,EAAA4L,WAAA+J,OAAA,SAAAhW,EAAAwJ,GACA,MAAAxJ,GAAAwJ,EAAAiH,QACqB,MACrB1M,EAAA8lB,MAAA/kB,MACA6J,MAAAtO,EAAAE,WAAAwuB,SACAtU,MAAA,WACAb,SAAAoV,YAAA,QACA3uB,EAAAwmB,qBACAxmB,EAAAkhB,aAAAC,WAIAnhB,EAAAE,WAAAqP,gBAAAvP,EAAAE,WAAA0uB,0BACA5vB,OAAA+G,KAAA/F,EAAA8M,MAAAR,MAAA8D,OAAA,GACApR,OAAA+G,KAAA/F,EAAA8M,MAAAP,SAAA6D,OAAA,IACA1M,EAAA8lB,MAAA/kB,MACA6J,MAAAtO,EAAAE,WAAA2uB,wBACAzU,MAAA,SAAA1W,GACAA,EAAAoV,iBACA9Y,EAAA8M,MAAAR,QACAtM,EAAA8M,MAAAP,WACAvM,EAAAmS,kBACAnS,EAAA8jB,qBACA9jB,EAAAulB,mBAAAxlB,GACAC,EAAAqD,cAAA,gBAA4D4J,YAAAjN,EAAAkD,MAAA+J,cAC5DjN,EAAAqD,cAAA,aAAyDuK,WAAA5N,EAAAkD,MAAA0K,aACzD5N,EAAAwf,iBACAxf,EAAA6E,QAAA,GACA7E,EAAAwmB,qBACAxmB,EAAAkhB,aAAAC,WAIAnhB,EAAAE,WAAA4uB,cAAA9uB,EAAAE,WAAA6uB,mBAAAV,IACA3qB,EAAA8lB,MAAA/kB,MACA6J,MAAAtO,EAAAE,WAAA8uB,yBAAAzM,QAAA,KAAA7e,EAAA0C,KAAA8E,OAAAoD,OAAA5K,EAAA0C,KAAA8E,OAAArM,MACAub,MAAA,SAAArN,GACAA,EAAA+L,iBACA9Y,EAAAuT,MAAA7P,EAAA0C,KAAA8E,OAAArM,KAAA,OACAmB,EAAAkhB,aAAAC,WAGAzd,EAAA8lB,MAAA/kB,MACA6J,MAAAtO,EAAAE,WAAA+uB,0BAAA1M,QAAA,KAAA7e,EAAA0C,KAAA8E,OAAAoD,OAAA5K,EAAA0C,KAAA8E,OAAArM,MACAub,MAAA,SAAArN,GACAA,EAAA+L,iBACA9Y,EAAAuT,MAAA7P,EAAA0C,KAAA8E,OAAArM,KAAA,QACAmB,EAAAwmB,qBACAxmB,EAAAkhB,aAAAC,YAzaA,GAAAkK,GAAAqC,EAAA/B,EAAA,CA8aA3rB,GAAAutB,oBAAA,WACAG,IACAA,EAAAjsB,UACAisB,MAAA3tB,KAGAC,EAAAwmB,mBAAA,WACAjN,SAAAc,oBAAA,QAAAra,EAAAwmB,oBACAmF,EAAA,EACA3rB,EAAAutB,sBACAvtB,EAAAkc,aACAlc,EAAAkc,YAAAza,UAEAzB,EAAAkc,gBAAAnc,IAEAC,EAAAkvB,iBAAA,SAAAxrB,EAAAuY,GAIA,QAAAkT,KACAxd,sBAAA,WACA4H,SAAAE,iBAAA,QAAAzZ,EAAAwmB,oBACAjN,SAAAc,oBAAA,UAAA8U,KANA,GAAAnvB,EAAAyW,UAAA/S,EAAA8c,SAAAxgB,EAAA0X,OAAA,CASA,GAAA8R,MACA7f,EAAAsS,GAAAjc,EAAAoc,YAAA1Y,GAAA,GACAqJ,GACA6L,YAAAlV,EACA0C,KAAApG,EAAAwY,UAAA7O,EAAAlD,EAAAkD,EAAAhD,GACA6iB,QAEAzc,GAAA3G,KAAA+F,QACAiiB,EAAArhB,GAEA/M,EAAAqD,cAAA,cAAA0J,IAGAA,EAAA3G,KAAA+F,SACAnM,EAAAkc,aACAlc,EAAAwmB,qBAEAxmB,EAAAkc,YAAAqN,EAAAxc,GACA+K,KAAAnO,EAAAlD,EAAAkD,EAAA8N,KAAAK,KAAA9X,EAAAkD,MAAAksB,sBAAApvB,EAAA0G,iBACAsR,IAAArO,EAAAhD,EAAAgD,EAAA8N,KAAAO,IAAAhY,EAAAkD,MAAAmsB,qBAAArvB,EAAA4G,gBACAgX,MAAA7Q,EAAA3G,KAAAU,MAAAiG,EAAA3G,KAAAK,EAAAkD,EAAA8N,KAAAK,KACA6F,OAAA5Q,EAAA3G,KAAAS,OAAAkG,EAAA3G,KAAAO,EAAAgD,EAAA8N,KAAAO,IACAnR,OAAAkG,EAAA3G,KAAAS,OACAC,MAAAiG,EAAA3G,KAAAU,OACiB0iB,GACjBjQ,SAAAE,iBAAA,UAAA0V,GACAzrB,EAAAoV,sBAKC1Y,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IRg1GK,SAAU/B,EAAQD,EAASM,GS3zHjC,GAAAyB,GAAAC,CAEAD,UA6fCE,MA7fDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAonB,gBAAA,SAAAkI,GACA,GAAAC,GAAAvvB,EAAA4rB,SAAA5rB,EAAA2E,YACA6qB,EAAAxvB,EAAA4rB,SAAA0D,GACA1vB,EAAAI,EAAA0rB,aAAA1rB,EAAA0X,QACA+X,GACAhpB,EAAA,EACAE,EAAA,EACAsC,EAAA,EACAD,EAAA,GAEA0mB,GACAjpB,GAAAkpB,IACAhpB,GAAAgpB,IACA1mB,EAAA0mB,IACA3mB,EAAA2mB,KAEA7d,EAAA9R,EAAA+R,yBACAb,EAAAlR,EAAAgS,0BASA,OARAud,GAAAvX,KAAApY,EAAAoY,IACAuX,EAAAzX,MAAAlY,EAAAkY,KACA0X,EAAAxX,KAAApY,EAAAoY,IACAwX,EAAA1X,MAAAlY,EAAAkY,KACA2X,EAAAxmB,EAAAsmB,EAAAvX,IAAAuX,EAAA1oB,OAAAyoB,EAAA/hB,UAAAvN,EAAAkD,MAAAsO,eACAie,EAAAzmB,EAAAumB,EAAAzX,KAAAyX,EAAAzoB,MAAAwoB,EAAA9hB,WAAAxN,EAAAkD,MAAAsO,eACAie,EAAAhpB,EAAA8oB,EAAAzX,MAAA,EAAA0X,EAAA1X,KAAA5G,EACAue,EAAA9oB,EAAA4oB,EAAAvX,KAAA,EAAAwX,EAAAxX,IAAAlG,GAEArL,EAAAgpB,EAAAhpB,EAAAipB,EAAAjpB,EAAAgpB,EAAAhpB,EAAAipB,EAAAjpB,EACAE,EAAA8oB,EAAA9oB,EAAA+oB,EAAA/oB,EAAA8oB,EAAA9oB,EAAA+oB,EAAA/oB,EACAsC,EAAAwmB,EAAAxmB,EAAAymB,EAAAzmB,EAAAwmB,EAAAxmB,EAAAymB,EAAAzmB,EACAD,EAAAymB,EAAAzmB,EAAA0mB,EAAA1mB,EAAAymB,EAAAzmB,EAAA0mB,EAAA1mB,IAGAhJ,EAAA0mB,YAAA,SAAA4I,GACA,GAAAG,GAAAzvB,EAAAonB,gBAAAkI,EACAG,GAAAzmB,EAAA,IAAiCymB,EAAAzmB,EAAA,GACjCymB,EAAAxmB,EAAA,IAAiCwmB,EAAAxmB,EAAA,GACjCqmB,EAAApsB,MAAAiM,KAAA,QACAsgB,EAAA9oB,EAAA,MACA8oB,EAAAzmB,EAAA,MACAymB,EAAAxmB,EAAA,MACAwmB,EAAAhpB,EAAA,OAcAzG,EAAA0rB,aAAA,SAAAhoB,GAEA,IADA,GAAA+C,GAAA,EAAAE,EAAA,EACAjD,EAAAiB,YAAA,oBAAAjB,EAAAksB,UACA,yBAAAlsB,EAAA4J,UACA,yBAAA5J,EAAA4J,WACA7G,GAAA/C,EAAAiK,WACAhH,GAAAjD,EAAA+J,WAEA/J,IAAAiB,UAEA,QAAoBmT,KAAArR,EAAAuR,IAAArR,IAEpB3G,EAAA8b,gBAAA,WACA,GAAA9b,EAAAmc,MAAA,CACA,GAAAxS,GAAA3J,EAAA0X,OAAAC,wBACA/X,EAAAI,EAAA0rB,aAAA1rB,EAAA0X,QACAmY,EAAA,EAAA7vB,EAAAkD,MAAAgK,gBACA9G,EAAApG,EAAA8vB,sBAAA9vB,EAAAmc,MAAA4T,SAAA7jB,YAAAlM,EAAAmc,MAAA4T,SAAA/kB,YAC4BvE,GAAA,IAAAE,GAAA,IAAAE,OAAA,EAAAC,MAAA,EAC5B9G,GAAAmc,MAAAjZ,MAAA4U,KAAAnO,EAAAmO,KAAA1R,EAAAK,EAAAzG,EAAAkD,MAAAgK,gBAAAlN,EAAA0G,iBAAA9G,EAAAkY,KAAA,KACA9X,EAAAmc,MAAAjZ,MAAA8U,IAAArO,EAAAqO,IAAA5R,EAAAO,EAAAkpB,EAAA7vB,EAAA4G,gBAAAhH,EAAAoY,IAAA,KACAhY,EAAAmc,MAAAjZ,MAAA2D,OAAAT,EAAAS,OAAAgpB,EAAA,OACA7vB,EAAAmc,MAAAjZ,MAAA4D,MAAAV,EAAAU,MAAA+oB,EAAA7vB,EAAAkD,MAAA8sB,gBAAA,KACAhwB,EAAA0mB,YAAA1mB,EAAAmc,SAGAnc,EAAA4rB,SAAA,SAAAloB,EAAAusB,GAEA,IADA,GAAAhnB,GAAAD,EAAAvC,EAAA,EAAAE,EAAA,EAAA/G,EAAA8D,EACAA,EAAAqK,cAAA,oBAAArK,EAAAksB,UACAnpB,GAAA/C,EAAA8J,WACA7G,GAAAjD,EAAA6J,UACAtE,EAAAvF,EAAAoK,aACA9E,EAAAtF,EAAAmK,YACAnK,IAAAqK,YAEA,OAAAkiB,IACwBnY,KAAArR,EAAAuR,IAAArR,EAAAE,OAAAoC,EAAAnC,MAAAkC,IAExBtF,EAAA9D,EACAA,EAAAI,EAAA0rB,aAAAhoB,IACoBoU,KAAArR,EAAA7G,EAAAkY,KAAAE,IAAArR,EAAA/G,EAAAoY,IAAAnR,OAAAoC,EAAAnC,MAAAkC,KAEpBhJ,EAAAoc,YAAA,SAAA1Y,GACA,GAAA+T,GAAAzX,EAAA0X,OAAAC,wBACAhO,GACAlD,EAAA/C,EAAAmU,QAAAJ,EAAAK,KACAnR,EAAAjD,EAAAqU,QAAAN,EAAAO,IAMA,OAJAhY,GAAA0R,cACA/H,EAAAlD,GAAAzG,EAAA0G,iBACAiD,EAAAhD,GAAA3G,EAAA4G,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACA8Q,SAUAzX,EAAAue,QAAA,SAAA2R,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAA9pB,GAAApG,EAAAmc,MAAA4T,SACAppB,EAAAP,EAAA4E,QAIA,IAAAhL,EAAAqD,cAAA,iBACA+C,OACAgqB,SAAApwB,EAAAmc,MAAAnX,MACAqrB,SAAAjqB,EAAApB,MACAkrB,MAAAC,EACAhU,MAAAnc,EAAAmc,QACqB,QACrB,IAAAnc,EAAAmc,MAAAnX,QAAAoB,EAAApB,QAAAkrB,EAAA,CAIA,GAHAlwB,EAAAkjB,QAAAvc,GAAA3G,EAAAkjB,QAAAvc,OACA3G,EAAAkjB,QAAAvc,GAAAP,EAAA8E,OAAArM,MAAAmB,EAAAmc,MAAAnX,MACAoB,EAAA9C,KAAA8C,EAAA8E,OAAArM,MAAAmB,EAAAmc,MAAAnX,MACA2B,IAAA3G,EAAAsD,KAAA8M,OAAA,CACA,GAAApQ,EAAAqD,cAAA,UACA2B,MAAAhF,EAAAmc,MAAAnX,MACAgf,aAAA5d,EAAApB,MACAsrB,QAAAJ,EACA9pB,OACA+V,MAAAnc,EAAAmc,QAC6B,QAC7Bnc,GAAAijB,KAAA,EACAjjB,EAAAgnB,OAAA5gB,EAAA9C,MACAtD,EAAAikB,mBAEAjkB,EAAAoD,MAAA,GAWA,MATAmW,UAAAC,KAAA0L,YAAAllB,EAAAmc,OACAnc,EAAAkhB,aAAAC,QACAnhB,EAAAqD,cAAA,WACA+C,OACApB,MAAAhF,EAAAmc,MAAAnX,MACAsrB,QAAAJ,EACA/T,MAAAnc,EAAAmc,QAEAnc,EAAAmc,UAAApc,IACA,GAUAC,EAAAma,YAAA,SAAA1T,EAAAE,GACA,GAAA3G,EAAAE,WAAAqwB,SAAA,CACA,GAEAC,GAGAC,EACAC,EANAtqB,EAAApG,EAAA8vB,sBAAArpB,EAAAE,GACA/G,EAAAI,EAAAoS,mBAGAue,EAAAvqB,EAAA8E,OAAA,IAGA,IAAAlL,EAAAqD,cAAA,mBAAuD+C,SAAe,QACtEpG,GAAAyhB,eAAAhb,EAAAE,GACA3G,EAAA4e,cAAAnY,EAAAE,GAEA3G,EAAAmc,MADAwU,EACApX,SAAAiR,cAAA,UAEAjR,SAAAiR,cAAAxqB,EAAAE,WAAA0wB,UACA,oBAEAxqB,EAAApG,EAAA8vB,sBAAArpB,EAAAE,GACAgqB,IAEA,kBAAAA,GACAH,EAAAG,EAAAvwB,MAAAJ,EAAAU,OAAuD0F,UACtCrF,MAAAioB,QAAA2H,KACjBH,EAAAG,GAEAH,EAAA3vB,QAAA,SAAA6C,GACA,GACAV,GACAsL,EAFA/P,EAAAgb,SAAAiR,cAAA,SAGAzpB,OAAAioB,QAAAtlB,IACAV,EAAAU,EAAA,GACA4K,EAAA5K,EAAA,KAEAV,EAAAU,EACA4K,EAAA5K,GAEAV,IAAAoD,EAAApB,QAA6C0rB,GAAA,GAC7CnyB,EAAAyG,MAAAhC,EACAzE,EAAAgI,UAAA+H,EACAtO,EAAAmc,MAAAwO,YAAApsB,KAEAmyB,IACAD,EAAAlX,SAAAiR,cAAA,UACAiG,EAAAzrB,MAAAoB,EAAApB,MACAyrB,EAAAlqB,UAAAH,EAAApB,MACAhF,EAAAmc,MAAAwO,YAAA8F,IAEAzwB,EAAAmc,MAAA1C,iBAAA,oBACAzZ,EAAAue,UACAve,EAAAoD,MAAA,MAGAmW,SAAAC,KAAAmR,YAAA3qB,EAAAmc,OACAnc,EAAA4qB,kBAAA5qB,EAAAmc,MAAA,8BACAnc,EAAAmc,MAAAjZ,MAAA0oB,SAAA,WACA5rB,EAAAmc,MAAA4T,SAAA3pB,EACApG,EAAA8b,kBACA9b,EAAAmc,MAAAjZ,MAAA+oB,OAAA,IACAjsB,EAAAmc,MAAAnX,MAAAoB,EAAApB,MACAhF,EAAAmc,MAAAgF,QACAnhB,EAAAmc,MAAA1C,iBAAA,QAAAzZ,EAAA6Y,iBACA7Y,EAAAmc,MAAA1C,iBAAA,WAAAzZ,EAAA6Y,iBACA7Y,EAAAmc,MAAA1C,iBAAA,UAAAzZ,EAAA6Y,iBACA7Y,EAAAmc,MAAA1C,iBAAA,YAAAzZ,EAAA6Y,iBACA7Y,EAAAmc,MAAA1C,iBAAA,mBAAA/V,GACA,GAAAmtB,GAAAzqB,EAAA8F,YACA4kB,EAAA1qB,EAAA4E,QAEA,SAAAtH,EAAA6d,QACAvhB,EAAAue,SAAA,GACAve,EAAAoD,MAAA,OAEiB,SAAAM,EAAA6d,WACjBvhB,EAAAE,WAAA0wB,WACA5wB,EAAAE,WAAA0wB,WAAAltB,EAAA+Z,UACAzd,EAAAue,UACAve,EAAAoD,MAAA,OACiB,QAAAM,EAAA6d,QAAA,CAEjB,GADA7d,EAAAoV,kBACA9Y,EAAAue,UACA,MAEA7a,GAAA+Z,SACAoT,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAAjxB,EAAAwQ,OAAA,EACA0gB,GAAA,GAEAD,EAAAjxB,EAAAwQ,OAAA,IACAygB,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAA9wB,EAAAsD,KAAA8M,OAAA,GAEA0gB,EAAA9wB,EAAAsD,KAAA8M,OAAA,IACA0gB,EAAA,GAEA9wB,EAAAyhB,eAAAoP,EAAAC,GACA9wB,EAAAma,YAAA0W,EAAAC,MAGA9wB,EAAAqD,cAAA,aAA6C+C,OAAA+V,MAAAnc,EAAAmc,UAE7Cnc,EAAA4qB,kBAAA,SAAAmB,EAAAgF,GACA,GAAAC,IACAC,6CACApqB,OAAA,OACAqqB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAA/sB,EAAAkD,MAAA8pB,6BACAnB,MAAA7rB,EAAAkD,MAAA+pB,wBACAoE,OAAArxB,EAAAkD,MAAAouB,yBACAC,aAAAvxB,EAAAkD,MAAAsuB,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAA0uB,6BACAC,SAAA7xB,EAAAkD,MAAA4uB,4BAEAC,8CACAlrB,OAAA,OACAqqB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAA/sB,EAAAkD,MAAA8uB,sBACAnG,MAAA7rB,EAAAkD,MAAA+uB,iBACAZ,OAAArxB,EAAAkD,MAAAgvB,0BACAX,aAAAvxB,EAAAkD,MAAAivB,gCACAV,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAAkvB,kCACAP,SAAA7xB,EAAAkD,MAAAmvB,iCAEAC,uCACAC,SAAA,QACA1G,MAAA7rB,EAAAkD,MAAAsvB,2BACAX,SAAA7xB,EAAAkD,MAAAuvB,8BACAd,WAAA3xB,EAAAkD,MAAAwvB,sBACAxB,cAAA,UAEAyB,gCACAhB,WAAA3xB,EAAAkD,MAAAwvB,sBACAb,SAAA7xB,EAAAkD,MAAA0vB,oBACA7F,WAAA/sB,EAAAkD,MAAA8uB,sBACAnG,MAAA7rB,EAAAkD,MAAA+uB,iBACAZ,OAAArxB,EAAAkD,MAAA2vB,kBACAzB,QAAApxB,EAAAkD,MAAA4vB,mBACAvB,aAAAvxB,EAAAkD,MAAA6vB,wBACAC,QAAAhzB,EAAAkD,MAAA+vB,mBACArH,SAAA,WACAK,OAAA,EACAiH,SAAA,UAEAC,qCACApG,WAAA/sB,EAAAkD,MAAA8uB,sBACAnG,MAAA7rB,EAAAkD,MAAA+uB,kBAEAmB,2CACArG,WAAA/sB,EAAAkD,MAAAmwB,2BACAxH,MAAA7rB,EAAAkD,MAAAowB,uBAEAC,0BACA3H,SAAA,WACAK,OAAA,MAEAuH,mBACA5H,SAAA,WACAmB,WAAA/sB,EAAAkD,MAAAqP,gBACA0Z,OAAA,IACAwH,UAAA,cACArC,QAAA,KAEAsC,iCACA9H,SAAA,QACA5T,IAAA,OACAF,KAAA,OACAuZ,OAAA,OACA2B,QAAA,IACA5V,OAAA,UACAtW,MAAA,MACAD,OAAA,MACA4qB,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAAwvB,sBACAb,SAAA7xB,EAAAkD,MAAA0vB,qBAEAe,8BACAF,UAAA,cACAG,QAAA,OACAC,OAAA,IACAzC,QAAA,SAAApxB,EAAAkD,MAAA4wB,oBAAA,KACArC,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAA6wB,mBACAlC,SAAA7xB,EAAAkD,MAAA8wB,iBACAC,UAAAj0B,EAAAkD,MAAAgxB,kBACA7C,OAAArxB,EAAAkD,MAAAixB,eACAtI,MAAA7rB,EAAAkD,MAAAkxB,cACArH,WAAA/sB,EAAAkD,MAAAmxB,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACAjD,aAAA,KAEAkD,qCACAhD,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAAwvB,sBACAb,SAAA7xB,EAAAkD,MAAA0vB,oBACA/G,MAAA,UACAkB,WAAA,UACA8G,OAAA7zB,EAAAkD,MAAAwxB,sBACAnD,aAAAvxB,EAAAkD,MAAAyxB,4BACAzD,cAAA,UAEA0D,2CACA7H,WAAA/sB,EAAAkD,MAAAmwB,2BACAxH,MAAA7rB,EAAAkD,MAAAowB,uBAEAuB,sCACAhB,OAAA7zB,EAAAkD,MAAA4xB,uBACAC,QAAA/0B,EAAAkD,MAAA8xB,wBACA1I,SAAAtsB,EAAAkD,MAAA+xB,yBACAC,SAAAl1B,EAAAkD,MAAAiyB,0BAEAC,gCACA3D,WAAA,SACAC,WAAA,SACAC,WAAA3xB,EAAAkD,MAAAwvB,sBACAb,SAAA7xB,EAAAkD,MAAA0vB,oBACA7F,WAAA/sB,EAAAkD,MAAA8uB,sBACAnG,MAAA7rB,EAAAkD,MAAA+uB,iBACAZ,OAAArxB,EAAAkD,MAAA2vB,kBACAzB,QAAApxB,EAAAkD,MAAA4vB,mBACAvB,aAAAvxB,EAAAkD,MAAA6vB,wBACAC,QAAAhzB,EAAAkD,MAAA+vB,mBACAC,SAAA,SACAmC,WAAA,UAEAC,yCACAvI,WAAA/sB,EAAAkD,MAAAqyB,mCAGAvE,GAAAD,IACA/xB,OAAA+G,KAAAirB,EAAAD,IAAAlb,IAAA,SAAA7T,GACA+pB,EAAA7oB,MAAAlB,GAAAgvB,EAAAD,GAAA/uB,MAKAhC,EAAAimB,SAAA,SAAA5mB,GACAW,EAAA2E,WAAAtF,GAAAka,SAAAiR,cAAA,UACAxqB,EAAA2E,YAAA,8BAAAP,KAAApE,EAAA2E,WAAA2I,WACAtN,EAAA0R,aAAA,EACA1R,EAAAqO,WAAArO,EAAA2E,WAAA0J,WACArO,EAAA+G,IAAA/G,EAAAqO,WAAAhO,QACAL,EAAA0X,OAAA1X,EAAAqO,WAAAqJ,OACA1X,EAAAkhB,aAAAlhB,EAAAqO,WAAA6S,aACAlhB,EAAAmlB,YAAAnlB,EAAA0X,SAEA1X,EAAAkhB,aAAA3H,SAAAiR,cAAA,SACAxqB,EAAAkhB,aAAAsU,OAAAx1B,EAAAU,KAAAgoB,KACA1oB,EAAA4qB,kBAAA5qB,EAAAkhB,aAAA,iCACAlhB,EAAA0R,aAAA,EACA1R,EAAAgb,cAAAhb,EAAA2E,WACA3E,EAAA2E,WAAA3E,EAAAgb,cACAhb,EAAA8a,eAAA,YAAA1W,KAAApE,EAAAgb,cAAAya,SACAz1B,EAAAS,aACAT,EAAA01B,UAAAnc,SAAAiR,cAAA,SACAxqB,EAAA01B,UAAAnvB,UAAA,mDACAvG,EAAAgb,cAAAhb,EAAA2E,WAAAgxB,cACA31B,EAAA0X,OAAA6B,SAAAiR,cAAA,UACAxqB,EAAA2E,WAAAgmB,YAAA3qB,EAAA01B,WACA11B,EAAA2E,WAAAgmB,YAAA3qB,EAAA0X,QACA1X,EAAA2E,WAAAgmB,YAAA3qB,EAAAkhB,eACiBlhB,EAAA8a,gBACjB9a,EAAA0X,OAAA1X,EAAAgb,cACAhb,EAAAgb,cAAA2P,YAAA3qB,EAAAkhB,gBAEAlhB,EAAA0X,OAAA6B,SAAAiR,cAAA,UACAxqB,EAAAgb,cAAA2P,YAAA3qB,EAAA0X,QACA1X,EAAAgb,cAAA2P,YAAA3qB,EAAAkhB,eAEAlhB,EAAA+G,IAAA/G,EAAA0X,OAAAke,WAAA,MACA51B,EAAA+G,IAAA8uB,aAAA,aACA71B,EAAAmlB,YAAAnlB,EAAA0X,QAEA1X,EAAAkhB,aAAAzH,iBAAA,gBAAA/V,GACAA,EAAA8c,SAAAxgB,EAAA0X,SACA1X,EAAAyW,UAAA,KAGAvV,OAAAuY,iBAAA,SAAAzZ,EAAA6E,QACA3D,OAAAoE,mBACAtF,EAAAqF,SAAA,GAAAnE,QAAAoE,iBAAA,SAAAC,GACAA,EAAA1E,QAAA,SAAA2E,GACAxF,EAAA6E,QAAA,QAGA7E,EAAA0X,OAAA/S,YAAA9D,QAAA,SAAAkrB,GACAA,GACA/rB,EAAAqF,SAAAT,QAAAmnB,GAA+C7rB,YAAA,OAG/CF,EAAAmlB,YAAA1L,iBAAA,SAAAzZ,EAAA6E,QAAA,GACA7E,EAAAmlB,YAAA1L,iBAAA,aAAAzZ,EAAA2Y,YAAA,GACA3Y,EAAAmlB,YAAA1L,iBAAA,UAAAzZ,EAAAka,SAAA,GACAla,EAAAmlB,YAAA1L,iBAAA,YAAAzZ,EAAA0Y,WAAA,GACA1Y,EAAAmlB,YAAA1L,iBAAA,WAAAzZ,EAAA6hB,UAAA,GACA7hB,EAAAmlB,YAAA1L,iBAAA,QAAAzZ,EAAAoa,OAAA,GACApa,EAAAmlB,YAAA1L,iBAAA,YAAAzZ,EAAAyY,WACAzY,EAAAmlB,YAAA1L,iBAAA,QAAAzZ,EAAAgiB,aAAA,GACAhiB,EAAA0X,OAAA+B,iBAAA,cAAAzZ,EAAAkvB,kBAAA,IACAlvB,EAAA0R,YAAA1R,EAAAqO,WAAAkL,UAAAE,iBAAA,OAAAzZ,EAAAoiB,MACApiB,EAAAkhB,aAAAzH,iBAAA,WAAAzZ,EAAA4hB,UAAA,GACA5hB,EAAAkhB,aAAAzH,iBAAA,QAAAzZ,EAAA2hB,OAAA,GACA3hB,EAAAkhB,aAAAzH,iBAAA,UAAAzZ,EAAAohB,SAAA,IAEAphB,EAAAgmB,OAAA,WACAhmB,EAAAQ,KAAAmE,YAAA3E,EAAAQ,KAAAmE,WAAAmxB,mBACA53B,KAAAuC,YACAT,EAAA+a,wBAAA/a,EAAAQ,KAAAmE,WAAAgxB,cAEA31B,EAAA+a,wBAAA/a,EAAAQ,KAAAmE,WAEA3E,EAAA4nB,WAAA5nB,EAAAU,KAAAq1B,cAA0DC,KAAAh2B,EAAAQ,KAAAiV,MAAA,kBAC1DzV,EAAAQ,KAAAmE,WAAA3E,EAAA4nB,YAEA5nB,EAAAimB,SAAAjmB,EAAAQ,KAAAmE,eAGCvE,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,ITm0HK,SAAU/B,EAAQD,EAASM,GUl0IjC,GAAAyB,GAAAC,CAEAD,UA09BCE,MA19BDD,EAAA,WACA,YACA,iBAAAE,GAUAA,EAAA2nB,eAAA,SAAAtoB,GAKA,IAJA,GAAA42B,GAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAr2B,EAAA,GACAP,GAAA,GACAO,EAAAkoB,OAAAuO,aAAAh3B,EAAA+2B,EAAAH,GAAAr2B,EACAP,EAAAgZ,KAAAie,MAAAj3B,EAAA+2B,GAAA,CAEA,OAAAx2B,IAYAI,EAAAinB,aAAA,SAAAtoB,EAAA6R,GACA,GAAA5Q,GAAAI,EAAA4c,WACA,IAAAhd,EAAAwQ,OAAAI,EACA,SAAA7M,OAAA,4CAEA3D,GAAA2kB,eAAAhmB,EAAAiB,GACAA,EAAA+a,OAAAnK,EAAA,EAAA7R,GACAqB,EAAAsD,KAAAzC,QAAA,SAAAmM,GACAhN,EAAA+jB,kBAAA/W,EAAArO,KAEAqB,EAAAU,KAAAkD,OAAAhE,GAUAI,EAAAknB,aAAA,SAAA1W,GACA,GAAA5Q,GAAAI,EAAA4c,WAEA5c,GAAAsD,KAAAzC,QAAA,SAAAmM,SACAA,GAAApN,EAAA4Q,GAAA3R,QAEAe,EAAA+a,OAAAnK,EAAA,GACAxQ,EAAAU,KAAAkD,OAAAhE,GAWAI,EAAAmnB,UAAA,SAAAxoB,GACA,GAAAiB,GAAAI,EAAA4c,WACA5c,GAAA2kB,eAAAhmB,EAAAiB,GACAA,EAAA6E,KAAA9F,GACAqB,EAAAsD,KAAAzC,QAAA,SAAAmM,GACAhN,EAAA+jB,kBAAA/W,EAAArO,KAEAqB,EAAAU,KAAAkD,OAAAhE,GASAI,EAAA+mB,UAAA,SAAAvW,GACAxQ,EAAA0kB,aAAA/J,OAAAnK,EAAA,GACAxQ,EAAAye,YACAze,EAAA6E,QAAA,IAUA7E,EAAA8mB,UAAA,SAAAloB,EAAA4R,GACA,GAAAxQ,EAAA0kB,aAAAtU,OAAAI,EACA,SAAA7M,OAAA,6CAEA3D,GAAA0kB,aAAA/J,OAAAnK,EAAA,EAAA5R,GACAoB,EAAA4c,YAAA/b,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAA+jB,kBAAA/jB,EAAA0kB,aAAAlU,GAAA7R,KAGAqB,EAAAye,YACAze,EAAA6E,QAAA,IASA7E,EAAAgnB,OAAA,SAAApoB,GACAoB,EAAA0kB,aAAAjgB,KAAA7F,GACAoB,EAAA4c,YAAA/b,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAA+jB,kBAAA/jB,EAAA0kB,aAAA1kB,EAAA0kB,aAAAtU,OAAA,GAAAzR,KAGAqB,EAAAye,YACAze,EAAA6E,QAAA,IAUA7E,EAAAqnB,aAAA,SAAArc,EAAAnE,GACA7G,EAAA8M,MAAAR,KAAAtM,EAAAsD,KAAA0H,GAAAhL,EAAA2I,WAAA9B,EACA7G,EAAAoD,MAAA,IAUApD,EAAAsnB,eAAA,SAAAiP,EAAAzvB,GACA,GAAAlH,GAAAI,EAAA4c,WACA5c,GAAA8M,MAAAP,QAAA3M,EAAA22B,GAAAv2B,EAAA2I,WAAA7B,EACA9G,EAAAoD,MAAA,IASApD,EAAAunB,kBAAA,WACAvnB,EAAA8M,MAAAP,WACAvM,EAAAoD,MAAA,IASApD,EAAAwnB,gBAAA,WACAxnB,EAAA8M,MAAAR,QACAtM,EAAAoD,MAAA,IAUApD,EAAAye,UAAA,SAAAnD,EAAAtW,GACA,QAAAwxB,KACAx2B,EAAAykB,yBACAzlB,OAAA+G,KAAA/F,EAAAgQ,eAAAnP,QAAA,SAAA2B,GACA,GAAA0I,GAAAlL,EAAAwlB,gBAAAlK,EACApQ,KAGAlL,EAAA+iB,cAAA7X,EAAA1I,QAAAxC,EAAAwC,OAAA8Y,EAAA5O,MAAA,UACA1M,EAAAsD,KAAAtD,EAAAsD,KAAAd,OAAA,SAAAwK,GACA,MAAAhN,GAAA+iB,cAAA/V,EAAAxK,GAAAxC,EAAAgQ,cAAAxN,SAGAxC,EAAA6E,SACA7E,EAAAoD,MAAA,GAEA,OAAArD,KAAAub,OAAAvb,KAAAiF,EAEA,MADAhF,GAAAgQ,iBACAwmB,KAEAlb,GAAA,KAAAtW,OAAAjF,KAAAiF,EAGAhF,EAAAgQ,cAAAsL,GAAAtW,QAFAhF,GAAAgQ,cAAAsL,GAIAkb,KASAx2B,EAAAsmB,iBAAA,SAAAtb,GACA,GAAAgN,GAAA,EAAAvR,EAAA,EAAAjI,EAAAwB,EAAAsD,KAAA8M,OACA8K,EAAA,EAAAlb,EAAAkD,MAAAgK,eAIA,IAHAlN,EAAAE,WAAA0S,aACApU,GAAA,GAEAwM,EAAAxM,EACA,SAAAmF,OAAA,uBAEA,MAAA8C,EAAAuE,GACAgN,IAAAhY,EAAA8M,MAAAR,KAAAtM,EAAAsD,KAAAmD,GAAAzG,EAAA2I,YAAA3I,EAAAkD,MAAA0K,YAAAsN,EACAzU,GAAA,CAGA,OAAAuR,IAAAhY,EAAA8M,MAAAR,KAAAtM,EAAAsD,KAAA0H,GAAAhL,EAAA2I,YAAA3I,EAAAkD,MAAA0K,aASA5N,EAAAqmB,qBAAA,SAAAna,GACA,GAAA4L,GAAA,EAAAnR,EAAA,EAAA/G,EAAAI,EAAA4c,WACA,IAAA1Q,EADAtM,EAAAwQ,OAAA,EAEA,SAAAzM,OAAA,0BAEA,MAAAgD,EAAAuF,GACA4L,GAAA9X,EAAA8M,MAAAP,QAAA3M,EAAA+G,GAAA3G,EAAA2I,YAAA/I,EAAA+G,GAAAG,MACAH,GAAA,CAEA,OAAAmR,IAUA9X,EAAAmmB,SAAA,SAAA1f,EAAAE,OACA5G,KAAA0G,IACAzG,EAAA0N,UAAAC,WAAA3N,EAAAqmB,qBAAA5f,QAEA1G,KAAA4G,IACA3G,EAAA0N,UAAAD,UAAAzN,EAAAsmB,iBAAA3f,KAUA3G,EAAAomB,QAAA,SAAAzf,GACA3G,EAAAmmB,SAAA,EAAAxf,IAUA3G,EAAAyhB,eAAA,SAAAhb,EAAAE,GAQiB,IAPjB3G,EAAA2O,aAAAnM,OAAA,SAAA4D,GACA,OAAAA,EAAA4E,WAAArE,OAAA5G,KAAA4G,KACAP,EAAA8F,cAAAzF,OAAA1G,KAAA0G,IACAL,EAAAK,EAAA,GACAL,EAAAO,EAAA,GACAP,EAAAK,EAAAL,EAAAU,MAAA9G,EAAA8G,OACAV,EAAAO,EAAAP,EAAAS,OAAA7G,EAAA6G,SACiBuJ,QACjBpQ,EAAAmmB,SAAA1f,EAAAE,IAWA3G,EAAA4e,cAAA,SAAAnY,EAAAE,GACA3G,EAAAiM,YACAjB,SAAArE,EACAuF,YAAAzF,IASAzG,EAAAwhB,UAAA,WACAxhB,EAAAie,YACAjG,IAAA,EACAF,KAAA,EACA8F,MAAA5d,EAAAoS,mBAAAhC,OAAA,EACAuN,OAAA3d,EAAAsD,KAAA8M,OAAA,KAUApQ,EAAAy2B,iBAAA,SAAAvqB,GACA,GAAAwqB,IAAA,CAMA,OALA12B,GAAAsD,KAAAzC,QAAA,SAAAmM,EAAAhC,GACAhL,EAAA4L,WAAAZ,KAAA,IAAAhL,EAAA4L,WAAAZ,GAAAa,QAAA7L,EAAAqM,OAAAE,QAAAL,MACAwqB,GAAA,KAGAA,GAYA12B,EAAA2e,aAAA,SAAAzS,EAAAsQ,EAAAma,EAAAC,GAEA,QAAAC,GAAAt4B,GACAyB,EAAAsD,KAAAzC,QAAA,SAAAmM,EAAAhC,GACAhL,EAAA4L,WAAAZ,GAAAhL,EAAA4L,WAAAZ,QACA,IAAAhL,EAAA4L,WAAAZ,GAAAa,QAAAtN,IACAyB,EAAA4L,WAAAZ,GAAAvG,KAAAlG,KALA,GAAAqB,GAAA8D,EAAA+C,CAiBA,IAAAkwB,EAAA,CACA,IAAA32B,EAAAiM,WAAuC,MAGvC,KAFArM,EAAAyY,KAAAqF,IAAA1d,EAAAiM,WAAAC,eACAxI,EAAA2U,KAAAqD,IAAA1b,EAAAiM,WAAAC,eACAzF,EAAA7G,EAA2B8D,EAAA+C,EAAOA,GAAA,EAClCowB,EAAApwB,GAGA+V,GAAAma,IACA32B,EAAA4L,cACA5L,EAAAiM,WAAAC,cACAlM,EAAAiM,WAAAjB,SAAAhL,EAAAyS,gBAEA+J,GAAAxc,EAAAy2B,iBAAAvqB,GArBA,SAAA3N,GACAyB,EAAAsD,KAAAzC,QAAA,SAAAmM,EAAAhC,GACAhL,EAAA4L,WAAAZ,GAAAhL,EAAA4L,WAAAZ,QACA,IAAAhL,EAAA4L,WAAAZ,GAAAa,QAAAtN,IACAyB,EAAA4L,WAAAZ,GAAA2P,OAAA3a,EAAA4L,WAAAZ,GAAAa,QAAAtN,GAAA,MAkBA2N,GAEA2qB,EAAA3qB,GAEA0qB,GACA52B,EAAAqD,cAAA,oBACAgb,aAAAre,EAAAse,kBACA1S,WAAA5L,EAAA4L,WACAoS,gBAAAhe,EAAAsd,wBAaAtd,EAAA8d,UAAA,SAAA9S,EAAAwR,EAAAma,EAAAC,GAEA,QAAA5P,GAAA8P,GACA92B,EAAA4L,WAAAkrB,MACA92B,EAAA4L,WAAAkrB,GAAAryB,MAAA,GACA7E,EAAAiB,QAAA,SAAAuiB,GACApjB,EAAA4L,WAAAkrB,GAAAryB,KAAA2e,EAAA5S,SALA,GAAA/J,GAAAswB,EAAAhJ,EAAAnuB,EAAAI,EAAA4c,WAQA,UAAA5c,EAAA+d,wBAAAhe,KAAAC,EAAAg3B,aACAh3B,EAAA4L,WAAAZ,IAAAhL,EAAA4L,WAAAZ,GAAAoF,OAAA,IAAAxQ,EAAAwQ,QACAoM,EAEA,YADAxc,EAAA4L,WAAAZ,MAKA,SAAAhL,EAAA+d,wBAAAhe,KAAAC,EAAAg3B,WACA,GAAAL,OAAA52B,KAAAC,EAAAg3B,WAAA,CACA,IAAAh3B,EAAAiM,WAA2C,MAG3C,KAFA8qB,EAAA1e,KAAAqF,IAAA1d,EAAAiM,WAAAjB,YACA+iB,EAAA1V,KAAAqD,IAAA1b,EAAAiM,WAAAjB,YACAvE,EAAAswB,EAAgChJ,GAAAtnB,EAASA,GAAA,EACzCugB,EAAAvgB,OAGAugB,GAAAhc,EAGA4rB,IACA52B,EAAAqD,cAAA,oBACAgb,aAAAre,EAAAse,kBACA1S,WAAA5L,EAAA4L,WACAoS,gBAAAhe,EAAAge,mBAUAhe,EAAA6mB,aAAA,SAAA7b,GACA,GAAAisB,GAAAj3B,EAAAsD,KAAA0H,GAAAhL,EAAA2I,SACA3I,GAAAqD,cAAA,gBACA6zB,UAAAl3B,EAAAsP,WAAA2nB,GACA3zB,KAAAtD,EAAAsD,KAAA0H,GACAA,aAEAhL,EAAA0I,aAAAuuB,GAAAvO,OACA1oB,EAAA0I,aAAAuuB,GAAAx1B,gBACAzB,GAAA0I,aAAAuuB,SACAj3B,GAAA8M,MAAAmE,MAAAgmB,SACAj3B,GAAAsP,WAAA2nB,GACAj3B,EAAAqD,cAAA,aACAuK,WAAA5N,EAAAkD,MAAA0K,aAEA5N,EAAA6E,QAAA,GACA7E,EAAAoD,MAAA,IASApD,EAAA4mB,WAAA,SAAA5b,GACA,GAIAuG,GAJAO,EAAA9R,EAAA+R,yBACAb,EAAAlR,EAAA8M,MAAAP,QAAAmC,YAAA1O,EAAAkD,MAAA0N,mBACAqmB,EAAAj3B,EAAAsD,KAAA0H,GAAAhL,EAAA2I,UACAM,EAAAjJ,EAAA8M,MAAAmE,MAAAgmB,IAAAj3B,EAAAkD,MAAAi0B,cAEAn3B,GAAAsP,WAAA2nB,KACA1lB,EAAAvR,EAAAY,YACA6U,MAAAzV,EAAAE,WAAAuV,MACA5W,KAAAmB,EAAAE,WAAAqP,eACAvP,EAAAE,WAAArB,KAAA,OAAAo4B,MAAAl3B,GACA4E,YACA0J,WAAArO,EAAAU,KACA4M,SAAA,uBACAQ,aAAA7E,EACA4E,YAAA7N,EAAA8G,MAAAoK,EACAhG,QAAiCpE,MAAA9G,EAAA8G,MAAAoK,GACjC1D,WAAA0D,EACA3D,UAAAuE,EACA/D,aAAA/N,EAAAU,KAAAiE,WACAA,WAAA3E,EAAAU,KAAAiE,WACAzB,MAAA,OACAI,KAAAtD,EAAAsD,KAAA0H,MAGAhL,EAAAsP,WAAA2nB,GAAA1lB,GAEAA,EAAAvR,EAAAsP,WAAA2nB,GACA1lB,EAAA7B,SAAA,EACA1P,EAAAqD,cAAA,cACAkO,WACAjO,KAAAtD,EAAAsD,KAAA0H,GACAA,aAEAhL,EAAA0I,aAAAuuB,GAAA1lB,EACAvR,EAAA8M,MAAAmE,MAAAgmB,GAAAhuB,EACAjJ,EAAAqD,cAAA,aAA6CwD,OAAA7G,EAAAkD,MAAA0K,aAC7C5N,EAAA6E,QAAA,IASA7E,EAAA8e,WAAA,SAAA9T,GAEA,GADAhL,EAAA0I,aAAA1I,EAAAsD,KAAA0H,GAAAhL,EAAA2I,WAEA,MAAA3I,GAAA6mB,aAAA7b,EAEAhL,GAAA4mB,WAAA5b,IAWAhL,EAAAwlB,gBAAA,SAAA3mB,GACA,GAAA4H,GAAAlI,EAAAyB,EAAA4c,WACA,KAAAnW,EAAA,EAAuBA,EAAAlI,EAAA6R,OAAc3J,GAAA,EACrC,GAAAlI,EAAAkI,GAAA5H,SACA,MAAAN,GAAAkI,IAYAzG,EAAA8hB,kBAAA,SAAAjjB,EAAAiM,GACA9K,EAAA8M,MAAAP,QAAA,eAAA1N,IAAAmB,EAAAwlB,gBAAA3mB,GAAAmB,EAAA2I,WACA3I,EAAAumB,wBAAA1nB,GACAiM,IACA9K,EAAA6E,SACA7E,EAAAoD,MAAA,KAqBApD,EAAAymB,cAAA,SAAArgB,EAAA4E,GAEA,OAAAjL,KAAAiL,EACA,MAAAhL,GAAA2O,aAAAnM,OAAA,SAAA7D,GACA,MAAAA,GAAAuN,cAAA9F,GAAAzH,EAAAqM,eACiBoF,OAAA,CAEjB,IAAA3J,GAAAjI,EAAAwB,EAAA2O,aAAAyB,MACA,KAAA3J,EAAA,EAAuBA,EAAAjI,EAAOiI,GAAA,EAC9B,GAAAL,EAAAK,IAAAzG,EAAA2O,aAAAlI,MAAAL,EAAAO,IAAA3G,EAAA2O,aAAAlI,GAAAE,EACA,QAGA,WAaA3G,EAAAuT,MAAA,SAAA6Q,EAAAgT,EAAAC,EAAAC,GACA,GAAA9qB,GACA7N,EAAAqB,EAAA4c,YAAApa,OAAA,SAAA4gB,GACA,MAAAA,GAAAvkB,OAAAulB,GAGA,IADApkB,EAAA2P,QAAAyU,EACA,IAAAzlB,EAAAyR,OACA,SAAAzM,OAAA,oCAEA6I,GAAA6qB,GAAAr3B,EAAAwe,QAAA7f,EAAA,GAAA+N,MACAF,OAAAzM,KAAApB,EAAA,GAAA+N,MACAmD,QAAAC,KAAA,qDAAAnR,EAAA,GAAA+N,MAEA1M,EAAAsD,KAAAtD,EAAAsD,KAAAi0B,KAAA,kBAAA/qB,KAAA4X,EAAAgT,GAAAp3B,EAAAwe,QAAAna,QACArE,EAAAqD,cAAA,eAA+CxE,KAAAulB,EAAAgT,cAC/Cp3B,EAAAoD,MAAA,GACAk0B,GACAt3B,EAAAwf,kBAEAxf,EAAA+c,SAAA,SAAArZ,GACA,QAAAA,EAAA+C,EAAA,GACA/C,EAAA+C,EAAAzG,EAAA8G,OACApD,EAAAiD,EAAA,GACAjD,EAAAiD,EAAA3G,EAAA6G,SAaA7G,EAAAw3B,gBAAA,SAAAtrB,GACA,MAAAlM,GAAA2O,aAAAnM,OAAA,SAAA7D,GACA,MAAAA,GAAAuN,kBACakE,OAAA,GAUbpQ,EAAAy3B,aAAA,SAAAzsB,GACA,MAAAhL,GAAA2O,aAAAnM,OAAA,SAAA7D,GACA,MAAAA,GAAAqM,eACaoF,OAAA,GAWbpQ,EAAA8vB,sBAAA,SAAArpB,EAAAE,GACA,MAAA3G,GAAA2O,aAAAnM,OAAA,SAAA7D,GACA,MAAAA,GAAAuN,cAAAzF,GAAA9H,EAAAqM,WAAArE,IACa,IAWb3G,EAAAwY,UAAA,SAAA/R,EAAAE,EAAA+wB,GACA,GAAAn5B,GAAA6H,EAAAuxB,EAAAD,EAAA13B,EAAAE,WAAA03B,gBAAA,EAAAp5B,EAAAwB,EAAA2O,aAAAyB,MACA,IAAApQ,EAAA2O,cAAA3O,EAAA2O,aAAAyB,OAAA,CAEA,GADApQ,EAAAyW,UAAA,IACA9P,EAAA3G,EAAA6G,QACAF,EAAA,GACAF,EAAAzG,EAAA8G,OACAL,EAAA,GAEA,MADAzG,GAAAyW,UAAA,GAEAC,YAAA,UACArW,QAAA,UAGA,KAAA9B,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAQ9B,GAPA6H,EAAApG,EAAA2O,aAAApQ,GACAm5B,GAAA,gCAAAtzB,KAAAgC,EAAAlD,SACAkD,EAAAK,GAAAkxB,EACAvxB,EAAAO,GAAAgxB,EACAvxB,EAAAS,QAAA8wB,EACAvxB,EAAAU,OAAA6wB,GAEAvxB,EAAAK,EAAAzG,EAAAkD,MAAAgK,gBAAAzG,GACAL,EAAAK,EAAAL,EAAAU,MAAA9G,EAAAkD,MAAAgK,gBAAAzG,GACAL,EAAAO,EAAA3G,EAAAkD,MAAAgK,gBAAAvG,GACAP,EAAAO,EAAAP,EAAAS,OAAA7G,EAAAkD,MAAAgK,gBAAAvG,EACA,kCAAAvC,KAAAgC,EAAAlD,QACAkD,EAAAsQ,YAAA,sBACAtQ,EAAA/F,QAAA,sBACA+F,EAAAmoB,aAAA,EACAnoB,EAAAyxB,qBAAA,EACAlxB,EAAA3G,EAAA0N,UAAA4H,IAAAhP,EAAAK,EAAA3G,EAAA0N,UAAAiH,iBACAvO,EAAAsQ,YAAA,yBACAtQ,EAAA/F,QAAA,0BACyBsG,EAAA3G,EAAA0N,UAAA4H,IAAAhP,EAAAK,IACzBP,EAAAsQ,YAAA,sBACAtQ,EAAA/F,QAAA,uBAEAL,EAAA0X,OAAAxU,MAAAka,OAAA,UACAhX,GAEA,8BAAAhC,KAAAgC,EAAAlD,QACAkD,EAAAsQ,YAAA,wBACAtQ,EAAA/F,QAAA,wBACA+F,EAAAmoB,aAAA,EACAnoB,EAAA0xB,uBAAA,EACArxB,EAAAzG,EAAA0N,UAAA4H,IAAArM,EAAAxC,EAAAzG,EAAA0N,UAAAuH,gBACA7O,EAAAsQ,YAAA,0BACAtQ,EAAA/F,QAAA,2BACyBoG,EAAAzG,EAAA0N,UAAA4H,IAAArM,EAAAxC,IACzBL,EAAAsQ,YAAA,yBACAtQ,EAAA/F,QAAA,0BAEAL,EAAA0X,OAAAxU,MAAAka,OAAA,UACAhX,GAEAA,EAAAK,EAAAL,EAAAU,MAAA,GAAA9G,EAAAE,WAAA63B,iBAAAtxB,GACAL,EAAAK,EAAAL,EAAAU,MAAA,GAAA9G,EAAAE,WAAA63B,iBAAAtxB,GACAzG,EAAAE,WAAA83B,oBACAh4B,EAAAE,WAAA+3B,2BAAA,SAAA7xB,EAAAlD,OACA,SAAAkD,EAAAlD,SACAlD,EAAAE,WAAAg4B,uBACA,mCAAArsB,QAAAzF,EAAAlD,SACA,mCAAA2I,QAAAzF,EAAAlD,SACAkD,EAAA/F,QAAA,YACA+F,EAAAsQ,YAAA,YACAtQ,GAEAA,EAAAO,EAAAP,EAAAS,OAAA,GAAA7G,EAAAE,WAAA63B,iBAAApxB,GACAP,EAAAO,EAAAP,EAAAS,OAAA,GAAA7G,EAAAE,WAAA63B,iBAAApxB,GACA3G,EAAAE,WAAAi4B,iBACAn4B,EAAAE,WAAAk4B,wBAAA,SAAAhyB,EAAAlD,OACA,SAAAkD,EAAAlD,QACA,qBAAAkD,EAAAlD,OACAkD,EAAA/F,QAAA,YACA+F,EAAAsQ,YAAA,YACAtQ,GAEA,qBAAAA,EAAAlD,OACAkD,EAAA/F,QAAA,OACA+F,EAAAsQ,YAAA,iBACAtQ,GAEA,kBAAAA,EAAAlD,OACAkD,EAAA/F,QAAA,OACA+F,EAAAsQ,YAAA,cACAtQ,GAEAA,EAAA+F,QACAnM,EAAAyW,UAAA,EACArQ,EAAAsQ,YAAA,YACAtQ,EAAA/F,QAAA,YACA+F,GAEA,cAAAA,EAAAlD,OACAlD,EAAAyW,UAAA,EACArQ,EAAAsQ,YAAA,OACAtQ,EAAA/F,QAAA,OACA+F,IAEAA,EAAAsQ,YAAA,OACAtQ,EAAA/F,QAAA,OACA+F,EAKA,OAFApG,GAAAyW,UAAA,EACAzW,EAAA0X,OAAAxU,MAAAka,OAAA,WAEA1G,YAAA,aACArW,QAAA,aACA6C,MAAA,aACAorB,cAAA,KAUAtuB,EAAAsd,mBAAA,WACA,GAAAgG,IAAuB7c,EAAAkpB,IAAAhpB,EAAAgpB,KACvBpM,GAAwB9c,GAAAkpB,IAAAhpB,GAAAgpB,IAYxB,OAXA3vB,GAAAsD,KAAAzC,QAAA,SAAAmM,EAAAhC,GACA,GAAAqtB,GAAAC,CACAt4B,GAAA4L,WAAAZ,IAAAhL,EAAA4L,WAAAZ,GAAAoF,SACAkT,EAAA3c,EAAAqE,EAAAsY,EAAA3c,EAAAqE,EAAAsY,EAAA3c,EACA4c,EAAA5c,EAAAqE,EAAAuY,EAAA5c,EAAAqE,EAAAuY,EAAA5c,EACA0xB,EAAAhgB,KAAAqD,IAAAtb,MAAA,KAAAJ,EAAA4L,WAAAZ,IACAstB,EAAAjgB,KAAAqF,IAAAtd,MAAA,KAAAJ,EAAA4L,WAAAZ,IACAsY,EAAA7c,EAAA6xB,EAAAhV,EAAA7c,EAAA6xB,EAAAhV,EAAA7c,EACA8c,EAAA9c,EAAA4xB,EAAA9U,EAAA9c,EAAA4xB,EAAA9U,EAAA9c,MAIAuR,IAAAsL,EAAA3c,EACAmR,KAAAwL,EAAA7c,EACAkX,OAAA4F,EAAA5c,EACAiX,MAAA2F,EAAA9c,IAWAzG,EAAA2mB,kBAAA,WACA,MAAA3nB,QAAA+G,KAAA/F,EAAAsD,KAAA,KAAgDi1B,IAAA,KAAQ1iB,IAAA,SAAA/Q,EAAA0L,GACxD,GAAA9D,GAAA1M,EAAAmkB,qBAAArf,GACAvG,GACAM,KAAAiG,EACAwJ,MAAArK,MAAAD,SAAAc,EAAA,KAAAA,EAAA9E,EAAA2nB,eAAA7iB,GAAA3C,cACA2E,MAAA9G,EAAAkD,MAAA+J,YACAuD,QACA9D,OACAlK,OAAAxC,EAAAwC,OAAAkK,GAMA,OAJA5H,KAAA9E,EAAA2I,WACApK,EAAAgd,QAAA,GAEAhd,EAAAyB,EAAA2I,UAAA3I,EAAAkkB,kBAAApf,GACAvG,KAWAyB,EAAAkmB,eAAA,WACAlmB,EAAAkjB,YASAljB,EAAAie,WAAA,SAAAua,EAAAhc,GACAxc,EAAAge,gBAAAwa,GAAAx4B,EAAAge,eACA,IAAAvX,GAAAE,EAAA/G,EAAAI,EAAA4c,WAIA,IAHAJ,IACAxc,EAAA4L,eAEA5L,EAAAge,gBAAAhG,KAAA,GACAhY,EAAAge,gBAAAL,OAAA3d,EAAAsD,KAAA8M,QACApQ,EAAAge,gBAAAlG,MAAA,GACA9X,EAAAge,gBAAAJ,MAAAhe,EAAAwQ,OACA,SAAAzM,OAAA,4BAEA,KAAA8C,EAAAzG,EAAAge,gBAAAhG,IAA8CvR,GAAAzG,EAAAge,gBAAAL,OAAkClX,GAAA,EAEhF,IADAzG,EAAA4L,WAAAnF,MACAE,EAAA3G,EAAAge,gBAAAlG,KAAmDnR,GAAA3G,EAAAge,gBAAAJ,MAAiCjX,GAAA,GACpF,IAAA3G,EAAA4L,WAAAnF,GAAAoF,QAAAlF,IACA3G,EAAA4L,WAAAnF,GAAAhC,KAAAkC,EAIA3G,GAAAqD,cAAA,oBACAgb,aAAAre,EAAAse,kBACA1S,WAAA5L,EAAA4L,WACAoS,gBAAAhe,EAAAge,mBAWAhe,EAAAumB,wBAAA,SAAA1nB,GACA,GAAAH,IAAAixB,GACA,sBAAA9wB,GACAmB,EAAA+G,IAAA6I,KAAA5P,EAAAkD,MAAAu1B,kBACAz4B,EAAA+G,IAAAgD,aAAA/J,EAAAsD,KAAA8M,QAAApQ,EAAAE,WAAA0S,WAAA,MAAA7C,YAAAjJ,MACA9G,EAAAkD,MAAAw1B,gBAAA14B,EAAAkD,MAAAy1B,0BACA34B,EAAAkD,MAAA01B,0BACA54B,EAAAkD,MAAA21B,0BACA74B,EAAAE,WAAAkP,KAAApP,EAAAkD,MAAA0F,eACA5I,EAAAkD,MAAAsF,oBAAAxI,EAAAkD,MAAA4F,qBAAA,KAEA9I,EAAA4c,YAAA/b,QAAA,SAAAuiB,GACA,GAAAA,EAAAvkB,SAAA,CACAmB,EAAA+G,IAAA6I,KAAA5P,EAAAkD,MAAA41B,oBACA,IAAAlvB,GAAA5J,EAAA+G,IAAAgD,YAAAqZ,EAAA9U,OAAA8U,EAAAvkB,MAAAiI,MACA9G,EAAAkD,MAAA61B,uBACA/4B,EAAAkD,MAAA81B,qBACAt6B,GAAAkL,EAAAlL,EAAAkL,EAAAlL,KAEAsB,EAAAsD,KAAAzC,QAAA,SAAAmM,GACAhN,EAAA+G,IAAA6I,KAAA5P,EAAAkD,MAAA+1B,QACA,IAAArvB,GAAA5J,EAAA+G,IAAAgD,YAAAiD,EAAAnO,IAAAiI,MACA9G,EAAAkD,MAAAg2B,iBACAl5B,EAAAkD,MAAA8sB,gBAAAhwB,EAAAkD,MAAAi2B,qBACAz6B,GAAAkL,EAAAlL,EAAAkL,EAAAlL,IAEAA,IAQAsB,EAAAmT,eAAA,WACA,MAAAnT,GAAAoS,mBAAAuD,OAAA,SAAAyjB,EAAAluB,GACA,MAAAkuB,GAAAluB,EAAApE,OACa,IAEb9G,EAAAyM,WAAApI,OAAA,SAAAX,GACA,WAAA3D,KAAA2D,EAAA0C,KAAApB,MAAAtB,EAAA0C,KAAApB,MAAA,IAEAhF,EAAAyM,WAAAkE,cAAA3Q,EAAAyM,WAAApI,OACArE,EAAAyM,WAAA4sB,WAAAr5B,EAAAyM,WAAApI,OACArE,EAAAyM,WAAA3I,OAAA9D,EAAAyM,WAAApI,OACArE,EAAAyM,WAAA6sB,IAAAt5B,EAAAyM,WAAApI,OACArE,EAAAyM,WAAAxG,KAAAjG,EAAAyM,WAAApI,OACArE,EAAAwe,QAAAna,OAAA,SAAA+f,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAArH,GACA,WAAArJ,KAAA0Q,EAAA2T,IAAA,OAAA3T,EAAA2T,GACA,MAEArkB,KAAAqJ,EAAAgb,IAAA,OAAAhb,EAAAgb,GACA,EAEAmV,EACA9oB,EAAA2T,GAAAoV,cACA/oB,EAAA2T,GAAAoV,cAAApwB,EAAAgb,IADuD,EAGvDhb,EAAAgb,GAAAoV,cACApwB,EAAAgb,GAAAoV,cAAA/oB,EAAA2T,IADmD,IAInDpkB,EAAAwe,QAAA1a,OAAA,SAAAsgB,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAArH,GACA,MAAAmwB,GACA9oB,EAAA2T,GAAAhb,EAAAgb,GAEAhb,EAAAgb,GAAA3T,EAAA2T,KAGApkB,EAAAwe,QAAAib,KAAA,SAAArV,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAArH,GACA,MAAAmwB,GACA,GAAAG,MAAAjpB,EAAA2T,IAAAuV,UACA,GAAAD,MAAAtwB,EAAAgb,IAAAuV,UAEA,GAAAD,MAAAtwB,EAAAgb,IAAAuV,UACA,GAAAD,MAAAjpB,EAAA2T,IAAAuV,cAICv5B,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            observer = new window.MutationObserver(function (mutations) {\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        applyComponentStyle(intf, self);\n                        return;\n                    }\n                });\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host { display: block; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe7ecf8486b87518eaf6","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            observer = new window.MutationObserver(function (mutations) {\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        applyComponentStyle(intf, self);\n                        return;\n                    }\n                });\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host { display: block; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}